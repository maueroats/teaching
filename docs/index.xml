<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mauer-Oats Classes on WY Computer Science</title>
    <link>http://wy-cs.info/</link>
    <description>Recent content in Mauer-Oats Classes on WY Computer Science</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 09 Sep 2017 17:00:30 -0500</lastBuildDate>
    
	<atom:link href="http://wy-cs.info/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Chapter 4 Reading Guide</title>
      <link>http://wy-cs.info/ap-cs/haskell/ch04/ch04-reading-guide/</link>
      <pubDate>Sun, 17 Sep 2017 20:47:05 -0500</pubDate>
      
      <guid>http://wy-cs.info/ap-cs/haskell/ch04/ch04-reading-guide/</guid>
      <description>Sections 4.1&amp;ndash;4.3  A pattern starts out with &amp;ldquo;dog&amp;rdquo;,&amp;ldquo;cat&amp;rdquo;, &amp;ldquo;cat dog&amp;rdquo;, &amp;ldquo;cat dog cat&amp;rdquo;, &amp;ldquo;cat dog cat cat dog&amp;rdquo;, and so on - each new string is created by appending the previous two with a space in between them. Write a function that takes in the number of the word in the sequence and returns the word, starting with 1 is &amp;ldquo;dog&amp;rdquo;.
 Write the function scalar_mult :: (Num a) =&amp;gt; a -&amp;gt; (a,a) -&amp;gt; (a,a) that multiplies each number in a coordinate pair by the same number, so scalar_mult 5 (1,3) == (5,15).</description>
    </item>
    
    <item>
      <title>Ch02 Reading Guide</title>
      <link>http://wy-cs.info/ap-cs/haskell/ch02/ch02-reading-guide/</link>
      <pubDate>Sat, 09 Sep 2017 15:57:47 -0500</pubDate>
      
      <guid>http://wy-cs.info/ap-cs/haskell/ch02/ch02-reading-guide/</guid>
      <description>Haskell Starting Out Questions A. Sections 2.1&amp;ndash;2.3  There is an annoyance with negative numbers that is mentioned.
 What is the correct way to write five times negative three in Haskell? What is a wrong way to do the same thing?  Logical operations are basic building blocks of programs. How do you write:
 and or not equals not equals  Haskell follows mostly the normal order of operations from mathematics.</description>
    </item>
    
    <item>
      <title>Haskell CW 2</title>
      <link>http://wy-cs.info/ap-cs/haskell/ch02/cw-a2/</link>
      <pubDate>Sat, 09 Sep 2017 15:57:47 -0500</pubDate>
      
      <guid>http://wy-cs.info/ap-cs/haskell/ch02/cw-a2/</guid>
      <description>&lt;h2 id=&#34;class-work-for-2-1-2-3&#34;&gt;Class work for 2.1&amp;ndash;2.3&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://projecteuler.net/problem=6&#34;&gt;Sum Square Difference&lt;/a&gt;
The sum of the squares of the first ten natural numbers is,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1^2 + 2^2 + ... + 10^2 = 385
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The square of the sum of the first ten natural numbers is,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(1 + 2 + ... + 10)^2 = 55^2 = 3025
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 âˆ’ 385 = 2640.&lt;/p&gt;

&lt;p&gt;Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Chapter 3 Reading Guide</title>
      <link>http://wy-cs.info/ap-cs/haskell/ch03/ch03-reading-guide-haskell/</link>
      <pubDate>Wed, 13 Sep 2017 13:18:35 -0500</pubDate>
      
      <guid>http://wy-cs.info/ap-cs/haskell/ch03/ch03-reading-guide-haskell/</guid>
      <description>&lt;p&gt;We learn about types and typeclasses.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Haskell HW 2</title>
      <link>http://wy-cs.info/ap-cs/haskell/ch02/hw-a2/</link>
      <pubDate>Tue, 12 Sep 2017 15:57:47 -0500</pubDate>
      
      <guid>http://wy-cs.info/ap-cs/haskell/ch02/hw-a2/</guid>
      <description>&lt;p&gt;Graph a function, is a pointon a line, get the numbers more than 100, break up a list,
find the nearest point.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Haskell HW 2 Solutions</title>
      <link>http://wy-cs.info/ap-cs/haskell/ch02/hw-a2-solution/</link>
      <pubDate>Thu, 14 Sep 2017 10:18:00 -0500</pubDate>
      
      <guid>http://wy-cs.info/ap-cs/haskell/ch02/hw-a2-solution/</guid>
      <description>breakItUp plan:
 replicate input list (length - 3) times zip with count helper function knows count and list, drop &amp;amp; take  breaklicator xs = replicate (length xs - 3) xs numberIt ys = zip ys [0..] breakItUp&#39; :: ([a],Int) -&amp;gt; [a] breakItUp&#39; (xs,y) = take 4 $ drop y xs breakItUp_v2 :: [a] -&amp;gt; [[a]] breakItUp_v2 xs = [ breakItUp&#39; w | w &amp;lt;- numberIt $ breaklicator xs ]  Fancy solution for breakItUp, shows power of Haskell pattern matching (Chapter 4):</description>
    </item>
    
    <item>
      <title>Syllabus: All Courses</title>
      <link>http://wy-cs.info/resources/generic-cs-syllabus/</link>
      <pubDate>Sat, 09 Sep 2017 15:50:00 -0500</pubDate>
      
      <guid>http://wy-cs.info/resources/generic-cs-syllabus/</guid>
      <description>Computer Science Syllabus Overview The most important information (contact information, grading scale) comes first. Anything you need that you do not see here, check the following sources:
 Class web site resources section Email me and ask: amauer-oats@cps.edu  Course-specific information  AP Computer Science Intermediate Computer Science  Contact information I read email regularly. Email amauer-oats@cps.edu. I am willing to call or text with you. Make sure your student put your phone number on the parent page of the student information form &amp;hellip; or email me.</description>
    </item>
    
    <item>
      <title>Chapter 3 Problem Set</title>
      <link>http://wy-cs.info/ap-cs/haskell/ch03/ch03-hw1/</link>
      <pubDate>Thu, 14 Sep 2017 10:00:00 -0500</pubDate>
      
      <guid>http://wy-cs.info/ap-cs/haskell/ch03/ch03-hw1/</guid>
      <description>&lt;p&gt;The essentials of the Types and Typeclasses chapter are: writing type
signatures for functions, reading string inputs with the &lt;code&gt;Read&lt;/code&gt; class,
and dealing with Integral to Fractional conversions when they are needed.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Syllabus: AP CS</title>
      <link>http://wy-cs.info/resources/apcs-syllabus--2017-2018/</link>
      <pubDate>Sat, 09 Sep 2017 15:49:20 -0500</pubDate>
      
      <guid>http://wy-cs.info/resources/apcs-syllabus--2017-2018/</guid>
      <description>This document gives information specific to the AP Computer Science course. See the all course syllabus information as well.
AP Review We will do approximately three weeks of AP review before the AP exam. Second semester grades will be significantly impacted by AP test preparation.
Many people benefit from outside preparation. Start in February. As a rough guide, the Barron&amp;rsquo;s AP Computer Science A text is too easy and the Be Prepared for the AP Computer Science Exam in Java book by Litvin and Litvin is too difficult.</description>
    </item>
    
    <item>
      <title>Chapter 4 Summary</title>
      <link>http://wy-cs.info/ap-cs/haskell/ch04/ch04-summary/</link>
      <pubDate>Tue, 19 Sep 2017 14:06:42 -0500</pubDate>
      
      <guid>http://wy-cs.info/ap-cs/haskell/ch04/ch04-summary/</guid>
      <description> patterns  f [] = 0 f (x:xs) = x + f xs   guards  numword x | x &amp;lt; 0 = &amp;quot;Negative&amp;quot; | x == 0 = &amp;quot;Zero&amp;quot; | otherwise = &amp;quot;Positive&amp;quot;   where  h x = constant * x where constant = 100   let  yis65 x = let (parabola = 10 * x * x + 25) in parabola == 65   case  numit value = case (value) of 5 -&amp;gt; &amp;quot;Five&amp;quot; 4 -&amp;gt; &amp;quot;Four&amp;quot; _ -&amp;gt; &amp;quot;Something else&amp;quot;  </description>
    </item>
    
  </channel>
</rss>