<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mauer-Oats Classes on WY Computer Science</title>
    <link>http://wy-cs.info/</link>
    <description>Recent content in Mauer-Oats Classes on WY Computer Science</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 09 Sep 2017 17:00:30 -0500</lastBuildDate>
    
	<atom:link href="http://wy-cs.info/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Connect Four Timeline</title>
      <link>http://wy-cs.info/ap-cs/haskell/connect-four/timeline/</link>
      <pubDate>Sat, 07 Oct 2017 08:59:38 -0500</pubDate>
      
      <guid>http://wy-cs.info/ap-cs/haskell/connect-four/timeline/</guid>
      <description>Day Date(s) Project Assignment     1 Fri, Oct 6 Project assigned. Write draw_board.   2-4 Sat-Mon, Oct 7-9 Plan, write, and test: is_legal_move.   5 Tues, Oct 10 Plan make_move in class. Write and test at home.   6 (15 min class) Share difficulties and troubleshoot.   7 Thurs, Oct 11 (early release) Plan, write, and test: is_won.   8 Fri, Oct 12 Write tests demonstrating code works.</description>
    </item>
    
    <item>
      <title>Intro to Animations</title>
      <link>http://wy-cs.info/intermediate-cs/ch06/animation/</link>
      <pubDate>Wed, 04 Oct 2017 13:03:36 -0500</pubDate>
      
      <guid>http://wy-cs.info/intermediate-cs/ch06/animation/</guid>
      <description>Intro to Animation Opener Write two functions:
 rotator: image -&amp;gt; image that turns the image 10 degrees.
 middle-placer: image -&amp;gt; image that places the given image in the center of a yellow circle of radius 200.
  Animation Code (definestarter(rectangle50200&amp;#34;solid&amp;#34;&amp;#34;purple&amp;#34;))(definedelay-time3)(big-bangstarter(on-tickrotatordelay-time)(on-drawmiddle-placer))  Animation Vocabulary  model: the part that changes
 on-tick: model -&amp;gt; model
  Moves to next time.
 on-draw: model -&amp;gt; image  Shows the result.</description>
    </item>
    
    <item>
      <title>Art Period 1</title>
      <link>http://wy-cs.info/intermediate-cs/ch03art/period-1/</link>
      <pubDate>Wed, 27 Sep 2017 20:14:20 -0500</pubDate>
      
      <guid>http://wy-cs.info/intermediate-cs/ch03art/period-1/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Animations Outline</title>
      <link>http://wy-cs.info/intermediate-cs/ch06/animation2/</link>
      <pubDate>Thu, 05 Oct 2017 20:55:16 -0500</pubDate>
      
      <guid>http://wy-cs.info/intermediate-cs/ch06/animation2/</guid>
      <description>All Steps  Model Draw handler Tick handler Key handler? Mouse handler?  1. Decide model  What will the computer remember in order to draw a scene?
 the moving parts
 image or number (usually)
  Write down type of model: image, number, string.
 Make an example (used in later testing).
  2. Draw handler  How will you draw the model on the screen?</description>
    </item>
    
    <item>
      <title>Animation Examples</title>
      <link>http://wy-cs.info/intermediate-cs/ch06/examples/</link>
      <pubDate>Sun, 15 Oct 2017 14:15:53 -0500</pubDate>
      
      <guid>http://wy-cs.info/intermediate-cs/ch06/examples/</guid>
      <description>Here is a complete example (raw Racket code available) that shows how to:
 move an image down every tick draw three copies of the image in a row make the image get larger when you hit a key make the image get smaller when you move the mouse  Big bang The big bang goes last in the Racket file, but it is first here so you can see how everything comes together.</description>
    </item>
    
    <item>
      <title>Book</title>
      <link>http://wy-cs.info/ap-cs/karel/book/</link>
      <pubDate>Tue, 17 Oct 2017 10:17:40 -0500</pubDate>
      
      <guid>http://wy-cs.info/ap-cs/karel/book/</guid>
      <description>The book is Karel J Robot: &amp;ldquo;A Gentle Introduction to the Art of Object-Oriented Programming in Java&amp;rdquo;, by Joseph Bergin, Mark Stehlik, Jim Roberts, and Rich Pattis. We have the January 2008 printing, but all versions are very similar. Happily, the book is available for under $10 used if you want one or want to donate one.</description>
    </item>
    
    <item>
      <title>Animation Portfolio</title>
      <link>http://wy-cs.info/intermediate-cs/ch06/portfolio/</link>
      <pubDate>Fri, 13 Oct 2017 08:24:58 -0500</pubDate>
      
      <guid>http://wy-cs.info/intermediate-cs/ch06/portfolio/</guid>
      <description> Purple square that moves up when you hit any key.
 Throwing star that spins (and maybe moves across the screen) as time passes.
 Sunset with a horizon.
 Car with two wheels that spin when you move the mouse.
  </description>
    </item>
    
    <item>
      <title>Animation Project</title>
      <link>http://wy-cs.info/intermediate-cs/ch06/project/</link>
      <pubDate>Fri, 20 Oct 2017 14:46:03 -0500</pubDate>
      
      <guid>http://wy-cs.info/intermediate-cs/ch06/project/</guid>
      <description>Deadline: Finish before Monday, October 23. Turn in Tuesday, October 24.
Produce: One sequence of big-bang animations per group. (Groups of at most two.)
Goal: Animation projects should demonstrate the use of draw, tick, mouse, and key handlers.
Time: Spend approximately two hours on this project.
Making an animation is a way to study for Monday&amp;rsquo;s animation test. Think of your work as a way to study and become more familiar with animations.</description>
    </item>
    
    <item>
      <title>Essentials</title>
      <link>http://wy-cs.info/ap-cs/karel/essentials/</link>
      <pubDate>Tue, 17 Oct 2017 10:17:44 -0500</pubDate>
      
      <guid>http://wy-cs.info/ap-cs/karel/essentials/</guid>
      <description>Getting started  GitHub Classroom
https://classroom.github.com/a/bOX4Z5jT  You should end up with a new repository which has all of the Karel starter files and also lets you save your files.
Note the link in the green box!
 Git clone
In this step you download your new repository to the computer you are working on. Start &amp;ldquo;Git Bash&amp;rdquo; or type the following in &amp;ldquo;Terminal&amp;rdquo; on your computer.
git clone paste-link-to-your-repository-here  One time settings</description>
    </item>
    
    <item>
      <title>Connect Four UI</title>
      <link>http://wy-cs.info/ap-cs/haskell/connect-four/ui/</link>
      <pubDate>Thu, 12 Oct 2017 09:54:31 -0500</pubDate>
      
      <guid>http://wy-cs.info/ap-cs/haskell/connect-four/ui/</guid>
      <description>The user interface code for Connect Four is a little clunky. (Repl.it shared code.) You may use the linked code. You do not have to learn this part of writing Haskell programs (yet).
Code Outline main: just make board and call event loop
event loop:
 draw board is it won?  print the win message  not won?  get a move recursive call to event loop with updated board, next player   Code All of the user interface code is linked separately (open in WordPad if necessary).</description>
    </item>
    
  </channel>
</rss>