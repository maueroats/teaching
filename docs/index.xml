<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mauer-Oats Classes on WY Computer Science</title>
    <link>http://wy-cs.info/</link>
    <description>Recent content in Mauer-Oats Classes on WY Computer Science</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 09 Sep 2017 17:00:30 -0500</lastBuildDate>
    
	<atom:link href="http://wy-cs.info/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Connect Four Timeline</title>
      <link>http://wy-cs.info/ap-cs/haskell/connect-four/timeline/</link>
      <pubDate>Sat, 07 Oct 2017 08:59:38 -0500</pubDate>
      
      <guid>http://wy-cs.info/ap-cs/haskell/connect-four/timeline/</guid>
      <description>Day Date(s) Project Assignment     1 Fri, Oct 6 Project assigned. Write draw_board.   2-4 Sat-Mon, Oct 7-9 Plan, write, and test: is_legal_move.   5 Tues, Oct 10 Plan make_move in class. Write and test at home.   6 (15 min class) Share difficulties and troubleshoot.   7 Thurs, Oct 11 (early release) Plan, write, and test: is_won.   8 Fri, Oct 12 Write tests demonstrating code works.</description>
    </item>
    
    <item>
      <title>Intro to Animations</title>
      <link>http://wy-cs.info/intermediate-cs/ch06/animation/</link>
      <pubDate>Wed, 04 Oct 2017 13:03:36 -0500</pubDate>
      
      <guid>http://wy-cs.info/intermediate-cs/ch06/animation/</guid>
      <description>Intro to Animation Opener Write two functions:
 rotator: image -&amp;gt; image that turns the image 10 degrees.
 middle-placer: image -&amp;gt; image that places the given image in the center of a yellow circle of radius 200.
  Animation Code (definestarter(rectangle50200&amp;#34;solid&amp;#34;&amp;#34;purple&amp;#34;))(definedelay-time3)(big-bangstarter(on-tickrotatordelay-time)(on-drawmiddle-placer))  Animation Vocabulary  model: the part that changes
 on-tick: model -&amp;gt; model
  Moves to next time.
 on-draw: model -&amp;gt; image  Shows the result.</description>
    </item>
    
    <item>
      <title>Art Period 1</title>
      <link>http://wy-cs.info/intermediate-cs/ch03art/period-1/</link>
      <pubDate>Wed, 27 Sep 2017 20:14:20 -0500</pubDate>
      
      <guid>http://wy-cs.info/intermediate-cs/ch03art/period-1/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Animations Outline</title>
      <link>http://wy-cs.info/intermediate-cs/ch06/animation2/</link>
      <pubDate>Thu, 05 Oct 2017 20:55:16 -0500</pubDate>
      
      <guid>http://wy-cs.info/intermediate-cs/ch06/animation2/</guid>
      <description>All Steps  Model Draw handler Tick handler Key handler? Mouse handler?  1. Decide model  What will the computer remember in order to draw a scene?
 the moving parts
 image or number (usually)
  Write down type of model: image, number, string.
 Make an example (used in later testing).
  2. Draw handler  How will you draw the model on the screen?</description>
    </item>
    
    <item>
      <title>Essentials</title>
      <link>http://wy-cs.info/ap-cs/karel/essentials/</link>
      <pubDate>Mon, 16 Oct 2017 11:19:58 -0500</pubDate>
      
      <guid>http://wy-cs.info/ap-cs/karel/essentials/</guid>
      <description>Book The book is Karel J Robot: &amp;ldquo;A Gentle Introduction to the Art of Object-Oriented Programming in Java&amp;rdquo;, by Joseph Bergin, Mark Stehlik, Jim Roberts, and Rich Pattis. We have the January 2008 printing, but all versions are very similar. Happily, the book is available for under $10 used if you want one or want to donate one.
Downloading the files You should get them all by git clone the central repository.</description>
    </item>
    
    <item>
      <title>Connect Four UI</title>
      <link>http://wy-cs.info/ap-cs/haskell/connect-four/ui/</link>
      <pubDate>Thu, 12 Oct 2017 09:54:31 -0500</pubDate>
      
      <guid>http://wy-cs.info/ap-cs/haskell/connect-four/ui/</guid>
      <description>The user interface code for Connect Four is a little clunky. (Repl.it shared code.) You may use the linked code. You do not have to learn this part of writing Haskell programs (yet).
Code Outline main: just make board and call event loop
event loop:
 draw board is it won?  print the win message  not won?  get a move recursive call to event loop with updated board, next player   Code All of the user interface code is linked separately (open in WordPad if necessary).</description>
    </item>
    
    <item>
      <title>Art Period 5</title>
      <link>http://wy-cs.info/intermediate-cs/ch03art/period-5/</link>
      <pubDate>Wed, 27 Sep 2017 20:14:40 -0500</pubDate>
      
      <guid>http://wy-cs.info/intermediate-cs/ch03art/period-5/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Art Period 7</title>
      <link>http://wy-cs.info/intermediate-cs/ch03art/period-7/</link>
      <pubDate>Wed, 27 Sep 2017 20:14:43 -0500</pubDate>
      
      <guid>http://wy-cs.info/intermediate-cs/ch03art/period-7/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Karel 1 and 2</title>
      <link>http://wy-cs.info/ap-cs/karel/ch1&#43;2/</link>
      <pubDate>Mon, 16 Oct 2017 14:53:49 -0500</pubDate>
      
      <guid>http://wy-cs.info/ap-cs/karel/ch1&#43;2/</guid>
      <description> 2017-10-16 Monday: Homework - read Chapters 1 and 2 (pages 1-20).
 2017-10-17 Tuesday: Clone repository, set up your own to save. Exercises (please use the same names): Do exercises 2.7 and 2.11, incuding making the worlds. Please use the names below for the classes you make:
 Ex 2.7: GroceryPickup Ex 2.11: BeeperHandoff   </description>
    </item>
    
    <item>
      <title>Connect Four Spoilers</title>
      <link>http://wy-cs.info/ap-cs/haskell/connect-four/spoilers/</link>
      <pubDate>Fri, 06 Oct 2017 22:31:43 -0500</pubDate>
      
      <guid>http://wy-cs.info/ap-cs/haskell/connect-four/spoilers/</guid>
      <description>Two problems with connect four: changing an entry in a matrix ([[Int]]) and seeing if there is a win.
Changing entries in the board The biggest problem with the representation of the board as [[Int]] is that it is really hard to change the entries. If you use [((Int,Int),Player)] then it&amp;rsquo;s lots easier to make moves.
Outline of plan:
 (changeCol: [Int] -&amp;gt; Int -&amp;gt; Int -&amp;gt; [Int]) Change value at index col in a single row to newVal; every other value in the list just output unchanged.</description>
    </item>
    
  </channel>
</rss>