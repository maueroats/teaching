<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Connect Four on WY Computer Science</title>
    <link>http://wy-cs.info/ap-cs/haskell/connect-four/</link>
    <description>Recent content in Connect Four on WY Computer Science</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 06 Oct 2017 09:53:05 -0500</lastBuildDate>
    
	<atom:link href="http://wy-cs.info/ap-cs/haskell/connect-four/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Connect Four Timeline</title>
      <link>http://wy-cs.info/ap-cs/haskell/connect-four/timeline/</link>
      <pubDate>Sat, 07 Oct 2017 08:59:38 -0500</pubDate>
      
      <guid>http://wy-cs.info/ap-cs/haskell/connect-four/timeline/</guid>
      <description>Day Date(s) Project Assignment     1 Fri, Oct 6 Project assigned. Write draw_board.   2-4 Sat-Mon, Oct 7-9 Plan, write, and test: is_legal_move.   5 Tues, Oct 10 Plan make_move in class. Write and test at home.   6 (15 min class) Share difficulties and troubleshoot.   7 Thurs, Oct 11 (early release) Plan, write, and test: is_won.   8 Fri, Oct 12 Write tests demonstrating code works.</description>
    </item>
    
    <item>
      <title>Connect Four UI</title>
      <link>http://wy-cs.info/ap-cs/haskell/connect-four/ui/</link>
      <pubDate>Thu, 12 Oct 2017 09:54:31 -0500</pubDate>
      
      <guid>http://wy-cs.info/ap-cs/haskell/connect-four/ui/</guid>
      <description>The user interface code for Connect Four is a little clunky. (Repl.it shared code.) You may use the linked code. You do not have to learn this part of writing Haskell programs (yet).
Code Outline main: just make board and call event loop
event loop:
 draw board is it won?  print the win message  not won?  get a move recursive call to event loop with updated board, next player   Code All of the user interface code is linked separately (open in WordPad if necessary).</description>
    </item>
    
    <item>
      <title>Connect Four Spoilers</title>
      <link>http://wy-cs.info/ap-cs/haskell/connect-four/spoilers/</link>
      <pubDate>Fri, 06 Oct 2017 22:31:43 -0500</pubDate>
      
      <guid>http://wy-cs.info/ap-cs/haskell/connect-four/spoilers/</guid>
      <description>Two problems with connect four: changing an entry in a matrix ([[Int]]) and seeing if there is a win.
Changing entries in the board The biggest problem with the representation of the board as [[Int]] is that it is really hard to change the entries. If you use [((Int,Int),Player)] then it&amp;rsquo;s lots easier to make moves.
Outline of plan:
 (changeCol: [Int] -&amp;gt; Int -&amp;gt; Int -&amp;gt; [Int]) Change value at index col in a single row to newVal; every other value in the list just output unchanged.</description>
    </item>
    
    <item>
      <title>Connect Four Rubric</title>
      <link>http://wy-cs.info/ap-cs/haskell/connect-four/rubric/</link>
      <pubDate>Fri, 13 Oct 2017 10:40:15 -0500</pubDate>
      
      <guid>http://wy-cs.info/ap-cs/haskell/connect-four/rubric/</guid>
      <description>DRAFT: MAY CHANGE
There are four functions that you are expected to design and test:
 draw_board: Create a String representation of the board. is_legal_move: True if the attempted move is legal. Used to prevent players from moving in full columns or playing in column -5. is_won: True if the game is over (either player has four in a row). make_move: Gives a new Board with a piece added. Assumes that the move is legal.</description>
    </item>
    
  </channel>
</rss>