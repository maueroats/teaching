<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>2. Starting Out on WY Computer Science</title>
    <link>http://wy-cs.info/ap-cs/haskell/ch02/</link>
    <description>Recent content in 2. Starting Out on WY Computer Science</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 09 Sep 2017 15:57:47 -0500</lastBuildDate>
    
	<atom:link href="http://wy-cs.info/ap-cs/haskell/ch02/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Ch02 Reading Guide</title>
      <link>http://wy-cs.info/ap-cs/haskell/ch02/ch02-reading-guide/</link>
      <pubDate>Sat, 09 Sep 2017 15:57:47 -0500</pubDate>
      
      <guid>http://wy-cs.info/ap-cs/haskell/ch02/ch02-reading-guide/</guid>
      <description>Haskell Starting Out Questions A. Sections 2.1&amp;ndash;2.3  There is an annoyance with negative numbers that is mentioned.
 What is the correct way to write five times negative three in Haskell? What is a wrong way to do the same thing?  Logical operations are basic building blocks of programs. How do you write:
 and or not equals not equals  Haskell follows mostly the normal order of operations from mathematics.</description>
    </item>
    
    <item>
      <title>Haskell CW 2</title>
      <link>http://wy-cs.info/ap-cs/haskell/ch02/cw-a2/</link>
      <pubDate>Sat, 09 Sep 2017 15:57:47 -0500</pubDate>
      
      <guid>http://wy-cs.info/ap-cs/haskell/ch02/cw-a2/</guid>
      <description>&lt;h2 id=&#34;class-work-for-2-1-2-3&#34;&gt;Class work for 2.1&amp;ndash;2.3&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://projecteuler.net/problem=6&#34;&gt;Sum Square Difference&lt;/a&gt;
The sum of the squares of the first ten natural numbers is,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1^2 + 2^2 + ... + 10^2 = 385
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The square of the sum of the first ten natural numbers is,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(1 + 2 + ... + 10)^2 = 55^2 = 3025
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 âˆ’ 385 = 2640.&lt;/p&gt;

&lt;p&gt;Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Haskell HW 2</title>
      <link>http://wy-cs.info/ap-cs/haskell/ch02/hw-a2/</link>
      <pubDate>Tue, 12 Sep 2017 15:57:47 -0500</pubDate>
      
      <guid>http://wy-cs.info/ap-cs/haskell/ch02/hw-a2/</guid>
      <description>&lt;p&gt;Graph a function, is a pointon a line, get the numbers more than 100, break up a list,
find the nearest point.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Haskell HW 2 Solutions</title>
      <link>http://wy-cs.info/ap-cs/haskell/ch02/hw-a2-solution/</link>
      <pubDate>Thu, 14 Sep 2017 10:18:00 -0500</pubDate>
      
      <guid>http://wy-cs.info/ap-cs/haskell/ch02/hw-a2-solution/</guid>
      <description>breakItUp plan:
 replicate input list (length - 3) times zip with count helper function knows count and list, drop &amp;amp; take  breaklicatorxs=replicate(lengthxs-3)xsnumberItys=zipys[0..]breakItUp&amp;#39;::([a],Int)-&amp;gt;[a]breakItUp&amp;#39;(xs,y)=take4$dropyxsbreakItUp_v2::[a]-&amp;gt;[[a]]breakItUp_v2xs=[breakItUp&amp;#39;w|w&amp;lt;-numberIt$breaklicatorxs]  Fancy solution for breakItUp, shows power of Haskell pattern matching (Chapter 4):
breakItUp::[a]-&amp;gt;[[a]]breakItUp[a,b,c,d]=[[a,b,c,d]]breakItUp(x:xs)=(x:take3xs):breakItUpxs  targetPractice plan:
 distance formula helper function that remembers the closest point so far recursively go through list of all points  -- you should just write (Int,Int) everywhere I write PttypePt=(Int,Int)dist::Pt-&amp;gt;Pt-&amp;gt;Intdist(x0,y0)(x1,y1)=(x1-x0)^2+(y1-y0)^2targetPractice::Pt-&amp;gt;[Pt]-&amp;gt;PttargetPracticeptptList=targetPractice&amp;#39;ptptList(headptList)targetPractice&amp;#39;::Pt-&amp;gt;[Pt]-&amp;gt;Pt-&amp;gt;PttargetPractice&amp;#39;pt[]closestSoFar=closestSoFartargetPractice&amp;#39;pt(x:xs)closestSoFar=targetPractice&amp;#39;ptxsnewClosestwherenewClosest=if(distxpt)&amp;lt;(distclosestSoFarpt)thenxelseclosestSoFar </description>
    </item>
    
  </channel>
</rss>