<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>4. Syntax in Functions on WY Computer Science</title>
    <link>http://wy-cs.info/ap-cs/haskell/ch04/</link>
    <description>Recent content in 4. Syntax in Functions on WY Computer Science</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 18 Sep 2017 13:22:05 -0500</lastBuildDate>
    
	<atom:link href="http://wy-cs.info/ap-cs/haskell/ch04/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Chapter 4 Reading Guide</title>
      <link>http://wy-cs.info/ap-cs/haskell/ch04/ch04-reading-guide/</link>
      <pubDate>Sun, 17 Sep 2017 20:47:05 -0500</pubDate>
      
      <guid>http://wy-cs.info/ap-cs/haskell/ch04/ch04-reading-guide/</guid>
      <description>Sections 4.1&amp;ndash;4.3  A pattern starts out with &amp;ldquo;dog&amp;rdquo;,&amp;ldquo;cat&amp;rdquo;, &amp;ldquo;cat dog&amp;rdquo;, &amp;ldquo;cat dog cat&amp;rdquo;, &amp;ldquo;cat dog cat cat dog&amp;rdquo;, and so on - each new string is created by appending the previous two with a space in between them. Write a function that takes in the number of the word in the sequence and returns the word, starting with 1 is &amp;ldquo;dog&amp;rdquo;.
 Write the function scalar_mult :: (Num a) =&amp;gt; a -&amp;gt; (a,a) -&amp;gt; (a,a) that multiplies each number in a coordinate pair by the same number, so scalar_mult 5 (1,3) == (5,15).</description>
    </item>
    
    <item>
      <title>Chapter 4 Problem Set</title>
      <link>http://wy-cs.info/ap-cs/haskell/ch04/ch04-problemset/</link>
      <pubDate>Wed, 20 Sep 2017 20:32:15 -0500</pubDate>
      
      <guid>http://wy-cs.info/ap-cs/haskell/ch04/ch04-problemset/</guid>
      <description>Key new concepts: patterns, guards, where, let, case.
Please write function signatures for every solution.
 Some of these problems are classical exercises with solutions online. Please do not search for them or read them before turning in your work. (See Academic Integrity.)
Exercises  First Third. Return the sum of the first and third elements in the list. Example: firstThird [10,30,50,90] == 60.
 Take a list of items that can be compared for equality (Eq a) and reduce repeats to a single element.</description>
    </item>
    
    <item>
      <title>Chapter 4 Summary</title>
      <link>http://wy-cs.info/ap-cs/haskell/ch04/ch04-summary/</link>
      <pubDate>Tue, 19 Sep 2017 14:06:42 -0500</pubDate>
      
      <guid>http://wy-cs.info/ap-cs/haskell/ch04/ch04-summary/</guid>
      <description> patterns  f [] = 0 f (x:xs) = x + f xs   guards  numword x | x &amp;lt; 0 = &amp;quot;Negative&amp;quot; | x == 0 = &amp;quot;Zero&amp;quot; | otherwise = &amp;quot;Positive&amp;quot;   where  h x = constant * x where constant = 100   let  yis65 x = let (parabola = 10 * x * x + 25) in parabola == 65   case  numit value = case (value) of 5 -&amp;gt; &amp;quot;Five&amp;quot; 4 -&amp;gt; &amp;quot;Four&amp;quot; _ -&amp;gt; &amp;quot;Something else&amp;quot;  </description>
    </item>
    
  </channel>
</rss>