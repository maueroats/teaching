<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Haskell on WY Computer Science</title>
    <link>https://wy-cs.site/tags/haskell/</link>
    <description>Recent content in Haskell on WY Computer Science</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 09 Sep 2017 15:34:07 -0500</lastBuildDate>
    
	<atom:link href="https://wy-cs.site/tags/haskell/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>1. Intro</title>
      <link>https://wy-cs.site/ap-cs/haskell/ch01/</link>
      <pubDate>Sat, 09 Sep 2017 15:34:07 -0500</pubDate>
      
      <guid>https://wy-cs.site/ap-cs/haskell/ch01/</guid>
      <description>&lt;p&gt;A high-level overview of the Haskell language and why its features are good.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>2. Starting Out</title>
      <link>https://wy-cs.site/ap-cs/haskell/ch02/</link>
      <pubDate>Sat, 09 Sep 2017 15:57:47 -0500</pubDate>
      
      <guid>https://wy-cs.site/ap-cs/haskell/ch02/</guid>
      <description>&lt;p&gt;Learn how to make lists and tuples.
We also learn the basic list manipulation commands.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>3. Types and Typeclasses</title>
      <link>https://wy-cs.site/ap-cs/haskell/ch03/</link>
      <pubDate>Tue, 12 Sep 2017 13:18:35 -0500</pubDate>
      
      <guid>https://wy-cs.site/ap-cs/haskell/ch03/</guid>
      <description>&lt;p&gt;Types categorize the kinds of data that appear in a program. Typeclasses provide general abilities that different types can have.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>4. Syntax in Functions</title>
      <link>https://wy-cs.site/ap-cs/haskell/ch04/</link>
      <pubDate>Mon, 18 Sep 2017 13:22:05 -0500</pubDate>
      
      <guid>https://wy-cs.site/ap-cs/haskell/ch04/</guid>
      <description>&lt;p&gt;Patterns, guards, where, let, and case.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Haskell</title>
      <link>https://wy-cs.site/ap-cs/haskell/</link>
      <pubDate>Wed, 05 Sep 2018 11:26:51 -0500</pubDate>
      
      <guid>https://wy-cs.site/ap-cs/haskell/</guid>
      <description>You will need the the text Learn You a Haskell For Great Good.
 Use repl.it for programming.
 Haskell is a pure, lazy, statically typed language. In the first chapter you will learn what those terms mean. Later you will learn how to write programs.
Chapters  1. Intro A high-level overview of the Haskell language and why its features are good.   2. Starting Out Learn how to make lists and tuples.</description>
    </item>
    
    <item>
      <title>Chapter 4 Reading Guide</title>
      <link>https://wy-cs.site/ap-cs/haskell/ch04/ch04-reading-guide/</link>
      <pubDate>Sun, 17 Sep 2017 20:47:05 -0500</pubDate>
      
      <guid>https://wy-cs.site/ap-cs/haskell/ch04/ch04-reading-guide/</guid>
      <description>Sections 4.1&amp;ndash;4.3  A pattern starts out with &amp;ldquo;dog&amp;rdquo;,&amp;ldquo;cat&amp;rdquo;, &amp;ldquo;cat dog&amp;rdquo;, &amp;ldquo;cat dog cat&amp;rdquo;, &amp;ldquo;cat dog cat cat dog&amp;rdquo;, and so on - each new string is created by appending the previous two with a space in between them. Write a function that takes in the number of the word in the sequence and returns the word, starting with 1 is &amp;ldquo;dog&amp;rdquo;.
 Write the function scalar_mult :: (Num a) =&amp;gt; a -&amp;gt; (a,a) -&amp;gt; (a,a) that multiplies each number in a coordinate pair by the same number, so scalar_mult 5 (1,3) == (5,15).</description>
    </item>
    
    <item>
      <title>Ch02 Reading Guide</title>
      <link>https://wy-cs.site/ap-cs/haskell/ch02/ch02-reading-guide/</link>
      <pubDate>Sat, 09 Sep 2017 15:57:47 -0500</pubDate>
      
      <guid>https://wy-cs.site/ap-cs/haskell/ch02/ch02-reading-guide/</guid>
      <description>Haskell Starting Out Questions A. Sections 2.1&amp;ndash;2.3  There is an annoyance with negative numbers that is mentioned.
 What is the correct way to write five times negative three in Haskell? What is a wrong way to do the same thing?  Logical operations are basic building blocks of programs. How do you write:
 and or not equals not equals  Haskell follows mostly the normal order of operations from mathematics.</description>
    </item>
    
    <item>
      <title>Haskell Calendar</title>
      <link>https://wy-cs.site/ap-cs/haskell-calendar/</link>
      <pubDate>Wed, 05 Sep 2018 11:19:45 -0500</pubDate>
      
      <guid>https://wy-cs.site/ap-cs/haskell-calendar/</guid>
      <description>Daily calendar for Haskell unit.
 </description>
    </item>
    
    <item>
      <title>Haskell CW 2</title>
      <link>https://wy-cs.site/ap-cs/haskell/ch02/cw-a2/</link>
      <pubDate>Sat, 09 Sep 2017 15:57:47 -0500</pubDate>
      
      <guid>https://wy-cs.site/ap-cs/haskell/ch02/cw-a2/</guid>
      <description>&lt;h2 id=&#34;class-work-for-2-1-2-3&#34;&gt;Class work for 2.1&amp;ndash;2.3&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://projecteuler.net/problem=6&#34;&gt;Sum Square Difference&lt;/a&gt;
The sum of the squares of the first ten natural numbers is,&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;1^2 + 2^2 + ... + 10^2 = 385&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The square of the sum of the first ten natural numbers is,&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;(1 + 2 + ... + 10)^2 = 55^2 = 3025&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 âˆ’ 385 = 2640.&lt;/p&gt;

&lt;p&gt;Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Chapter 4 Problem Set</title>
      <link>https://wy-cs.site/ap-cs/haskell/ch04/ch04-problemset/</link>
      <pubDate>Wed, 20 Sep 2017 20:32:15 -0500</pubDate>
      
      <guid>https://wy-cs.site/ap-cs/haskell/ch04/ch04-problemset/</guid>
      <description>Key new concepts: patterns, guards, where, let, case.
Please write function signatures for every solution.
 Some of these problems are classical exercises with solutions online. Please do not search for them or read them before turning in your work. (See Academic Integrity.)
Exercises  First Third. Return the sum of the first and third elements in the list. Example: firstThird [10,30,50,90] == 60.
 Take a list of items that can be compared for equality (Eq a) and reduce repeats to a single element.</description>
    </item>
    
  </channel>
</rss>