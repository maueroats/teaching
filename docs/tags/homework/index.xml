<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Homework on WY Computer Science</title>
    <link>https://wy-cs.site/tags/homework/</link>
    <description>Recent content in Homework on WY Computer Science</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 20 Sep 2017 20:32:15 -0500</lastBuildDate>
    
	<atom:link href="https://wy-cs.site/tags/homework/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Chapter 4 Problem Set</title>
      <link>https://wy-cs.site/ap-cs/haskell/ch04/ch04-problemset/</link>
      <pubDate>Wed, 20 Sep 2017 20:32:15 -0500</pubDate>
      
      <guid>https://wy-cs.site/ap-cs/haskell/ch04/ch04-problemset/</guid>
      <description>Key new concepts: patterns, guards, where, let, case.
Please write function signatures for every solution.
 Some of these problems are classical exercises with solutions online. Please do not search for them or read them before turning in your work. (See Academic Integrity.)
Exercises  First Third. Return the sum of the first and third elements in the list. Example: firstThird [10,30,50,90] == 60.
 Take a list of items that can be compared for equality (Eq a) and reduce repeats to a single element.</description>
    </item>
    
    <item>
      <title>Haskell HW 2</title>
      <link>https://wy-cs.site/ap-cs/haskell/ch02/hw-a2/</link>
      <pubDate>Tue, 12 Sep 2017 15:57:47 -0500</pubDate>
      
      <guid>https://wy-cs.site/ap-cs/haskell/ch02/hw-a2/</guid>
      <description>&lt;p&gt;Graph a function, is a pointon a line, get the numbers more than 100, break up a list,
find the nearest point.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Haskell HW 2 Solutions</title>
      <link>https://wy-cs.site/ap-cs/haskell/ch02/hw-a2-solution/</link>
      <pubDate>Thu, 14 Sep 2017 10:18:00 -0500</pubDate>
      
      <guid>https://wy-cs.site/ap-cs/haskell/ch02/hw-a2-solution/</guid>
      <description>breakItUp plan:
 replicate input list (length - 3) times zip with count helper function knows count and list, drop &amp;amp; take  breaklicator xs = replicate (length xs - 3) xs numberIt ys = zip ys [0..] breakItUp&amp;#39; :: ([a],Int) -&amp;gt; [a] breakItUp&amp;#39; (xs,y) = take 4 $ drop y xs breakItUp_v2 :: [a] -&amp;gt; [[a]] breakItUp_v2 xs = [ breakItUp&amp;#39; w | w &amp;lt;- numberIt $ breaklicator xs ] Fancy solution for breakItUp, shows power of Haskell pattern matching (Chapter 4):</description>
    </item>
    
    <item>
      <title>3. More Interesting Pictures</title>
      <link>https://wy-cs.site/intermediate-cs/part-i/ch03/</link>
      <pubDate>Mon, 18 Sep 2017 22:07:54 -0500</pubDate>
      
      <guid>https://wy-cs.site/intermediate-cs/part-i/ch03/</guid>
      <description>Pictures and Color  Quick guide to image variables in Picturing Programs. All of the images from the book online.
 Commands to change words to colors.
  Homework  3.a, done in two days: pages 1-2 and pages 3-4. 3.b: problems 1-8. (Come in ready to discuss 8 if you cannot do it.)  See assignment sheet for more information.</description>
    </item>
    
    <item>
      <title>Chapter 3 Problem Set</title>
      <link>https://wy-cs.site/ap-cs/haskell/ch03/ch03-hw1/</link>
      <pubDate>Thu, 14 Sep 2017 10:00:00 -0500</pubDate>
      
      <guid>https://wy-cs.site/ap-cs/haskell/ch03/ch03-hw1/</guid>
      <description>&lt;p&gt;The essentials of the Types and Typeclasses chapter are: writing type
signatures for functions, reading string inputs with the &lt;code&gt;Read&lt;/code&gt; class,
and dealing with Integral to Fractional conversions when they are needed.
&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>