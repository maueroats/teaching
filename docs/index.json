[
{
	"uri": "https://maueroats.github.io/teaching/ap-cs/haskell/ch02/ch02-reading-guide/",
	"title": "Ch02 Reading Guide",
	"tags": ["haskell", "reading-guide"],
	"description": "",
	"content": " Haskell Starting Out Questions A. Sections 2.1\u0026ndash;2.3  There is an annoyance with negative numbers that is mentioned.\n What is the correct way to write five times negative three in Haskell? What is a wrong way to do the same thing?  Logical operations are basic building blocks of programs. How do you write:\n and or not equals not equals  Haskell follows mostly the normal order of operations from mathematics. However, in math functions must be written f(x) with parentheses, whereas in Haskell functions can be written f x without parentheses. This means we need to fit functions into the order of operations.\n Where does function calling fit in the order of operations? Give an example of a problem that this could create. (That is, the program does not do what a math student would expect it to do.)  Write the function hypSquare a b that computes the square of the length of the hypotenuse of a right triangle with legs a and b.\n The apostrophe character (') is usually used for one of two purposes. List both:\n Purpose 1: Purpose 2:  Are you allowed to use the apostrophe in function or variable names?\n In Racket you used (cons x listy) to make a list with x before an existing list. How do you do that in Haskell?\n In Racket you used (concatenate firstStr secondStr) to put two strings together. How do you do that in Haskell?\n Slightly longer exercise:\n Make a list learn containing the words \u0026ldquo;this\u0026rdquo; \u0026ldquo;is\u0026rdquo; \u0026ldquo;all\u0026rdquo; \u0026ldquo;good\u0026rdquo;. Make a new list called learnMore containing \u0026ldquo;Hopefully\u0026rdquo; \u0026ldquo;this\u0026rdquo; \u0026ldquo;is\u0026rdquo; \u0026ldquo;all\u0026rdquo; \u0026ldquo;good\u0026rdquo; What is learnMore !! 4.  Complete the table of equivalents\n     Racket Haskell language equivalent functions     first \u0026hellip;   rest \u0026hellip;   length \u0026hellip;   empty? \u0026hellip;     What are the signatures and purposes of these functions?\n init last take drop  How can you ask the computer if the list called xs contains the number 5?\n There are several more functions that are used less often, but still make it into the basic starting out chapter. Write quick summaries as necessary.\n reverse maximum minimum sum product   B. Sections 2.4\u0026ndash;2.6  Create a list of integers from 1 to 1000 (inclusive).\n Create a list of letters from 'm' to 'a' in that order.\n New functions: write signature and purpose for each.\n cycle repeat replicate  Write a function that removes all of the vowels from a word.\n What is the main difference between a tuple and a list?\n New functions: write signature and purpose for each.\n fst snd zip  Write a function that takes in a list of words and puts out a list of ordered pairs (word, length of word).\n Write a function that takes in a list of words and puts out a list with the second word doubled in its own list, the third word tripled in its own list, etc.\n  For example, the function call\namplify [\u0026quot;hill\u0026quot;,\u0026quot;rock\u0026quot;,\u0026quot;star\u0026quot;,\u0026quot;four\u0026quot;]  should produce\n[[\u0026quot;hill\u0026quot;],[\u0026quot;rock\u0026quot;,\u0026quot;rock\u0026quot;],[\u0026quot;star\u0026quot;,\u0026quot;star\u0026quot;,\u0026quot;star\u0026quot;], [\u0026quot;four\u0026quot;,\u0026quot;four\u0026quot;,\u0026quot;four\u0026quot;,\u0026quot;four\u0026quot;]]  "
},
{
	"uri": "https://maueroats.github.io/teaching/ap-cs/",
	"title": "AP CS",
	"tags": [],
	"description": "",
	"content": "AP Computer Science studies:\n Haskell - an introduction to pure functional programming Java - the language required for the AP test  Resources The course syllabus, grading weights, and other basic information can be found in the resources section of the site. "
},
{
	"uri": "https://maueroats.github.io/teaching/ap-cs/haskell/ch01/",
	"title": "1. Intro",
	"tags": ["haskell"],
	"description": "",
	"content": "A high-level overview of the Haskell language and why its features are good. You should read it carefully and note what items you are unfamiliar with. Writing down your questions will help you remember what parts were difficult so that we can discuss them in class.\n Haskell Chapter 1 Reading Guide "
},
{
	"uri": "https://maueroats.github.io/teaching/ap-cs/haskell/ch02/",
	"title": "2. Starting Out",
	"tags": ["haskell"],
	"description": "",
	"content": "Learn how to make lists and tuples. We also learn the basic list manipulation commands.  Create a list: [5..13] or [5,10..100] or [ n^2 | n\u0026lt;-[1..100], even n] Create a tuple: (5,12) Key to remember: head, tail, init, last, :, ++ Other list functions: maximum, minimum, sum, product, reverse  Resources  Reading guide Problem Set hw:a2 for chapter 2. (Also PDF.) "
},
{
	"uri": "https://maueroats.github.io/teaching/ap-cs/haskell/ch02/hw-a2/",
	"title": "Haskell HW 2",
	"tags": ["homework", "hw", "haskell", "ap-cs"],
	"description": "",
	"content": "Problem set hw:a2 Class (One Day)  (Sum Square Difference)[https://projecteuler.net/problem=6] The sum of the squares of the first ten natural numbers is,\n1^2 + 2^2 + ... + 10^2 = 385  The square of the sum of the first ten natural numbers is,\n(1 + 2 + ... + 10)^2 = 55^2 = 3025  Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 − 385 = 2640.\nFind the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.\n  \n (Multiples of 3 and 5)[https://projecteuler.net/problem=1] If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23. Find the sum of all the multiples of 3 or 5 below 1000.\n (Smallest Multiple)[https://projecteuler.net/problem=5] 2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder. What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?\n  Homework  Write the \u0026ldquo;grapher\u0026rdquo; function whose inputs are (i) a function f that takes in a number and puts out a number, (ii) a lower bound, and (iii) an upper bound. The grapher function should return a list of coordinates (x,y) where y=f(x) and x goes from the lower bound to the upper bound increasing by 1 each time.\n Write a function onLine that takes in a slope m, a y-intercept b, and a point (x0,y0) and gives back True if the point is on the line y=m*x+b and false otherwise.\n Write a function moreThan100 that takes in a list of numbers and puts out a list of numbers. The output is the same as the input with all of the numbers less than or equal to 100 removed.\n Break It Up. Given a list of numbers, create a list containing every sequence of four numbers in a row. Example:\nbreakItUp [5,10,20,3,8,9] = [ [5,10,20,3], [10,20,3,8], [20,3,8,9] ]  Target Practice. (Challenge) Given a point (x0,y0) and a list of ordered pairs, return the point in the list that is closest to the given point. (Hint: skip the square root when you compare distances, it will save you some Haskell difficulties.)\n  OMIT  Write a function addp that adds two ordered pairs.\n (Bonus) The function nextInDirection takes in start point (x0,y0), a direction (dx,dy), and a list of ordered pairs. The function returns the point in the list that is closest to the start point and can be reached by beginning at the start and going in the given direction.\n "
},
{
	"uri": "https://maueroats.github.io/teaching/resources/generic-cs-syllabus/",
	"title": "Syllabus: All Courses",
	"tags": [],
	"description": "",
	"content": " Computer Science Syllabus Overview The most important information (contact information, grading scale) comes first. Anything you need that you do not see here, check the following sources:\n Class web site resources section Email me and ask: amauer-oats@cps.edu  Course-specific information  AP Computer Science Intermediate Computer Science  Contact information I read email regularly. Email amauer-oats@cps.edu. I am willing to call or text with you. Make sure your student put your phone number on the parent page of the student information form \u0026hellip; or email me.\nPhilosophy I aim to create an equitable challenge for everyone in my class. I want to provide everyone in the class meaningful work experiences at a manageable but challenging intellectual level. I may give the same credit for different actual assignments to accomplish this goal.\nThe student side of this equitable challenge is that I expect everyone to work on computer science 100% of the time in class. This applies even if someone is finished with the current assignment or has been absent for a week. I have a shelf full of books available for advanced or catch-up work.\nI expect everyone to take my suggestions for improving their work seriously. Computer science is an art as well as a science. Polish good habits, eradicate bad ones. Please admit if you cling to unproductive habits and work honestly to change them.\nGrading weights and scale    Percent Category     20 Final Exam/Project (Quarterly)   40 Tests and Quizzes (individual)   20 Projects   20 Participation    Some grade should be updated every week. Every grade category except final exam should be updated every three weeks. Edline will have all raw score information. Only scaled (\u0026ldquo;curved\u0026rdquo;) scores will be posted on the CPS Gradebook.\nWe use the standard Whitney Young grading scale (90+ A, 80+ B, 70+ C, 60+ D, below 60 F).\nClass participation will be four points per day. You must be present and engaged in the class activities for the entire class to earn all of the points.\nGrading and attendance You must be present in order to learn from the class.\n   Absences Consequence     5 Call and email parent.   10 One letter grade (-10 point) deduction to final grade.   15 Additional -5 point deduction to final percentage.   20 Additional -5 point deduction to final percentage.   25 Failure in class    Three tardies more than 5 min late count as one absence.\nAny absence with a note from a medical doctor does not count toward the total absences. (Please make sure I see a copy of the note!) All other absences count. Please discuss necessary accomodations for IEP/504 in the first two weeks of class if I am not aware of them.\nDifferentiation All assigned work is expected to be completed.\nThere is no extra credit without regular credit. The way to improve a grade is through consistent effort, seeking help when needed, and allocating enough effective work time outside of class. Please track your work in your interactive notebook so we can discuss how to make your time more effective.\nAdvanced students may be allowed to replace standard work with projects, but all exceptions will be accompanied by a written contract detailing what other work will be completed to replace the main line coursework. In at most two weeks, the project is due and will receive a grade. Students are still responsible for standard material.\nEssentials of involvement As much as we can, we let students manage their own learning. Occasionally parents should be involved more at home. Sometimes adults need to talk directly. Please contact me directly if you see (or are being told) that grades are not up to date or your student is exempt from the work for any reason and does not have written documentation.\nDaily Materials  Notebook: A thin spiral or composition notebook dedicated to computer science is required for planning, reflection, and documenting progress.\n USB Flash Drive: A small USB drive to store files. (Any size is fine. Code is small.)\n  IEP and 504 plans will be followed Any student with a 504 or IEP will receive all accomodations listed. Please make sure the teacher has received a copy of the plan at the start of the year (especially if your schedule has changed, sometimes the paperwork follows too slowly).\nState standards Computer Science Teachers Association standards applicable in this class:\n 4.2.1 Computational Thinking (CT) 4.2.2 Collaboration (CL) 4.2.3 Computing Practice and Programming (CPP) See individual unit plans for more details.  "
},
{
	"uri": "https://maueroats.github.io/teaching/resources/apcs-syllabus--2017-2018/",
	"title": "Syllabus: AP CS",
	"tags": [],
	"description": "",
	"content": " This document gives information specific to the AP Computer Science course. See the all course syllabus information as well.\nAP Review We will do approximately three weeks of AP review before the AP exam. Second semester grades will be significantly impacted by AP test preparation.\nMany people benefit from outside preparation. Start in February. As a rough guide, the Barron\u0026rsquo;s AP Computer Science A text is too easy and the Be Prepared for the AP Computer Science Exam in Java book by Litvin and Litvin is too difficult. I have not read the Princeton Review text.\nIn the last three years Whitney Young\u0026rsquo;s AP CS pass rate has been: 85%, 100%, and 93%, so you will be prepared.\nBig picture calendar for course These dates are tentative, but they should give an idea of the major deadlines in the course.\n Weeks 1\u0026ndash;5: Haskell Week 6: Begin Java and Semester Project. October 23: Quarter 2 project top-down plan due. (No code!) October 27: Quarter 1 exam. (One week before quarter ends.) January 22: Quarter 2 project due. January 26: Quarter 2 exam. (One week before quarter ends.) March 23: Quarter 3 project due for early bonus. (Day before spring break.) March 26\u0026ndash;30: Spring Break. April 6: Quarter 3 project due. April 9: Quarter 3 exam. (Week of quarter end.) This is also part of AP exam review. April 9 \u0026ndash; May 4: AP Test Review. (Four weeks minus two days.) May 7: AP testing begins. May 15 at 12pm: AP Computer Science Test  "
},
{
	"uri": "https://maueroats.github.io/teaching/resources/intermediatecs-syllabus--2017-2018/",
	"title": "Syllabus: Intermediate",
	"tags": [],
	"description": "",
	"content": " This document details the information specific to Intermediate Computer Science. See the all course syllabus information as well.\nMaterials  Notebook - a lightweight paper notebook dedicated to computer science. USB Drive of any size. Picturing Programs book electronic version - downloaded onto flash drive. DrRacket programming environment - installed at home. WeScheme - Online only replacement for DrRacket. Use if you cannot install software. You have to read special instructions to make it work.  "
},
{
	"uri": "https://maueroats.github.io/teaching/resources/grading-scale/",
	"title": "Grade Weights",
	"tags": [],
	"description": "",
	"content": " The most common question people have is how grades are computed.\nGrading weights and scale    Percent Category     20 Final Exam/Project (Quarterly)   40 Tests and Quizzes (individual)   20 Projects   20 Participation    We use the standard Whitney Young grading scale (90+ A, 80+ B, 70+ C, 60+ D, below 60 F).\nClass participation will be four points per day. You must be present and engaged in the class activities for the entire class to earn all of the points.\nExceptional circumstances Please contact your teacher if you have a very unusual circumstance (extended illness, international competition, etc.). Ordinary events causing you to miss a day or two of school are not in that category.\n"
},
{
	"uri": "https://maueroats.github.io/teaching/resources/",
	"title": "Resources",
	"tags": [],
	"description": "",
	"content": " These resources may be useful throughout the year.\n Syllabus for all classes Git program information (work in progress)  Course-specific information  AP Computer Science  Syllabus extra info  Intermediate Computer Science  Syllabus extra info WeScheme - when you cannot install software   "
},
{
	"uri": "https://maueroats.github.io/teaching/biography/",
	"title": "Biography",
	"tags": [],
	"description": "",
	"content": " Biography Dr. Mauer-Oats has been at Whitney Young for more than five years. He holds a Ph.D. in Mathematics from the University of Illinois at Urbana-Champaign.\nCourses Courses taught in 2017-2018:\n AP Computer Science Intermediate Computer Science  Courses taught in prior years at Whitney Young:\n Exploring Computer Science Precalculus Honors Algebra 2 with Trigonometry  Clubs Clubs sponsored in 2017-2018:\n Aerospace club - qualified for the TARC National Fly-off in 2017. Robotics club (FTC) - Rockwell Innovation Award in 2017. Math team (assistant coach).  "
},
{
	"uri": "https://maueroats.github.io/teaching/intermediate-cs/ch01/",
	"title": "Chapter 1",
	"tags": [],
	"description": "",
	"content": "Learn the essentials of image manipulation: rotating, flipping, and combining images. "
},
{
	"uri": "https://maueroats.github.io/teaching/",
	"title": "Mauer-Oats Classes",
	"tags": [],
	"description": "",
	"content": " AP Computer Science Recent Changes   Ch02 Reading Guide modified Sat 09-09 15:57  Ch01 Reading Guide modified Sat 09-09 15:36  Intermediate Computer Science Recent Changes    "
},
{
	"uri": "https://maueroats.github.io/teaching/resources/academic-integrity/",
	"title": "Academic Integrity",
	"tags": [],
	"description": "",
	"content": "Being honest and honorable regarding one’s academic integrity is essential in all of your classes.\nStudents are expected to adhere to the following honor code regarding all of their work in this class.\n “I have neither given nor received improper aid on this test/project.”   “Improper aid” includes, but is not limited to:\n copying another student’s work allowing another student to copy your work sharing the problems given on a test to a student who has not taken the test copying work from any online or electronic resource without citation chatting or texting with another student during a test in which computer use is allowed  On a project (not test), it is acceptable to give suggestions to a student who knows less than you do.\n The student who is giving help may read the code of the student seeking help. The student who is giving help may not type (or write) any code.  Penalties when a student is caught cheating in this class may include:\n A zero on the assessment Final grade being lowered a letter Expulsion from National Honor Society (NHS or NJHS) Denial of a future application to National Honor Society (NHS or NJHS) Negatively affecting scholarships and post-high school programs for which you have applied  "
},
{
	"uri": "https://maueroats.github.io/teaching/ap-cs/haskell/",
	"title": "Haskell",
	"tags": ["haskell"],
	"description": "",
	"content": " Haskell is a pure, lazy, statically typed language. In the first chapter you will learn what those terms mean. Later you will learn how to write programs.\nChapters  1. Intro  A high-level overview of the Haskell language and why its features are good.  2. Starting Out  Learn how to make lists and tuples. We also learn the basic list manipulation commands.  "
},
{
	"uri": "https://maueroats.github.io/teaching/ap-cs/haskell/ch01/ch01-reading-guide/",
	"title": "Ch01 Reading Guide",
	"tags": ["reading-guide", "haskell"],
	"description": "",
	"content": " Haskell introduction reading questions  Haskell is supposed to be a purely functional language. Unpack that:\n What does pure mean? What is the difference between functional and imperative? (The book is not so clear on this point. What do you think it says, in your own words?)  Haskell is lazy. What does this mean?\n Haskell is statically typed. This could be unpacked, too.\n What does typed mean? The word static in English can me \u0026ldquo;not changing\u0026rdquo;. How would you apply that meaning in this context?  When did work on Haskell begin?\n  "
},
{
	"uri": "https://maueroats.github.io/teaching/resources/ics-wescheme-note/",
	"title": "WeScheme",
	"tags": [],
	"description": "",
	"content": " Special notes for WeScheme users You can use WeScheme if you cannot install DrRacket. For example, if you have a Chromebook for your home computer. There are a few differences:\n Omit the (require picturing-programs) line. Instead of copy and pasting in a picture, you need to copy the link for the image and use bitmap/url like this: (bitmap/url \u0026quot;https://www.what-dog.net/Images/faces2/main004.jpg\u0026quot;)  "
},
{
	"uri": "https://maueroats.github.io/teaching/_header/",
	"title": "",
	"tags": [],
	"description": "",
	"content": "WY Computer Science\n"
},
{
	"uri": "https://maueroats.github.io/teaching/tags/ap-cs/",
	"title": "Ap Cs",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://maueroats.github.io/teaching/categories/ap-cs/",
	"title": "Ap Cs",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://maueroats.github.io/teaching/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://maueroats.github.io/teaching/tags/haskell/",
	"title": "Haskell",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://maueroats.github.io/teaching/tags/homework/",
	"title": "Homework",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://maueroats.github.io/teaching/tags/hw/",
	"title": "Hw",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://maueroats.github.io/teaching/categories/intermediate-cs/",
	"title": "Intermediate Cs",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://maueroats.github.io/teaching/intermediate-cs/",
	"title": "Intermediate-cs",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://maueroats.github.io/teaching/tags/reading-guide/",
	"title": "Reading Guide",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://maueroats.github.io/teaching/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]