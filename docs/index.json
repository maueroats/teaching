[
{
	"uri": "http://wy-cs.info/ap-cs/haskell/connect-four/timeline/",
	"title": "Connect Four Timeline",
	"tags": [],
	"description": "",
	"content": "   Day Date(s) Project Assignment     1 Fri, Oct 6 Project assigned. Write draw_board.   2-4 Sat-Mon, Oct 7-9 Plan, write, and test: is_legal_move.   5 Tues, Oct 10 Plan make_move in class. Write and test at home.   6 (15 min class) Share difficulties and troubleshoot.   7 Thurs, Oct 11 (early release) Plan, write, and test: is_won.   8 Fri, Oct 12 Write tests demonstrating code works.   - Mon, Oct 16 Last day to turn in project.    I expect this project to take 4-6 hours to complete over the course of a week. If you spend less than 3 hours on the project you should read the advanced notes about the minimax algorithm and (partially?) implement it.\nExpected times and other notes:\n draw_board: 1.0 hour, including class time is_legal_move: 0.5 hour is_won: 1.5-2 hours, including 0.5-1.0 hours planning time Expect to use several helper functions. See spoilers if needed. make_move: 1.0 hour, including class time. See spoilers if needed.  "
},
{
	"uri": "http://wy-cs.info/intermediate-cs/part-i/ch06/animation/",
	"title": "Intro to Animations",
	"tags": [],
	"description": "The basics of big-bang: on-tick, on-draw.",
	"content": " Intro to Animation Opener Write two functions:\n rotator: image -\u0026gt; image that turns the image 10 degrees.\n middle-placer: image -\u0026gt; image that places the given image in the center of a yellow circle of radius 200.\n  Animation Code (define starter (rectangle 50 200 \u0026#34;solid\u0026#34; \u0026#34;purple\u0026#34;)) (define delay-time 3) (big-bang starter (on-tick rotator delay-time) (on-draw middle-placer)) Animation Vocabulary  model: the part that changes\n on-tick: model -\u0026gt; model\n  Moves to next time.\n on-draw: model -\u0026gt; image  Shows the result. Draw things that do not move here.\nPaper Exercise I  A shape is shown on a yellow circle of radius 200.\n The shape grows 25% larger every tick, but the circle does not.\n   Write a tick handler.\n Write the big-bang.\n  Paper Exercise II  A shape starts in the center of a circle.\n The shape moves to the right 10 pixels every tick.\n  Write the tick handler Class work Exercises 6.4.2 and 6.4.3 (pdf page 106)\nBonus: 6.4.4\nHomework Read Section 6.3 (beginner mistakes)\nAnimation more vocab  on-key: model key -\u0026gt; model\n on-mouse: model number(x) number(y) event -\u0026gt; model\n  You found the code!\n"
},
{
	"uri": "http://wy-cs.info/intermediate-cs/part-i/ch03art/period-1/",
	"title": "Art Period 1",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://wy-cs.info/ap-cs/haskell/ch01/",
	"title": "1. Intro",
	"tags": ["haskell"],
	"description": "",
	"content": "A high-level overview of the Haskell language and why its features are good. You should read it carefully and note what items you are unfamiliar with. Writing down your questions will help you remember what parts were difficult so that we can discuss them in class.\n Haskell Chapter 1 Reading Guide "
},
{
	"uri": "http://wy-cs.info/intermediate-cs/part-i/ch06/animation2/",
	"title": "Animations Outline",
	"tags": ["design-process"],
	"description": "Step by step, how to make a basic animation.",
	"content": " All Steps  Model Draw handler Tick handler Key handler? Mouse handler?  1. Decide model  What will the computer remember in order to draw a scene?\n the moving parts\n image or number (usually)\n  Write down type of model: image, number, string.\n Make an example (used in later testing).\n  2. Draw handler  How will you draw the model on the screen?\n non-moving parts go here\n place image in appropriate spots\n  Write and test this function!\n  3. Tick handler  How will the model change from second to second?\n in comes old model out goes new model   Write function and test a single step first!\n  "
},
{
	"uri": "http://wy-cs.info/ap-cs/haskell/ch02/",
	"title": "2. Starting Out",
	"tags": ["haskell"],
	"description": "",
	"content": "Learn how to make lists and tuples. We also learn the basic list manipulation commands.  Create a list: [5..13] or [5,10..100] or [ n^2 | n\u0026lt;-[1..100], even n] Create a tuple: (5,12) Key to remember: head, tail, init, last, :, ++ Other list functions: maximum, minimum, sum, product, reverse  Resources  Reading guide Problem Set hw:a2 for chapter 2. (Also PDF.) "
},
{
	"uri": "http://wy-cs.info/intermediate-cs/part-i/ch06/examples/",
	"title": "Animation Examples",
	"tags": [],
	"description": "",
	"content": " Here is a complete example (raw Racket code available) that shows how to:\n move an image down every tick draw three copies of the image in a row make the image get larger when you hit a key make the image get smaller when you move the mouse  Big bang The big bang goes last in the Racket file, but it is first here so you can see how everything comes together.\n(big-bang original-model (on-tick move-down) (on-draw three-copies) (on-key reset) (on-mouse shrink)) Tick handler Move the image down by inserting an invisible rectangle above it.\n(define (move-down model) (above (rectangle 0 5 \u0026#34;solid\u0026#34; \u0026#34;white\u0026#34;) model)) Draw handler Draw three copies of the same thing in a row. (Use this trick for the tires of your car!)\n(define (three-copies model) (overlay/align \u0026#34;middle\u0026#34; \u0026#34;top\u0026#34; (beside model (rectangle 75 0 \u0026#34;solid\u0026#34; \u0026#34;white\u0026#34;) model (rectangle 75 0 \u0026#34;solid\u0026#34; \u0026#34;white\u0026#34;) model) (empty-scene 500 400))) Key handler Always return the original model, no matter what. This resets the animation.\n(define original-model (square 50 \u0026#34;solid\u0026#34; \u0026#34;purple\u0026#34;)) (define (reset model key) original-model) Mouse handler Shrink the model by 1% any time the mouse is moved.\n(define (shrink model x y event) (scale 0.99 model))"
},
{
	"uri": "http://wy-cs.info/ap-cs/haskell/ch03/",
	"title": "3. Types and Typeclasses",
	"tags": ["haskell"],
	"description": "Typeclasses abstract characteristics of types like String or Int.",
	"content": "Types categorize the kinds of data that appear in a program. Typeclasses provide general abilities that different types can have. For example, String is a type which means a list of characters. Show is a typeclass. Every type implementing Show will have a \u0026ldquo;show\u0026rdquo; method that converts it to a string (the method does not need to have the same name as the typeclass).\n Chapter 3 Reading Guide   Chapter 3 Problem Set   Chapter 3 Quiz  "
},
{
	"uri": "http://wy-cs.info/ap-cs/karel/book/",
	"title": "Book",
	"tags": [],
	"description": "Links to the repository and documentation for the Karel the Robot unit.",
	"content": "The book is Karel J Robot: \u0026ldquo;A Gentle Introduction to the Art of Object-Oriented Programming in Java\u0026rdquo;, by Joseph Bergin, Mark Stehlik, Jim Roberts, and Rich Pattis. We have the January 2008 printing, but all versions are very similar. Happily, the book is available for under $10 used if you want one or want to donate one.\n"
},
{
	"uri": "http://wy-cs.info/intermediate-cs/part-i/ch06/portfolio/",
	"title": "Animation Portfolio",
	"tags": [],
	"description": "",
	"content": " Purple square that moves up when you hit any key.\n Throwing star that spins (and maybe moves across the screen) as time passes.\n Sunset with a horizon.\n Car with two wheels that spin when you move the mouse.\n  "
},
{
	"uri": "http://wy-cs.info/ap-cs/haskell/ch04/",
	"title": "4. Syntax in Functions",
	"tags": ["haskell"],
	"description": "",
	"content": "Patterns, guards, where, let, and case. Sections  Chapter 4 Reading Guide Questions to help you understand Chapter 4.\n  Chapter 4 Problem Set Exercises to improve your Haskell programming.\n  Chapter 4 Summary patterns, guards, where, let, case\n  Chapter 4 Quiz \n  Chapter 4 Discussion Slideshow of Discussion problems for Chapter 4. Similar but not identical to reading guide questions.\n "
},
{
	"uri": "http://wy-cs.info/ftc/registration/",
	"title": "Registration",
	"tags": [],
	"description": "",
	"content": "You must be officially registered to attend any official FIRST Event. We are First Tech Challenge (FTC) team number 3216.\n Online registration guide - This is a walkthrough of the registration process. Follow it! Online registration instructions. Pretty dense reading. Printable form. If all else fails, print this form and turn it in.  "
},
{
	"uri": "http://wy-cs.info/intermediate-cs/part-i/ch06/project/",
	"title": "Animation Project",
	"tags": [],
	"description": "",
	"content": " Deadline: Finish before Monday, October 23. Turn in Tuesday, October 24.\nProduce: One sequence of big-bang animations per group. (Groups of at most two.)\nGoal: Animation projects should demonstrate the use of draw, tick, mouse, and key handlers.\nTime: Spend approximately two hours on this project.\nMaking an animation is a way to study for Monday\u0026rsquo;s animation test. Think of your work as a way to study and become more familiar with animations.\nSuggestion We don\u0026rsquo;t have the technical skills to make animations that work exactly like you imagine. A compromise is to break your idea into several \u0026ldquo;scenes\u0026rdquo;, put each scene into a big-bang, and then manually close the window each time to advance to the next big-bang.\nIdeas  House of Mirrors Illusions Jump Scare (one big-bang ends and another starts)  Requirements  Every type of handler is used Design process visible for at least one big-bang. Please save all large images separately and load using bitmap (see note).  Details You should consider these inspirations:\n Drawing: placing a moving object behind another object.\n Motion: rotate, move by adding (above), move by subtracting (crop)\n Placing more than one moving image on a screen.\n place-image overlay/align    Important Note Save all big images separately. Put the \u0026ldquo;bigImage.png\u0026rdquo; file in the same folder you have saved your Racket program. Load the picture like this:\n(define background (bitmap \u0026#34;bigImage.png\u0026#34;)) Use the same method to keep transparency in images that you have found online.\n"
},
{
	"uri": "http://wy-cs.info/ap-cs/karel/essentials/",
	"title": "Essentials",
	"tags": [],
	"description": "Links to the repository and documentation for the Karel the Robot unit.",
	"content": " Getting started  GitHub Classroom\nhttps://classroom.github.com/a/bOX4Z5jT You should end up with a new repository which has all of the Karel starter files and also lets you save your files.\nNote the link in the green box!\n Git clone\nIn this step you download your new repository to the computer you are working on. Start \u0026ldquo;Git Bash\u0026rdquo; or type the following in \u0026ldquo;Terminal\u0026rdquo; on your computer.\ngit clone paste-link-to-your-repository-here One time settings\nIn this step you run my one-time setup code that links you to the original repository. You need to actually be inside the directory/folder that you just cloned for this command to work.\ncd karel-* ./one-time This command currently:\n Sets the editor to \u0026ldquo;nano\u0026rdquo;, a reasonable beginner\u0026rsquo;s editor. Adds a remote repository containing the AP CS \u0026ldquo;master\u0026rdquo; code so you can get updates.  Alternative:\ncd karel-* git remote add upstream https://github.com/2017-2018-wy-ap-cs/apcs-karel.git git config core.editor nano  Saving your work I have a save-it script that makes it easy for you to save and push your changes in one step:\ncd karel-* ./save-it \u0026#39;Optional message\u0026#39; You can use the save-it script or type the following commands:\ngit add -A git commit -a -m \u0026#39;Save\u0026#39; git push -u origin master The meaning of these commands is:\n git add  -A: I intend to save every new file.  git commit: Save every change to a special place on the current computer.  -a: Save all files that are known (changed, deleted, or new and already added). -m \u0026lsquo;Save\u0026rsquo;: The required message for the save is just the word \u0026ldquo;Save\u0026rdquo;. Pros are more descriptive.  git push: Send the changes to GitHub so they are stored online and I can get them from other computers.  DrJava Getting DrJava On the lab computers, DrJava is on the Desktop in the Computer Science folder. Unfortunately it is not in the windows menu at this time.\nAt home you will need to download DrJava.\n Mac OS X: read the instructions carefully; do not download the disk image (\u0026ldquo;.dmg\u0026rdquo;) file. Windows 10: install Oracle Java 8 JDK and DrJava should work fine. You may need to uninstall other versions of Java.  Running DrJava Open karelBasic.drjava.\nIn the Projects menu, there is an option to open a project. This is not the same as ther other \u0026ldquo;Open\u0026rdquo; options you see! Use that instead of the more obvious \u0026ldquo;open a file\u0026rdquo; command so that you don\u0026rsquo;t have to re-teach DrJava about the Karel the Robot files.\nDocumentation  Karel the Robot documentation online.\n JUnit documentation online.\n Hamcrest matcher libary documentation online.\n  "
},
{
	"uri": "http://wy-cs.info/ap-cs/haskell/connect-four/ui/",
	"title": "Connect Four UI",
	"tags": [],
	"description": "",
	"content": " The user interface code for Connect Four is a little clunky. (Repl.it shared code.) You may use the linked code. You do not have to learn this part of writing Haskell programs (yet).\nCode Outline main: just make board and call event loop\nevent loop:\n draw board is it won?  print the win message  not won?  get a move recursive call to event loop with updated board, next player   Code All of the user interface code is linked separately (open in WordPad if necessary).\nThe setup of the code, which you should change to match your own functions is below. You need: drawBoard, is_won, is_move_legal, and make_move.\ntype Board = [[Int]] drawBoard :: Board -\u0026gt; String drawBoard board = show $ simplify board is_won :: Board -\u0026gt; Bool is_won board = False is_move_legal :: Board -\u0026gt; Int -\u0026gt; Bool is_move_legal board col = (col == 0) make_move :: Board -\u0026gt; Int -\u0026gt; Int -\u0026gt; Board make_move board col player = [[player]] -- Just for the demo: force the board to be 1x1. simplify board = [[board!!0!!0]] The essentials of the code are an event loop function, which draws the board, checks to see if it is won, gets the next move, and then calls a sepeate function to handle the move.\nevent_loop :: Board -\u0026gt; Int -\u0026gt; IO() event_loop board player = do putStrLn $ drawBoard board if is_won board then do win_message board player return () else do col \u0026lt;- get_move player handle_move board player col The handle move function recursively calls the event loop with an improved board and sets the next player. If the attempted move is illegal, then the recursive call to event loop does not update the board or player, so the same player moves again.\nhandle_move :: Board -\u0026gt; Int -\u0026gt; Int -\u0026gt; IO () handle_move board player col | col == -99 = goodbye | is_move_legal board col = event_loop new_board (next_ player) | otherwise = complain_and_restart where complain_and_restart = do putStrLn \u0026#34;ERROR: That is not a legal move.\u0026#34; event_loop board player new_board = make_move board col player goodbye = do putStrLn \u0026#34;You quit\u0026#34; Example run *Main\u0026gt; main (Enter -99 to quit.) Player 1 moves. Column [0-7]? 5 X (Enter -99 to quit.) Player 2 moves. Column [0-7]? 2 O X (Enter -99 to quit.) Player 1 moves. Column [0-7]? 5 X O X (Enter -99 to quit.) Player 2 moves. Column [0-7]? 3 X OO X (Enter -99 to quit.) Player 1 moves. Column [0-7]? 5 X X OO X (Enter -99 to quit.) Player 2 moves. Column [0-7]? 4 X X OOOX (Enter -99 to quit.) Player 1 moves. Column [0-7]? 5 X X X OOOX The game is over Player 1 won!"
},
{
	"uri": "http://wy-cs.info/intermediate-cs/part-i/ch03art/period-5/",
	"title": "Art Period 5",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://wy-cs.info/ap-cs/haskell/ch05/",
	"title": "5. Recursion",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://wy-cs.info/intermediate-cs/part-i/ch03art/period-7/",
	"title": "Art Period 7",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://wy-cs.info/intermediate-cs/sem2review/10-jackpot/",
	"title": "P1. Jackpot",
	"tags": [],
	"description": "",
	"content": "Give each world an id number (1, 2, 3, \u0026hellip;). The worlds are all lined up according to their id number. Every world has some money. When a \u0026ldquo;jackpot\u0026rdquo; happens, the money from one world is distributed to its neighbors (each gets half).\nWrite down your model, message, and reaction to the message in detail before programming.\n"
},
{
	"uri": "http://wy-cs.info/intermediate-cs/p25/reversi/",
	"title": "Reversi",
	"tags": [],
	"description": "The game of Reversi.",
	"content": " The game of Reversi is played with black and white pieces on an 8x8 board.\nRead the official rules; this is just a summary:\n A play must flip at least one piece to the player\u0026rsquo;s color. (See the rules for when pieces flip.) Pieces are never removed from the board. The winner has the most pieces on the board when no more moves are possible.  Notes on design Making a two-player, one-screen game is most of the effort. Making two players on two screens is a short addition to that.\nBoard Coordinates What you read will suggest labeling columns with letters a-h and rows with numbers 1-8. I recommend using typical computer coordinates 0-7 for each, and representing a location on the board by a posn.\nPlayer Naming You could identify your players by colors (dark or light) or numbers (0 or 1). The draw handler is easier if your players are \u0026ldquo;black\u0026rdquo; and \u0026ldquo;white\u0026rdquo;, but other functions may be more annoying. I suggest 0 and 1.\nModel There are two possibilities, both have advantages and drawbacks. My guidance will focus on the first method.\n Keep the color (light/dark) and position inside a piece structure, and then the whole state of the board is represented by a list of pieces.\n(define-struct piece (player posn)) (define-struct game (turn piece-list)) Keep a separate list of light and dark piece positions.\n(define-struct game (turn light-list dark-list)) ; light-list: (listof posn?) ; dark-list: (listof posn?)  Useful functions It is a lot simpler to build something complex like Reversi by building helper functions first.\n opponent: player -\u0026gt; player. Return the opponent. flip: piece -\u0026gt; piece. Return a new piece with the same position but the opposite player. draw-one-piece: piece image(bg) -\u0026gt; image. Draw one piece on a given background image. draw-all-pieces: listof-piece image(bg) -\u0026gt; image. Draw a whole list of pieces on a background image. has-piece?: listof-piece posn -\u0026gt; boolean. Returns true if there is a piece at the given posn in the list. get-piece: listof-piece posn -\u0026gt; piece. Get the piece at the given position out of the list. You should return false if the piece is not in the list.  Warmup Exercises  take-flippable: listof-number(data) number(player) -\u0026gt; listof-number: Get a list of the numbers from the start of data that do not match player (i.e., opponent\u0026rsquo;s pieces) and the first occurrence of player if there is one.\n(take-sequence (list 1 1 2 1) 1) =\u0026gt; (list 1 1 2) (take-sequence (list 1 1 2 1) 2) =\u0026gt; (list 1) (take-sequence (list 1 1 1) 2) =\u0026gt; (list 1 1 1) Why is this useful? When we play, we need to flip at least one piece. Pieces that are flipped must be sandwiched between two pieces of the same color. The pieces that do not match the player will be flipped. We need the first matching piece in order make sure the sequence does not stop at the edge of the board (like the third example above).\n  Wrong stuff below = fixme Flipping pieces The trickiest part is making the pieces flip over. This is important to get right because a move is not even legal if it does not flip any pieces. I suggest checking in each direction from a given position to see if there are any pieces that will flip.\n will-flip-dir?: listof-piece posn(start) posn(direction) player -\u0026gt; boolean. Will placing a piece for player at start cause any pieces in the given direction to flip?\nAssume we have already constucted a variable pieces with dark as X and light as O, representing the board below:\n#| 0123 0 -OOX 1 XXOO 2 X-OX 3 ---- |# (will-flip-dir? pieces (make-posn 0 0) (make-posn 1 0) \u0026#39;X\u0026#39;) =\u0026gt; true (will-flip-dir? pieces (make-posn 0 0) (make-posn 0 1) \u0026#39;X\u0026#39;) =\u0026gt; false (will-flip-dir? pieces (make-posn 1 2) (make-posn 0 -1) \u0026#39;X\u0026#39;) =\u0026gt; false (will-flip-dir? pieces (make-posn 1 2) (make-posn 0 -1) \u0026#39;O\u0026#39;) =\u0026gt; true (will-flip-dir? pieces (make-posn 1 2) (make-posn 1 -1) \u0026#39;X\u0026#39;) =\u0026gt; true (will-flip-dir? pieces (make-posn 1 2) (make-posn 1 0) \u0026#39;X\u0026#39;) =\u0026gt; true (will-flip-dir? pieces (make-posn 3 3) (make-posn -1 -1) \u0026#39;X\u0026#39;) =\u0026gt; true (will-flip-dir? pieces (make-posn 2 3) (make-posn 0 -1) \u0026#39;X\u0026#39;) =\u0026gt; false A careful consideration of all of the possibilities on a small board is a good idea. Obviously you need lots of checks!\n will-flip-any-dir?: listof-piece posn(start) color(player) -\u0026gt; boolean. Will placing the player color piece at start cause any pieces in any direction? This should be straightforwad to write once you have will-flip-dir?.\n flip-pieces: listof-piece posn(start) posn(direction) player -\u0026gt; listof-piece. Flip the pieces from start going in the given direction.\n flip-all-pieces: listof-piece posn(start) -\u0026gt; listof-piece. Make all of the flips caused by placing a piece at the given position.\n  "
},
{
	"uri": "http://wy-cs.info/intermediate-cs/universe/u-overview/",
	"title": "Universe Overview",
	"tags": [],
	"description": "Overview of the Universe.",
	"content": " Universe gives a way to have multiple big-bangs communicate.\nEach big-bang is individually called a \u0026ldquo;world\u0026rdquo;. They are also called \u0026ldquo;clients\u0026rdquo;. There is one \u0026ldquo;universe\u0026rdquo; running, which is the \u0026ldquo;server\u0026rdquo;. The universe server coordinates all of the communication between the big-bang clients.\nThere are some new technical additions to big-bang, and some recommendations for the design process.\nTechnical Information  (make-package model message): Returned from a handler to update the model and send a message. Any handler (for example: key,mouse,tick) can return a package, which updates your own model and sends a message to the server. New handler: on-receive.\nreceive-h: model message -\u0026gt; model Update your model based on a message you receive from the server.\n  Reading the Racket Documentation:\n model is called WorldState HandlerResult means either a model or a package.  Design Process  Decide your big-bang model first. Use the usual process (draw scenes, write the model that goes with those scenes).\n Decide your universe model next. This means you need to decide what messages will be sent between worlds (big-bangs).\n  Miscellaneous  The on-receive handler can return a package if needed.  Code Generic server\n"
},
{
	"uri": "http://wy-cs.info/ap-cs/jm/ch15/file-intro/",
	"title": "15. File Intro",
	"tags": [],
	"description": "API for File, Scanner, PrintWriter.",
	"content": " Sample code: class github.\nYou should be familiar with the basic methods listed in the JavaMethods Chapter 15 PowerPoint.\nFile The official File documentation has all of the details. This is a brief summary of methods you are likely to use.\n new File(\u0026quot;filename\u0026quot;). I recommend you only files in the same directory as your Java program, until you become very comfortable with Files. String getName() long lastModified(): Return modification time, in unusual units. boolean isDirectory() File[] listFiles()  Scanner Consult the Chapter 15 PowerPoint for common functions or the official documentation for full information.\n   Inquire (all return boolean) Get Notes     hasNextLine() String nextLine() Rest of the line, starting at the current location.   hasNext() String next() One token (group of letters and numbers) until next whitespace.   hasNextInt() int nextInt() One integer.   hasNextDouble() double nextDouble() One decimal.    Miscellaneous:\n NoSuchElementException is returned when a Scanner is asked for something that it cannot provide - for example, nextInt() when the next item is not an integer.  PrintWriter  PrintWriter out = PrintWriter (file): Construct based on a File object. out.println(): Print, like usual. out.close(): Write all of the data to the disk.  Common Problems and Advice  Read error messages closely.\n Know what the error is. For example, this is a FileNotFound error caused by trying to read myfolder with Scanner, like a file.\njava.io.FileNotFoundException: myfolder (Is a directory) at java.io.FileInputStream.open0(Native Method) at java.io.FileInputStream.open(FileInputStream.java:195) at java.io.FileInputStream.\u0026lt;init\u0026gt;(FileInputStream.java:138) at java.util.Scanner.\u0026lt;init\u0026gt;(Scanner.java:611) from a File? Know what File causes it.\n from a Scanner? Know exactly what input causes the problem. Print lots! For example, this error comes from trying to get the next() item when there is nothing more available.\njava.util.NoSuchElementException at java.util.Scanner.throwFor(Scanner.java:862) at java.util.Scanner.next(Scanner.java:1371)  Make sure you only call listFiles on a File that is a directory.\n Reading a directory like a file will give you a FileNotFound or permissions error.\n Listing the files in a file that is not a directory will return null but not give an error. This is dangerous because you cannot loop through the returned array (since nothing is created).\n You can get very unusual error messages if you start recursively examining a folder that contains your system files. Make folders especially for testing.\n  "
},
{
	"uri": "http://wy-cs.info/intermediate-cs/battleship/model/",
	"title": "Battleship Model",
	"tags": [],
	"description": "Play battleship on paper to develop the model.",
	"content": " The process for developing a model is always the same:\n Background knowledge: understand the rules and decide what you want your game to look like when you play it. We will play Battleship on paper. Draw at least three scenes from different stages of the game. In this case, you will want more \u0026ndash; include a win screen, a lose screen, and three others. List the information necessary to draw the scenes. Write down the model you will use.  Step 1: Battleship on paper  Make two 8x8 grids, one for your ships and one for your attacks on the opponent.\n Number the rows and columns like a computer screen, beginning with (0,0) in the upper left.\n Place your ships. Each ship can go either horizontally or vertically. The number and size of ships varies in different versions of the game. Today we will use this list:\n Aircraft carrier (5 squares) Battleship (4 squares) Cruiser (3 squares) Destroyer (Two, each 2 squares) Submarine (1 square)  Play at least ten rounds with a partner. Keep going until at least one ship is sunk.\n  Step 2: Develop the model For developing the model we will think about only two ships. Later you can add the rest.\n Draw five different situations, including a win and lose end game. List information you need to draw those situations. Discuss what information must be remembered (the \u0026ldquo;independent variables\u0026rdquo;) and what can be computed (the \u0026ldquo;dependent variables\u0026rdquo;). Write the model that corresponds to each one of your scenes. Save this paper! Check in your work and don\u0026rsquo;t lose it.  Step 3: Check your model  How do you represent one ship? How do you represent one shot fired?  Interesting variations You can explore these ideas later in your game.\n Some games allow you to shoot multiple times in one turn: one shot for each un-sunk ship you have.  "
},
{
	"uri": "http://wy-cs.info/ap-cs/jm/q3review/classes-more-1/",
	"title": "Q3. Classes More 1",
	"tags": [],
	"description": "Writing classes, some review problems.",
	"content": " We have NoisyDog and SportsFan classes to practice working with abstract classes and implementing interfaces.\nNoisyDog Write the abstract class Noisy and the subclass NoisyDog.\npublic abstract class Noisy { // add any variables you need public Noisy (int n); // print the designated noise one time public abstract void noise(); // print the designated noise N times public void makeNoise(); } public class NoisyDog extends Noisy { // \u0026#34;bark\u0026#34; three times by default public NoisyDog(); // prints the bark string 3 times public NoisyDog(String bark); // Also need to implement this public void noise(); } SportsFan public interface SportsFan { String cheer(); String boo(); }  Make a BoorFan class that implements the SportsFan interface. A BoorFan does not cheer, so just return the empty string for that method. A BoorFan returns \u0026quot;You stink!\u0026quot; when booing.\n Make a GetRowdy class that cheers twice, separated by spaces, when asked to cheer. It boos three times.\npublic class GetRowdy implements SportsFan { public GetRowdy (SportsFan p) { // write this } // other methods required } A DolphinFan says \u0026quot;flip\u0026quot; to cheer and \u0026quot;glub\u0026quot; to boo. Make the DolphinFan class.\n The following code has some OK parts and some errors. Which lines are errors? If a line is not an error, explain what happens when you call the cheer() method of that object.\npublic void demo() { SportsFan s = new SportsFan(); // 1 SportsFan t = new BoorFan(); // 2 BoorFan b = new SportsFan(); // 3 GetRowdy r = new GetRowdy(); // 4 GetRowdy rr = new GetRowdy(t); // 5 GetRowdy d = new GetRowdy(new DolphinFan()); // 6 /* Call cheer() on all of them. What do they do? */ }  "
},
{
	"uri": "http://wy-cs.info/intermediate-cs/part-i/",
	"title": "Part I: Ch 1-19",
	"tags": [],
	"description": "Part I of How to Design Programs. The fundamentals of primitive types and everything you can build with them. Images. Numbers. Animations. Conditionals.",
	"content": "  1. Introduction \n  3. More Interesting Pictures \n  3. Art with Racket Student art-inspired programming projects.\n  4. Writing Functions \n  6. Animations I Big-bang for animations. Essential information and walkthroughs.\n  7. Numbers \n  8. Number Animations \n  9. Strings \n  11. Planning \n  13. Booleans \n  15. Conditionals Making choices in Racket using \u0026#39;cond\u0026#39;.\n  "
},
{
	"uri": "http://wy-cs.info/ap-cs/jm/interlude-feb/ap-programming-practice-1/",
	"title": "Programming Practice 1",
	"tags": [],
	"description": "",
	"content": "2018-02-26:\n Keep Swimming Pipe Pals\n We learned how to look up the Javadoc pages for the Character class to find the isUpperCase and isLowerCase methods.   2018-02-28:\n Blurry Memory\n We wrote code to read in the data and discussed a strategy to finish.   "
},
{
	"uri": "http://wy-cs.info/intermediate-cs/ch22b/list-intro/",
	"title": "22. List Intro",
	"tags": [],
	"description": "An introduction to lists in Racket.",
	"content": " We started learning about lists. (Chapter 22-23 in Picturing Programs.) Picturing Programs can be kind of long-winded in these chapters.\nAlternative sources.\nThings to know:\n Empty lists: empty-list or (list ) or '() empty? : list -\u0026gt; boolean (list \u0026ldquo;a\u0026rdquo; \u0026ldquo;b\u0026rdquo; \u0026ldquo;c\u0026rdquo;) first: list of Things -\u0026gt; Thing rest: list -\u0026gt; list Advanced: list* to add to the front of a list Contract example: (-\u0026gt; (listof number?) number?)  List processing always begins with a choice (conditional) to see if the list is empty or not. The else clause almost always contains (\u0026hellip;. (first the-list) \u0026hellip; (rest the-list)\u0026hellip;) combined in some way.\nDesign process Simplified design process:\n Write down lists of length 0, 1, and 2, and their results Write a program to get the correct answer with a list of length 0 Modify your program to get the correct answer with a list of length 1 (and still have length 0 correct) Modify that program to keep the correct answers and get the length 2 list to give the right answer. This is the step that will usually involve (rest the-list).  Skeleton The skeleton is very important for list-processing problems. It usually has a form like this:\n(define (do-something the-list) (cond [(empty? the-list) ...] [else (... (first the-list) ... (do-something (rest the-list)))])) Write down a skeleton like that when you are working through a list.\n"
},
{
	"uri": "http://wy-cs.info/ap-cs/news/procom4/",
	"title": "ProCom 4",
	"tags": [],
	"description": "",
	"content": "ProCom 4.0 will be March 3, 2018 at the University of Chicago Lab School.\nLast year\u0026rsquo;s contest is posted to HackerRank for practice.\nTeams of 4! Let me know if you are interested (as soon as possible).\n"
},
{
	"uri": "http://wy-cs.info/intermediate-cs/contracts/contract-intro/",
	"title": "Contract Intro",
	"tags": [],
	"description": "An introduction to using contracts.",
	"content": " Contracts are the signatures of functions that we have been using. The vocabulary word changes to make it sound more legal. Contracts are actually enforced by Racket.\nDefining a contract If you want to make sure a function takes in a number and puts out a number, you can include a contract when you define it. Here is a simple complete example of a function to add five to a number.\n(require picturing-programs) (require racket/contract) ; add-five: number -\u0026gt; number (define/contract (add-five n) (-\u0026gt; number? number?) (+ 5 n)) (add-five \u0026#34;whoops\u0026#34;) Demo files: no contract, simple contract.\nTypes in a contract You can use any of the familiar type-testing functions that end in a question mark. Here is an incomplete list:\n number? string? image? any/c: The /c stands for contract. Why any by itself is not correct is beyond what we will study.  Multiple arguments You can write contracts for functions with more than one argument. The last argument of -\u0026gt; is the type of the output. Usually we put the inputs on one line and the outputs on another.\n; add-num-length: number string -\u0026gt; number ; add the number and the length of the string (define/contract (add-num-length n s) (-\u0026gt; number? string? number?) (+ n (string-length s))) (add-num-length 10 \u0026#34;whoops\u0026#34;) ; OK =\u0026gt; 16 (add-num-length \u0026#34;whoops\u0026#34; 10) ; ERROR signalled here"
},
{
	"uri": "http://wy-cs.info/ap-cs/jm/ch14/comparable/",
	"title": "14. Comparable",
	"tags": [],
	"description": "",
	"content": " Comparable means that two items in a class can be compared (less than, equal to, greater than). It is similar to the Ord typeclass in Haskell.\nComparable is an interface. You implement it. It is a template, so you put the class you are able to compare to in angle brackets afterwards. I expect this to be the same class as the one that is implementing the Comparable interface.\npublic class Whatever implements Comparable\u0026lt;Thing\u0026gt; { public int compareTo (Thing other) { // ... } } The compareTo function gives an integer that indicates whether this is greater than other.\n negative means this \u0026lt; other. This could be read \u0026ldquo;this comes before other\u0026rdquo;. zero means this = other positive means this \u0026gt; other     a b a.compareTo(b) meaning inquality     10 20 -10 a is before b \u0026lt;   30 17 13 a is after b \u0026gt;   20 20 0 a is the same as b =   \u0026ldquo;can\u0026rdquo; \u0026ldquo;ask\u0026rdquo; 2 a is after b \u0026gt;   \u0026ldquo;dang\u0026rdquo; \u0026ldquo;ghost\u0026rdquo; -3 a is before b \u0026lt;   \u0026ldquo;bo\u0026rdquo; \u0026ldquo;boat\u0026rdquo; -1 a is before b \u0026lt;   \u0026ldquo;same\u0026rdquo; \u0026ldquo;same\u0026rdquo; 0 a is the same as b =    The Comparable interface does not require any particular number be returned from the compareTo function. Any positive result indicates that the left (this) argument is greater than the right (other) argument.\n Exercises  The Drow class holds a String, but when you compare two Drow instances you get the opposite answer from comparing two strings. Example:\nDrow a = new Drow(\u0026#34;cat\u0026#34;); Drow b = new Drow(\u0026#34;dog\u0026#34;); int cmp = a.compareTo(b); // cmp is positive, but would be negative for Strings Write the Drow class, including any instance variables, constructor, and compareTo method.\n EBO. The class EBO is like Integer except all evens appear before any odd number in the ordering created by compareTo.\nExamples:\n   a b a.compareTo(b) a interpretation b     2 4 -2 is before   9 3 6 is after   2 9 -7 is before   2 -3 -1 (any neg) is before   3 8 +1 (any pos) is after   5 10 +1 (any pos) is after    The constructor is of the form new EBO(7).\n The class Pt contains an (x,y) coordinate pair. The ordering of Pt is given by first comparing the x\u0026rsquo;s and then, if they are equal, comparing the y\u0026rsquo;s.\nExamples:\n   a b a.compareTo(b) a interpretation b     (20,50) (20,80) -30 is before   (10,5) (10,2) 3 is after   (10,30) (31,19) -21 is before    Write a class header, instance variables, constructor, and compareTo method.\n  "
},
{
	"uri": "http://wy-cs.info/ap-cs/jm/ch13/aardvark/",
	"title": "13. Avoid Aardvark",
	"tags": [],
	"description": "",
	"content": " Google Presentation with all of the ArrayList in-class problems\n ArrayList 5, page 12 java public static void avoidAardvarks (ArrayList\u0026lt;String\u0026gt; data)   Testing  Include the boilerplate.\nimport org.junit.*; import org.junit.runner.*; import static org.junit.Assert.*; See code at the end of the presentation (linked above) if you prefer not to just \u0026ldquo;add\u0026rdquo; to results.\n Recall: @Before and @Test must appear before functions, not statements.\n Testing ArrayList is simplest if you use the toArray() method and assertArrayEquals.\n  @Test public void simple_1() { String[] correct = { \u0026#34;yes\u0026#34; }; ArrayList\u0026lt;String\u0026gt; data = new ArrayList\u0026lt;\u0026gt;(); data.add(\u0026#34;not\u0026#34;); data.add(\u0026#34;yet\u0026#34;); avoidAardvarks(data); assertArrayEquals(correct, data.toArray()); }"
},
{
	"uri": "http://wy-cs.info/intermediate-cs/ch21b/pv-intro/",
	"title": "21. PV Intro",
	"tags": [],
	"description": "Slides with introduction to position-velocity struct exercises.",
	"content": " Pick a model  A ball moves around the screen. It keeps going in the direction it starts. What could the model be?  Define the model Keep the names short; we will type them a lot.\nDefine the model Keep the names short; we will type them a lot.\n(define-struct pv (pos vel))\nExample needed Create a pv structure called ex1.\n Position (100,50) Velocity (-5,8)  Sketch (make-pv (make-posn 50 200) (make-posn 10 -30)) update-pos  Write update-pos: pv -\u0026gt; pv. Use velocity to change position, one time step.  scale-velocity  scale-velocity: pv(orig) num(scale) -\u0026gt; pv Multiply both x and y components of velocity of orig by scale.  turn-180 What would this mean? Sketch first.\nBouncing off walls 1 Should you bounce off of a wall?\nSketch three true and three false.\nshould-bounce-r? : pv num(xwall) -\u0026gt; boolean The wall on the right is at x=xwall.\nBouncing off walls 2 should-bounce-r? : pv num(xwall) -\u0026gt; boolean The wall on the right is at x=xwall.\nNow actually write the function.\nBouncing off walls 3 bounce-r-velocity: pv -\u0026gt; posn(new-velocity) Given that you bounced, what should your new velocity be?\nDraw a sketch!\n"
},
{
	"uri": "http://wy-cs.info/intermediate-cs/sem1final/1-final-exam/",
	"title": "1. Final Exam",
	"tags": [],
	"description": "Period 1 final exam.",
	"content": " PDF version.\nThis is the final exam for Intermediate Computer Science, Semester I, 2017-2018. Except as noted below, you may not use materials previously written by you or anyone else.\nThere are two sections: written (1\u0026frasl;3) and programming (2\u0026frasl;3). Before you use a computer, you must turn in your answers to the written questions.\nWrite all of your solutions on a separate sheet of paper.\nWritten Questions (30 points: do only 3)\nIn the written portion, you may not consult any sources. Suggested time: 30 minutes.\n (10 pts) What is one signifiant benefit of writing the signature of a function? Include a realistic example that supports the benefit you have chosen.\n (10 pts) Shelly is working with a mouse-handler:\n; Purpose: return a posn of last mouse position (define (mouse-h m e x y) (make-posn x y))  Critique Shelly\u0026rsquo;s choice of a signature:\nmouse-h: model string number number -\u0026gt; model Revise to make a complete, correct mouse-h signature and function.\n  (10 pts) Usually a function signature includes number or string. Sometimes it is appropriate to use any as part of a signature.\n Give an example of a function whose signature should include any.\n Explain why the any parameter is useful in this case.\n  (10 pts) Analyze the function below.\n Write one sentence explaining what roll-dice does. The code below cannot be used as-is in a dice game simulation. Rewrite the code so you have a function that is testable and also a function that can be used in a dice game big-bang.\n(define dice1 (random 10)) (define dice2 (random 10)) ; purpose: sum two random ten sided dice rolls ; each die can roll 1 through 10 (define (roll-dice n) (+ (dice1) (dice2)))   Programming Questions (60 points: do both)\nIn the programming portion, you may use the book Picturing Programs, the Racket Help Desk, your posn-util.rkt file, and the class blog.\nYour work will be evaluated on the basis of correctness and how well it demonstrates your understanding of the design process.\nSuggested time: 60 minutes.\n Pseudo-Roman. The Roman numerals representing the number 203 are CCIII, and the number 21 is XXI. In this question you are asked to write a converter pseudo-roman that takes in a positive integer between 1 and 999 and produce a string with one \u0026ldquo;C\u0026rdquo; for each hundred in the number, then one \u0026ldquo;X\u0026rdquo; for each 10 remaining after the hundreds are removed, and one \u0026ldquo;I\u0026rdquo; for each one remaining once the tens are removed.\nNote: Actual Roman numerals are more complicated than this. You may read the Wikipedia entry, but watch the time \u0026mdash; don\u0026rsquo;t get side-tracked!\nDesign and test the pseudo-roman function.\n Touch-it. A yellow circle of radius 100 is on the screen in a fixed location.\n You control a smaller blue circle with the mouse. (The blue circle is where the mouse points.) In every second that the blue circle is touching the yellow circle (at all), the player gets a point. Draw the big circle in a different shade of yellow when the player is going to get a point.   Extra Credit In the place of program #2 above, you may write the radiation circle game.\n You move a small blue dot with your mouse. A red dot at a random location starts at radius 50 and shrinks its radius by 10 every second. When the red dot radius reaches zero, it picks a new random location and starts over Every second that the blue dot touches the red dot (overlapping at all), you get a point. Show the score in one corner of the screen.  "
},
{
	"uri": "http://wy-cs.info/intermediate-cs/sem1final/5-final-exam/",
	"title": "5. Final Exam",
	"tags": [],
	"description": "Period 5 final exam.",
	"content": " This is the final exam for Intermediate Computer Science, Semester I, 2017-2018. Except as noted below, you may not use materials previously written by you or anyone else.\nThere are two sections: written (1\u0026frasl;3) and programming (2\u0026frasl;3). Before you use a computer, you must turn in your answers to the written questions.\nWrite all of your solutions on a separate sheet of paper.\nWritten Questions (40 points: do four)\nIn the written portion, you may not consult any sources. Suggested time: 40 minutes.\n (10 pts) Meg is writing a program. She is part way done, and now wants to finish the design and test it.\n(define (f x y z) (* x y))  Write a signature. Write one good test for this function. Why might a function have a useless parameter like that?  (10 pts) The model is a color. A mouse handler changes the amount of green in the model whenever the x coordinate is greater than the y coordinate. In that case, the new amount of green is the difference in the mouse coordinates (x-y). Find the problems in the mouse handler below and fix them.\n; mouse-h: model x y -\u0026gt; number (define (mouse-h model x y) (cond [(\u0026gt; x y) (- x y)] [else (make-color (color-red model) (color-green model) (color-blue model))])) (10 pts) Write a key handler that adds ten points to the model, leaving the rest alone.\n;STRUCT moo: center = posn, points = number, clr = color (define-struct moo (center points clr))  Signature One test. Function.  (10 pts) Comment in particular detail about how the draw handler below will function when playing a kind of \u0026ldquo;click the dot\u0026rdquo; game. (What will you see? What will happen when you play the game?)\n; purpose: place dot at a random position (define (draw-h model) (place-image DOT (random 100) (+ 50 (random 200)) BACKGROUND)) (10 pts) You are writing a game called Mondrian. The person playing places randomly colored squares on the screen.\n As the mouse moves, the new colored square \u0026ldquo;floats\u0026rdquo; above the image so far. They want to see every square placed since they start playing.   Pick an appropriate structure to represent the model. Explain how the model allows you to write the draw-handler described above. Explain how the model allows you to write the mouse-handler described above.   Programming Questions (50 points: do both)\nIn the programming portion, you may use the book Picturing Programs, the Racket Help Desk, your posn-util.rkt file, and the class blog.\nYour work will be evaluated on the basis of correctness and how well it demonstrates your understanding of the design process.\nSuggested time: 50 minutes.\n Random overlay. (20 points) Design and test a random-overlay function that takes in two images and then randomly places the first image on top of the second image. The placement will be done with overlay/align, choosing \u0026ldquo;left\u0026rdquo; \u0026ldquo;middle\u0026rdquo; \u0026ldquo;right \u0026ldquo;top\u0026rdquo; and \u0026ldquo;bottom\u0026rdquo; as appropriate. Make the middle location 50% likely to occur (both vertically and horizontally), and the other choices equally likely.\n Signature Purpose Check-expects covering all possibilities.   Color match. (30 points) Show a colored rectangle and the numbers from an RGB code.\n Clicks reveals a green circle if they match, red circle if they do not match. Space bar (only) and gets a new randomly colored rectangle. This game would be impossible, but you need to \u0026ldquo;rig the game\u0026rdquo; so there about a 25% chance that they will match. It should be possible for every color and color code to appear.   "
},
{
	"uri": "http://wy-cs.info/ap-cs/jm/testing/testing-intro/",
	"title": "Unit Testing Level I",
	"tags": [],
	"description": "An introduction to using the JUnit test system.",
	"content": " Start testing little pieces of your code so it is not so hard for you to figure out what goes wrong. In Racket, we used the check-expect system. In Java there is a similar system called JUnit. This page explains how to use the old JUnit 4 system that is built into DrJava.\nBasic Testing (Include the boilerplate code from the next section!)\n @Test assertEquals(correct, actual) assertEquals(correct, actual, close_enough): Like check-within, this is for comparing floating point values (double). Test succeeds if |correct - actual| \u0026lt; close_enough. assertArrayEquals(correct, actual): Compare arrays.  Example:\n@Test public void test_math() { assertEquals(5, 2+3); assertEquals(.66, 2.0/3, 0.01); } Example for arrays (Chapter 12):\n@Test public void test_always_ok() { int[] correct = {1,2,3}; int[] actual = {1,2,3}; assertArrayEquals(correct, actual); } Example for ArrayList (Chapter 13):\n@Test public void test_arraylist() { ArrayList\u0026lt;Integer\u0026gt; n = new ArrayList\u0026lt;\u0026gt;(); n.add(5); n.add(25); n.add(100); List\u0026lt;Integer\u0026gt; correct = Arrays.asList(5,25,100); assertEquals(correct, n); }  Testing Boilerplate At the start of your code, include the following boilerplate:\nimport org.junit.*; import org.junit.runner.*; import static org.junit.Assert.*; DrJava  \u0026ldquo;Compile\u0026rdquo; \u0026ldquo;Test Project\u0026rdquo;  Green tests pass, red tests fail. A list of all errors follows the summarizing colored results.\nRepl.it  You should be using \u0026ldquo;Project Mode\u0026rdquo; and have multiple files open with names like \u0026ldquo;HospitalTest.java\u0026rdquo;. Capital letters matter, so match the name of the class.\n There is no \u0026ldquo;Test Project\u0026rdquo; button on Repl.it, but you can arrange for the main method to run your tests by using the code fragment below. (See the working main method.)\norg.junit.runner.JUnitCore.main(\u0026#34;Test_Class_Name_MUST_CHANGE\u0026#34;); Output should look like ..E.E...E.E.E.E....E, where the . indicates the test has begun running and the E indicates that it ended in an error. Notice there is no separate indication for a test passing.\n  "
},
{
	"uri": "http://wy-cs.info/intermediate-cs/sem1review/sem-review-1/",
	"title": "I.1 Semester I Review 1",
	"tags": [],
	"description": "Random shape. Drift to a new position. Reduce the amount of green.",
	"content": " Random shape. Write a function that returns a square, circle, or triangle. All should be equally likely.\nrandom-shape: ignore -\u0026gt; image Drift. A smiley face starts at some position on the screen. It randomly drifts 5 pixels in some direction (up, down, left, or right) every 0.2 seconds. Write the function that gives its new position.\ndrift-to-new: posn(old) -\u0026gt; posn(new) Reduce green. Write a function less-green that reduces the amount of green in a color by 25%.\nless-green: color -\u0026gt; color  "
},
{
	"uri": "http://wy-cs.info/ap-cs/jm/ch10/10-overview/",
	"title": "10. Overview",
	"tags": [],
	"description": "",
	"content": "  Strings are immutable. \u0026ldquo;Changing\u0026rdquo; functions like s.toUpperCase() actually return a copy; they do not affect the original.\n Understand the box and arrow diagrams on page 269.\n String methods (summarized on page 271, Figure 10-3):\n s.length() s.charAt(idx): but note the answer is a char not a String. s.substring(start) s.substring(start,end) s.equals(otherString) s.compareTo() s.indexOf(\u0026quot;wanted\u0026quot;)  Useful in real life: trim, replace, toLowerCase.\n  10.5: Formatting Lots of detail on how to get a number to appear exactly the way you want it. Read if you are advanced.\nTutorial on printf, Tutorial on formatting numbers.\n10.6: Numbers to Strings This section includes basic parsing as well as how to handle \u0026ldquo;exceptions\u0026rdquo; that may occur.\n double x = Double.parseDouble(\u0026quot;3.14159\u0026quot;) int a = Integer.parseInt(\u0026quot;121\u0026quot;)  "
},
{
	"uri": "http://wy-cs.info/intermediate-cs/ch20/posn-util/",
	"title": "20. Posn Util",
	"tags": [],
	"description": "Utility functions for posns. Accessing functions defined in other files.",
	"content": " The functions in 20.5 are all useful later. When you do them, you should save them in a file called posn-util.rkt. (Please use that name.)\nYou may download my posn utilities file if you write your functions on paper instead of typing them.\n The following functions should be in posn-util.rkt:\n posn=? add-posns sub-posns scale-posn: number posn -\u0026gt; posn distance: posn posn -\u0026gt; number place-image/posn: image posn image(background) -\u0026gt; image. Purpose: Place one image at a given set of coordinates on a given background.\n Anything else you want to have available for re-use.\n  Require and provide Require loads functions from another file. Provide makes functions available for other files to load.\nProvide The provide command makes functions available for other files to use. One way to use it is to list all of the functions you want to allow other files to use:\n(provide add-posn sub-posn scale-posn distance) Sometimes you just want to make every function in the file available. There is a shortcut to do that:\n(provide (all-defined-out)) Require In order to use the functions in another file, you need to require that file. You already know (require picturing-programs) but when we use require we need to give the whole filename.\n(require \u0026#34;posn-util.rkt\u0026#34;) You need to save your work in the same folder as your \u0026ldquo;posn-util.rkt\u0026rdquo; file, since Racket only looks in the current folder for other files.\n "
},
{
	"uri": "http://wy-cs.info/intermediate-cs/part-i/ch15/15-slides/",
	"title": "15. Slides",
	"tags": [],
	"description": "Day 1 Exercises",
	"content": " Mystery Function (define (scrunch x) (cond [(\u0026lt; x 10) 0] [else (/ x 2)])) Give 3 examples what it does.\nScrunch Sum  Scrunch three numbers Add the result  (scrunch-three 5 12 40) =\u0026gt; 26 Word Points  Each word gets 2 points per letter. Every word earns at least 7 points. Find the total points earned by four words.  (sum-points \u0026#34;saw\u0026#34; \u0026#34;it\u0026#34; \u0026#34;workhorse\u0026#34; \u0026#34;betadyne\u0026#34;) =\u0026gt; 48 Early Wake-Up Count the number of people who wake up before cutoff-time.\n(early-wake-up cutoff-time person-1-time person-2-time person-3-time)"
},
{
	"uri": "http://wy-cs.info/intermediate-cs/spaceinv/si-plan/",
	"title": "SI Plan",
	"tags": [],
	"description": "Planning for the space invaders game.",
	"content": "  Game State There are many quantities in the game that can change. Label them on your diagram. For example, in my diagram I used direction to be +1 for moving right and -1 when the enemy is moving left.\nIf you later discover that you want more information, add it to your diagram.\nConstants Make variables to represent the quantities that are not going to change, but could. You may find a use for these, or add your own:\n WIDTH HEIGHT ENEMY-WIDTH ENEMY-HEIGHT TURRET-WIDTH TURRET-HEIGHT BULLET-HEIGHT  Functions You will need to decide what information each function takes in.\n enemy-turn-right-edge? enemy-turn-left-edge? bullet-hit-enemy? enemy-hit-turret? bullet-on-screen? game-over?  Examples are required Write examples with actual coordinate numbers before you write the functions!\nOne in-class example was:\nWIDTH = 300 ENEMY-WIDTH = 50 x = 270 dir = +1 (check-expect (enemy-right-edge? x dir) true)"
},
{
	"uri": "http://wy-cs.info/ap-cs/jm/ch01/",
	"title": "1. CS Basics",
	"tags": [],
	"description": "",
	"content": " Read Chapter 1, including the Chapter 1 online component.\n (2017-11-28) Tuesday: Questions 1-6 at the end of Chapter 1. Wednesday: Binary numbers, hexadecimal, and representing data. Thursday: Wrap up, review. Friday: Quiz on Chapter 1.   "
},
{
	"uri": "http://wy-cs.info/intermediate-cs/pro/pro-string/",
	"title": "Strings for Experts",
	"tags": [],
	"description": "Strings: randomizing and creating by formula.",
	"content": " This page contains information about advanced topics that I have been asked.\nRandomizing Letters of a String The implode and explode functions change strings to and from lists of single letters. To randomize a list, import racket/list and then use the shuffle function. If you are actually looking at lists, you should change to Beginning Student with List Abbreviations.\n(require picturing-programs) (require racket/list) (define (mix letters) (implode (shuffle (explode letters)))) (mix \u0026#34;alphabet soup\u0026#34;) Advanced String Making  There is an optional second argument to number-\u0026gt;string that is the base to work in. (check-expect (number-\u0026gt;string 31 2) \u0026quot;11111\u0026quot;)\n Single characters are different from single letter words. Racket uses #\\a to denote the character \u0026ldquo;a\u0026rdquo; and \u0026quot;a\u0026quot; to denote the word containing a single letter a. Usually you do not work with characters, but\u0026hellip;\n The make-string command takes in a number and a character to repeat (meaning #\\a not \u0026quot;a\u0026quot;). Example: (check-expect (make-string 7 #\\a) \u0026quot;aaaaaaa\u0026quot;).\n The replicate command repeats a string a certain number of times. Example: (check-expect (replicate 2 \u0026quot;moo\u0026quot;) \u0026quot;moomoo\u0026quot;).\n  "
},
{
	"uri": "http://wy-cs.info/ftc/meet-1/",
	"title": "FTC Meet 1",
	"tags": [],
	"description": "",
	"content": " FIRST 5125 Hawks on the Horizon, FTC 7030 Robominds, FTC 7007 Mission Impossible, FTC 13956 Why Don\u0026rsquo;t We Build and Horizon Science Academy McKinley Park are excited to be hosting your team for a Chicago League Meet, this Saturday, November 11.\nEvent Details Location:\nHorizon Science Academy McKinley Park 2245 W. Pershing Rd Chicago, IL 60605 Parking is available behind the school, on Pershing Rd, and across the school at McKinley Park. Refer to the red stars on the attached map.\nTeams Attending If you are not supposed to be on this list please notify me ASAP:\n116 Crazy Eights 3216 Robophins 7007 Mission Impossible 7030 RoboMinds 7286 Wired Women 8728 Bionic Wolves 10109 De La Salle Meteors 10182 DRW Cheetahs 10253 Bobcats Robotics 10510 I\u0026#39;m BOT Man 11207 Iron Panthers 11647 Gnomebots 12083 DLS Meteorites 13699 RoboGrizzlies 13956 Why Dont We Build Schedule This schedule is approximate. It is vital for us to stay on time. Please ensure that your team comes prepared (see below).\n1:00 pm Doors Open 1:00 pm - 1:30pm Check-in 1:30 pm - 3:00 pm Inspections 3:00 pm - 3:15 pm Drivers meeting 3:30 pm - 7:00 pm Matches 7:00 pm - 7:15 pm Clean-Up \u0026amp; Departure Prior to the Event  Team Roster OR Paper Consent/Release Form: FIRST would prefer teams create a team roster through Youth Registration. Alternatively, teams can bring release forms signed by parents. Please see this link for more info - http://www.firstinspires.org/resource-library/youth-team-member-consent-and-release-form Late Arrival or Not attending: Please let me know by calling or texting me, Sravan Suryadevara, at [omitted]. If we do not hear from you by 2:45 pm we will have to continue the event without your team. Robot Self Inspection: In order to enable inspection run smoothly we HIGHLY encourage you to fill out the self inspection checklist which is attached. This will really benefit all teams as it will mean the event will run smoother Entrance/Parking: See attached map regarding entering the building and where to park. Red stars are lots where you can park. Blue stars are team entrances. When you enter please follow signs with the FTC logo. Please be sure to pack an extension cord and power strip! We have enough outlets but not enough extension cords for all 15 teams.  Food and Lunch Concessions in the form of light snacks will be available. Besides concessions there are several fast-food restaurants in the area, including pizza places such as Humberto\u0026rsquo;s Pizzeria, Naples Pizza. A little farther away, there\u0026rsquo;s Little Caesar\u0026rsquo;s and Domino\u0026rsquo;s.\nIf your team is planning on buying lunch or dinner and you would like more options please let me know.\nOther helpful links Game Materials\nhttp://www.firstinspires.org/node/4271\nTeam Management Resources\nhttp://www.firstinspires.org/node/5226\nTeam Information Management System\nhttps://my.firstinspires.org/Dashboard/\nPreparing for Competition\nhttp://www.firstinspires.org/node/5261\n"
},
{
	"uri": "http://wy-cs.info/intermediate-cs/part-i/ch08/number-1/",
	"title": "Number Models 1",
	"tags": [],
	"description": "Three animations to practice identifying number models.",
	"content": " Identify the model A white rectangle background that slowly fades to blue.\nIdentify the model A shape of your choice moves across the screen, rotating as it moves.\nAnimate A shape of your choice moves across the screen, rotating as it moves.\n Model Get on computer and do it  Create the animation A star moves diagonally across the screen from (0,0) to (200,100) on a big 200x200 background.\nChallenge A red star follows the equation of the ellipse (x/100)^2 + (y/50)^2 = 1.\n"
},
{
	"uri": "http://wy-cs.info/ap-cs/git/getting-started/",
	"title": "Git-ting Started",
	"tags": ["git"],
	"description": "",
	"content": " Downloads for Home  Git package for all operating systems. Tortoise Git for Windows only.  Tutorials  A command line intro to git in 15 minutes.\n Git for Beginners.\n Beautiful and simple Git Guide.\n  Local instructions  Make an account on GitHub. Use your CPS email.\n Apply for an education account.\n Join our class in the GitHub Classroom. (Tell the teacher your username and get added manually.)\n  "
},
{
	"uri": "http://wy-cs.info/ap-cs/karel/ch1+2/",
	"title": "Karel 1 and 2",
	"tags": [],
	"description": "Reading and homework for the first two chapters of the Karel book.",
	"content": " 2017-10-16 Monday: Homework - read Chapters 1 and 2 (pages 1-20).\n 2017-10-17 Tuesday: Follow GitHub Classroom procedures in the Essentials Learn enough git to save to the cloud. Homework: spend 20 minutes learning a little more about git.\n 2017-10-18 Wednesday: Do exercises 2.7 and 2.11, incuding making the worlds. Please use the names below for the classes you make:\n Ex 2.7: GroceryPickup Ex 2.11: BeeperHandoff   "
},
{
	"uri": "http://wy-cs.info/ap-cs/haskell/connect-four/spoilers/",
	"title": "Connect Four Spoilers",
	"tags": [],
	"description": "",
	"content": " Two problems with connect four: changing an entry in a matrix ([[Int]]) and seeing if there is a win.\nChanging entries in the board The biggest problem with the representation of the board as [[Int]] is that it is really hard to change the entries. If you use [((Int,Int),Player)] then it\u0026rsquo;s lots easier to make moves.\nOutline of plan:\n (changeCol: [Int] -\u0026gt; Int -\u0026gt; Int -\u0026gt; [Int]) Change value at index col in a single row to newVal; every other value in the list just output unchanged.\nchangeCol [10,11,12] 2 99 == [10,11,99] We have basically written this function as a Coding Bat problem.\n (changeRowCol: [[Int]] -\u0026gt; Int -\u0026gt; Int -\u0026gt; Int -\u0026gt; [[Int]]) Run changeCol only on the index row entry, everything else stays the same.\nchangeRowCol [[1,2,3,4],[5,6,7,8]] 1 3 99 == [[1,2,3,4],[5,6,7,99]]  There is actually spoiler code and fancy spoiler code that uses Chapter 6.\nDetecting a win Please email me questions. I know this is tricky. My own breakdown was:\n Generate a list containing four ordered pairs in a row. Input: (x,y) coordinates of the first entry, and (dx,dy) to be added to (x,y) to get the other three pairs needed.\n Given a board and one list of four ordered pairs, return True if all of the ordered pairs are legal coordinates for that board.\n Given a board, return a list of all possible lists of four ordered pairs in straight lines. For example, if the board is just the flat 5x1 board [[0,0,0,0,0]], then this function should give a list of the two possible 4-in-a-rows: [[(0,0),(1,0),(2,0),(3,0)], [(1,0),(2,0),(3,0),(4,0)]].\n Given a board and a single ordered pair, get the corresponding value from the board.\n Given a board and four ordered pairs, return True if all of the corrsponding values are the same.\n Do the preceding to a whole list of 4 pairs of coordinates.\n Given a board, return True if it is won.\n There are a few more steps but you are almost there!\n  "
},
{
	"uri": "http://wy-cs.info/intermediate-cs/part-i/ch03/color/",
	"title": "Color Commands",
	"tags": [],
	"description": "",
	"content": " name-\u0026gt;color changes a string name to a color, like this:  \u0026gt; (name-\u0026gt;color \u0026quot;lavender\u0026quot;) (make-color 230 230 250)   If you give it a color already, the computer complains:\n\u0026gt; (name-\u0026gt;color (make-color 230 230 250)) name-\u0026gt;color: Expected a string or symbol, but received (make-color 230 230 250 255)   colorize changes a name to a color, but does not complain if it gets something that is already a color. That makes it better than name-\u0026gt;color.  \u0026gt; (colorize \u0026quot;lavender\u0026quot;) (make-color 230 230 250)   If you give it a color already, the computer complains:\n\u0026gt; (colorize (make-color 230 230 250)) (make-color 230 230 250))"
},
{
	"uri": "http://wy-cs.info/ap-cs/haskell/ch04/ch04-reading-guide/",
	"title": "Chapter 4 Reading Guide",
	"tags": ["haskell", "reading-guide"],
	"description": "Questions to help you understand Chapter 4.",
	"content": " Sections 4.1\u0026ndash;4.3  A pattern starts out with \u0026ldquo;dog\u0026rdquo;,\u0026ldquo;cat\u0026rdquo;, \u0026ldquo;cat dog\u0026rdquo;, \u0026ldquo;cat dog cat\u0026rdquo;, \u0026ldquo;cat dog cat cat dog\u0026rdquo;, and so on - each new string is created by appending the previous two with a space in between them. Write a function that takes in the number of the word in the sequence and returns the word, starting with 1 is \u0026ldquo;dog\u0026rdquo;.\n Write the function scalar_mult :: (Num a) =\u0026gt; a -\u0026gt; (a,a) -\u0026gt; (a,a) that multiplies each number in a coordinate pair by the same number, so scalar_mult 5 (1,3) == (5,15).\n Write a signature and function body for pair_prod that takes in a list of ordered pairs of numbers and returns a list of the products of the pairs, so pair_prod [(3,5), (10,0), (7,3)]===[15,0,21].\n What pattern do you use to recursively process the first item in a list and the rest of the list?\n What Haskell function is used to indicate that the user is asking the program to do something impossible?\n Are parentheses necessary when writing a function using the pattern from the previous question? Explain why or why not.\n A function two_of takes in a list of showable numbers and puts out a String that says \u0026ldquo;__ is item 2 of __\u0026ldquo;. For example two_of [10,25,50] == \u0026quot;25 is item 2 of [10,25,50]\u0026quot;. Write the signature and function definition fortwo_of`.\n Write the type signature and function definition for double_double which takes in any list and produces the same kind of list. The double_double function makes a list where the first term of the input appears twice, follwed by the whole input twice, so\ndouble_double [5,10,15] == [5,5,5,10,15,5,10,15] Write a function that takes in a number and returns \u0026ldquo;small\u0026rdquo; if the number is below 10, \u0026ldquo;medium\u0026rdquo; if the number is between 10 and 20 (inclusive), and \u0026ldquo;large\u0026rdquo; if the number is larger than 20. Do not use the if...then...else construct.\n Define the function burgers_of using an infix definition so that\n3 `burgers_of` \u0026#34;beef\u0026#34; == \u0026#34;Three hamburgers\u0026#34; 5 `burgers_of` \u0026#34;soy\u0026#34; == \u0026#34;Five tofu burgers\u0026#34; any other set of inputs gives \u0026#34;No thanks, not hungry\u0026#34; Repeating yourself.\n What code segment do you see repeated in the version of the bmi function that includes the bmi calculating code? What experience does the author compare writing to writing this code? What does the book suggest that you should do instead of this coding style?   Sections 4.4\u0026ndash;4.5  Visibility. What is the difference between where you can see terms from let bindings and where bindings?\n The book says let bindings are expressions. What does this mean? Even if you don\u0026rsquo;t know, at least give one consequence of that fact.\n List five different ways to use let bindings:\n You want to define two different variables in one let binding. Give two ways you can separate those definitions.\n Are patterns in function definitions and the \u0026ldquo;case\u0026rdquo; statement interchangeable? Give one way they are and one way they are not.\n  "
},
{
	"uri": "http://wy-cs.info/intermediate-cs/part-i/ch01/",
	"title": "1. Introduction",
	"tags": [],
	"description": "",
	"content": "Learn the essentials of image manipulation: rotating, flipping, and combining images.  Chapter 01 Review  "
},
{
	"uri": "http://wy-cs.info/ap-cs/haskell/ch02/ch02-reading-guide/",
	"title": "Ch02 Reading Guide",
	"tags": ["haskell", "reading-guide"],
	"description": "",
	"content": " Haskell Starting Out Questions A. Sections 2.1\u0026ndash;2.3  There is an annoyance with negative numbers that is mentioned.\n What is the correct way to write five times negative three in Haskell? What is a wrong way to do the same thing?  Logical operations are basic building blocks of programs. How do you write:\n and or not equals not equals  Haskell follows mostly the normal order of operations from mathematics. However, in math functions must be written f(x) with parentheses, whereas in Haskell functions can be written f x without parentheses. This means we need to fit functions into the order of operations.\n Where does function calling fit in the order of operations? Give an example of a problem that this could create. (That is, the program does not do what a math student would expect it to do.)  Write the function hypSquare a b that computes the square of the length of the hypotenuse of a right triangle with legs a and b.\n The apostrophe character (') is usually used for one of two purposes. List both:\n Purpose 1: Purpose 2:  Are you allowed to use the apostrophe in function or variable names?\n In Racket you used (cons x listy) to make a list with x before an existing list. How do you do that in Haskell?\n In Racket you used (concatenate firstStr secondStr) to put two strings together. How do you do that in Haskell?\n Slightly longer exercise:\n Make a list learn containing the words \u0026ldquo;this\u0026rdquo; \u0026ldquo;is\u0026rdquo; \u0026ldquo;all\u0026rdquo; \u0026ldquo;good\u0026rdquo;. Make a new list called learnMore containing \u0026ldquo;Hopefully\u0026rdquo; \u0026ldquo;this\u0026rdquo; \u0026ldquo;is\u0026rdquo; \u0026ldquo;all\u0026rdquo; \u0026ldquo;good\u0026rdquo; What is learnMore !! 4.  Complete the table of equivalents\n     Racket Haskell language equivalent functions     first \u0026hellip;   rest \u0026hellip;   length \u0026hellip;   empty? \u0026hellip;     What are the signatures and purposes of these functions?\n init last take drop  How can you ask the computer if the list called xs contains the number 5?\n There are several more functions that are used less often, but still make it into the basic starting out chapter. Write quick summaries as necessary.\n reverse maximum minimum sum product   B. Sections 2.4\u0026ndash;2.6  Create a list of integers from 1 to 1000 (inclusive).\n Create a list of letters from 'm' to 'a' in that order.\n New functions: write signature and purpose for each.\n cycle repeat replicate  Write a function that removes all of the vowels from a word.\n What is the main difference between a tuple and a list?\n New functions: write signature and purpose for each.\n fst snd zip  Write a function that takes in a list of words and puts out a list of ordered pairs (word, length of word).\n Write a function that takes in a list of words and puts out a list with the second word doubled in its own list, the third word tripled in its own list, etc.\n  For example, the function call\namplify [\u0026#34;hill\u0026#34;,\u0026#34;rock\u0026#34;,\u0026#34;star\u0026#34;,\u0026#34;four\u0026#34;] should produce\n[[\u0026#34;hill\u0026#34;],[\u0026#34;rock\u0026#34;,\u0026#34;rock\u0026#34;],[\u0026#34;star\u0026#34;,\u0026#34;star\u0026#34;,\u0026#34;star\u0026#34;], [\u0026#34;four\u0026#34;,\u0026#34;four\u0026#34;,\u0026#34;four\u0026#34;,\u0026#34;four\u0026#34;]]"
},
{
	"uri": "http://wy-cs.info/ap-cs/",
	"title": "AP CS",
	"tags": [],
	"description": "",
	"content": "AP Computer Science studies:\n Haskell - an introduction to pure functional programming Karel the Robot - an introduction to object oriented programming Java - the language required for the AP test  Resources The course syllabus, grading weights, and other basic information can be found in the resources section of the site. "
},
{
	"uri": "http://wy-cs.info/ap-cs/haskell/",
	"title": "Haskell",
	"tags": ["haskell"],
	"description": "",
	"content": " Haskell is a pure, lazy, statically typed language. In the first chapter you will learn what those terms mean. Later you will learn how to write programs.\nChapters  1. Intro A high-level overview of the Haskell language and why its features are good.   2. Starting Out Learn how to make lists and tuples. We also learn the basic list manipulation commands.   3. Types and Typeclasses Typeclasses abstract characteristics of types like String or Int.\n  4. Syntax in Functions Patterns, guards, where, let, and case.   5. Recursion \n  6. Higher Order Functions \n  USACO Practice Challenging problems for people who want to stretch their understanding.\n  Haskell Daily Notes Notes for each day.\n  Connect Four Connect Four project description, including function signatures.\n  Typeclass Notes Typeclasses you may encounter in everyday programming.\n  Repl.it \n  Source Code Files (ghci) \n  "
},
{
	"uri": "http://wy-cs.info/ap-cs/haskell-calendar/",
	"title": "Haskell Calendar",
	"tags": ["haskell", "calendar"],
	"description": "",
	"content": "Daily calendar for Haskell unit.\n "
},
{
	"uri": "http://wy-cs.info/ap-cs/haskell/ch02/cw-a2/",
	"title": "Haskell CW 2",
	"tags": ["haskell", "ap-cs"],
	"description": "Project Euler problems.",
	"content": "Class work for 2.1\u0026ndash;2.3  Sum Square Difference The sum of the squares of the first ten natural numbers is,\n1^2 + 2^2 + ... + 10^2 = 385 The square of the sum of the first ten natural numbers is,\n(1 + 2 + ... + 10)^2 = 55^2 = 3025 Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 − 385 = 2640.\nFind the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.\n  \n Multiples of 3 and 5 If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23. Find the sum of all the multiples of 3 or 5 below 1000.\n Smallest Multiple 2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder. What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?\n "
},
{
	"uri": "http://wy-cs.info/intermediate-cs/sem2review/20-attendance/",
	"title": "P2. Attendance",
	"tags": [],
	"description": "",
	"content": "World 1 is the teacher counting students in a class. Other worlds are students. The teacher yells \u0026ldquo;attendance\u0026rdquo; and then each student responds \u0026ldquo;present\u0026rdquo;.\nWrite down your model, message(s), and the reaction to receiving each message in detail before programming.\n"
},
{
	"uri": "http://wy-cs.info/intermediate-cs/p25/agario/",
	"title": "Agar.io",
	"tags": [],
	"description": "A clone of the agar.io web game.",
	"content": " Do not play the agar.io game more than necessary to learn the rules. We don\u0026rsquo;t plan to make a full clone of the game, just allow an unlimited number of individual circles to move about the screen.\nWarning: your clone will lag more than the original web site. Don\u0026rsquo;t expect lightning fast responses.\nExpectations:\n Draw any number of players on the screen. The player that you control moves toward your mouse position.  Model  A single player has: unique identity (id), color, position, and radius. One big-bang is a player that is being controlled and a list of other players.  Message The mouse-handler will send a message indicating how the player being controlled has moved.\nReceiving the message When a big-bang receives a message, it will:\n update the current player being controlled, if the message comes from the same world; or go through the list of players and replace the player with the newly received player info  Helper functions  replace-player: player(new) listof-player(players) -\u0026gt; listof-player. Replace the player with the same identity as new by the actual player new. All other players in the list are returned unchanged.  Extras (not required)  Cell movement speed decreases as the cell gets larger Eating small cells happens and increases your radius (or \u0026ldquo;mass\u0026rdquo;) Splitting!?  "
},
{
	"uri": "http://wy-cs.info/intermediate-cs/universe/u-mini-proj/",
	"title": "Universe Mini Projects",
	"tags": [],
	"description": "Short projects to get used to the Universe code.",
	"content": "These short projects (1-2 days) will help you get used to writing code using the Universe.\n Color: set everyone\u0026rsquo;s color to yours. Count: add your own number to the total, display your number in a small box and the total big on the screen.\n  Color Strip. Modify the color program from above so that the model is a list of colors and hitting a key adds your color to the start of the list. Draw either the whole list of colors or the first 10.\n   "
},
{
	"uri": "http://wy-cs.info/ap-cs/java-calendar/",
	"title": "Java Review Calendar",
	"tags": ["calendar"],
	"description": "",
	"content": "Daily calendar for the Java review, beginning in mid-April.\n "
},
{
	"uri": "http://wy-cs.info/ap-cs/jm/ch15/file-assign/",
	"title": "15. File Assignments",
	"tags": [],
	"description": "Short problems using File.",
	"content": "  Count the number of lines in a file. Count the number of words in a file. Count the number of characters in a file. Find the sum of all of the integers in a file. Print out the file with line numbers in front of each line. Where\u0026rsquo;s Waldo? Create a file called \u0026ldquo;waldo.txt\u0026rdquo; that consists of 10000 lines of text. Each line should have 10 random integers from 0 to 9999. Except that there is a 0.1% chance that a given line will instead have all of the same integer. Find Waldo Read a file called \u0026ldquo;waldo.txt\u0026rdquo; and print out every integer that occurs 10 times on a line, just like you would make in the previous problem. Implement the \u0026ldquo;tree\u0026rdquo; command.\n. └── Risk ├── build.bat ├── build.sh ├── changelog.txt ├── compress.rkt ├── contributors.txt ├── notes.txt ├── PlannedAdditions.txt ├── README.md └── src ├── dice-functs.rkt ├── ellipse.rkt ├── fonts │ └── Roboto-Light.ttf ├── graph.rkt ├── hit-box-determiner.rkt ├── imgs │ ├── 6ca.jpg │ ├── board.png │ ├── cardico.png │ ├── close.png etc you get the idea  More Practice Additional exercises\n"
},
{
	"uri": "http://wy-cs.info/intermediate-cs/battleship/examples/",
	"title": "Battleship Examples",
	"tags": [],
	"description": "An example of how to use the model you defined.",
	"content": "In order for all of us to be working with a similar model, this page uses the definitions below for ship and game.\n(define-struct ship (name posns)) (define-struct game (ships shots)) How do we represent one ship, a \u0026ldquo;Destroyer\u0026rdquo; that is three squares long?\n(define ex-ship (make-ship \u0026#34;Destroyer\u0026#34; (list (make-posn 5 1) (make-posn 5 2) (make-posn 5 3)))) How can we represent a game in which two shots have been fired?\n(define ex-shots (list (make-posn 5 0) (make-posn 5 1))) (define ex-game (make-game (list ex-ship) shots))"
},
{
	"uri": "http://wy-cs.info/intermediate-cs/ch22b/list-exercises-1/",
	"title": "22b. List Exercises 1",
	"tags": [],
	"description": "Introductory exercises with lists.",
	"content": " Monday 2018-04-02: We completed the lists worksheet.  Lists Worksheet I\n Tuesday 2018-04-03: 4.4b, 4.6, 4.6 enhancement - from the slides below.  List Exercises - Google Slides.\n Wednesday 2018-04-04: 6.1 and 6.2 from the slides. (star-triangle)  "
},
{
	"uri": "http://wy-cs.info/ap-cs/jm/interlude-feb/ap-programming-practice-2/",
	"title": "Programming Practice 2",
	"tags": [],
	"description": "",
	"content": " Direct links below do not work. Use this link for ProCom 3 contest.\n 2018-03-05:\n Magical Square 1  2018-03-06:\n Dory\u0026rsquo;s Microbes  2018-03-07:\n Catch up.  2018-03-08:\n Happy Trails  ProCom 4 2018-03-09:\n Rebuilding the Rebellion, Part 2.  "
},
{
	"uri": "http://wy-cs.info/ap-cs/news/codejam/",
	"title": "CodeJam 2018",
	"tags": [],
	"description": "Online programming contest for everyone.",
	"content": "Google CodeJam is an accessible programming contest run online. Register now!\n April 6-8: Qualification round. April 13: Sub-round A. 8-10:30pm (best time) April 29: Sub-round B. 11am-1:30pm (second choice - need sign out)  "
},
{
	"uri": "http://wy-cs.info/intermediate-cs/contracts/contract-structs/",
	"title": "Contract for Structs",
	"tags": [],
	"description": "",
	"content": "When you are working with a structure, the best way to make sure it does not get \u0026ldquo;broken\u0026rdquo; is to write a function to check that each part of the struct has the correct type.\nHere is an example of a game struct that has fields for: player-1 posn, player-2 posn, player 1 score, and player 2 score. We write a function to use in our handlers that\n(define-struct game (p1pos p2pos p1score p2score)) (define (good-game? g) (and (game? g) (posn? (game-p1pos g)) (posn? (game-p2pos g)) (number? (game-p1score g)) (number? (game-p2score g)))) When the model is a game, how would you write the contract for the mouse-handler?\n"
},
{
	"uri": "http://wy-cs.info/intermediate-cs/pv-proj/pv-drawh/",
	"title": "Draw Handler Helpers",
	"tags": [],
	"description": "Use multiple helper functions to create a draw handler that draws multiple moving objects.",
	"content": "Combining draw handlers works just like combining tick handlers.\nThe best signature for a draw handler helper is:\ndraw-handler-helper: model image(background) -\u0026gt; image This helper draws its result on top of a background that it is given. Giving the answer from one draw handler helper to another lets you combine the images.\n(define (real-draw-handler model) (draw-handler-helper-1 model (draw-handler-helper-2 model UNMOVING-BACKGROUND)))"
},
{
	"uri": "http://wy-cs.info/ap-cs/jm/ch14/binary-search/",
	"title": "14. Binary Search",
	"tags": [],
	"description": "Binary search to find an item or an insertion point.",
	"content": " Binary search: the traditional function returning an index where the wanted item is found, or -1 if the item is not found.\npublic static int binarySearch(ArrayList\u0026lt;String\u0026gt; data, String wanted); Binary insert: this function finds the index (idx) at which a new item fits in the ordering, so that data.add(idx, newItem) results in data still being sorted.\npublic static int binaryInsert(ArrayList\u0026lt;String\u0026gt; data, String newItem);  "
},
{
	"uri": "http://wy-cs.info/ap-cs/git/everyday/",
	"title": "Everyday Git",
	"tags": ["git"],
	"description": "",
	"content": " Everyday Commands All of these need to be run in the karel-* directory:\n ./save-it ./update: git pull from the upstream repository. git pull  Merge Conflicts Sometimes you will modify a file at home without having saved (pushed) your changes at school. This causes a dreaded \u0026ldquo;merge conflict\u0026rdquo; when you update.\nSimple Merging If you are lucky, you are at school and you know that you just want to use the code from home (the \u0026ldquo;incoming code\u0026rdquo; from the pull). In that case, you should do:\ngit checkout --theirs karelBasic.drjava Of course, replace karelBasic.drjava with the names of the files with the merge conflicts. The converse, keeping the \u0026ldquo;local\u0026rdquo; changes, not the incoming ones, is the --ours flag.\ngit checkout --ours ImportantFile.java Advanced Merging When the problem is more difficult, edit the file with NotePad++ and you should see the \u0026ldquo;ours\u0026rdquo; and \u0026ldquo;theirs\u0026rdquo; sections marked off by a bunch of \u0026lt; = and \u0026gt; signs. Pick the code you want to keep and delete the rest.\n@@ -2,7 +2,11 @@ import java.io.*; public class Merging { public Merging () { \u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD System.out.println(\u0026#34;Merging object was not constructed fast enough to avoid conflict!!\u0026#34;); ======= System.out.println(\u0026#34;Merging object is being constructed!!\u0026#34;); \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; 36215863faef38cac7822b290a893ce1e150420c } } After deleting the markers and duplicated code, add and commit.\n"
},
{
	"uri": "http://wy-cs.info/ap-cs/jm/ch13/shopping-list/",
	"title": "13. Shopping List",
	"tags": [],
	"description": "",
	"content": "See the ArrayList presentation, pages 9-11, exercise ArrayList 4/4a/4b.\nThe setup code is to provide you with a sample shopping list to use in your tests.\nTesting suggestion:\n@Test public void test_example() { ArrayList\u0026lt;Integer\u0026gt; n = new ArrayList\u0026lt;\u0026gt;(); n.add(5); n.add(25); n.add(100); List\u0026lt;Integer\u0026gt; correct = Arrays.asList(5,25,100); assertEquals(correct, n); }  More detailed example testing code and a useless function so the tests compile.\n"
},
{
	"uri": "http://wy-cs.info/intermediate-cs/ch21b/pv-groundwork/",
	"title": "21.7.6 Groundwork",
	"tags": [],
	"description": "Groundwork practice for 21.7.6",
	"content": " Make before and after sketches of the ball bouncing off of the top of the screen. Include:\n position velocity (before and after!)   Write should-bounce-top?: pv -\u0026gt; boolean. Make sure to write checks!\n Write bounce-vertical: pv -\u0026gt; pv to change the velocity as needed.\n Begin typing your animation. Make sure to test your code as you go along. Don\u0026rsquo;t wait until you find out it doesn\u0026rsquo;t work to test it.\n  "
},
{
	"uri": "http://wy-cs.info/ap-cs/jm/sem1final/2-final-codingbat/",
	"title": "2. Final - CodingBat",
	"tags": [],
	"description": "Period 2 final programming question.",
	"content": "sticksOut. A word in an array \u0026ldquo;sticks out\u0026rdquo; if there is one word before it and one word after it, and it is alphabetically after the word that comes after it or it is at least two letters shorter than the word before it. Return a copy of the given array in which every word that \u0026ldquo;sticks out\u0026rdquo; is replaced by the last half of the word after it.\n Use case-insensitive comparison. If the \u0026ldquo;halves\u0026rdquo; of a word must be uneven, make the first \u0026ldquo;half\u0026rdquo; larger.  sticksOut([\u0026#34;alfa\u0026#34;,\u0026#34;bravo\u0026#34;,\u0026#34;zulu\u0026#34;,\u0026#34;charlie\u0026#34;]) ==\u0026gt; [\u0026#34;alfa\u0026#34;,\u0026#34;bravo\u0026#34;,\u0026#34;lie\u0026#34;,\u0026#34;charlie\u0026#34;] sticksOut([\u0026#34;walnut\u0026#34;,\u0026#34;pie\u0026#34;,\u0026#34;quince\u0026#34;]) ==\u0026gt; [\u0026#34;walnut\u0026#34;, \u0026#34;nce\u0026#34;, \u0026#34;quince\u0026#34;] sticksOut([\u0026#34;DELTA\u0026#34;,\u0026#34;eragon\u0026#34;,\u0026#34;FOXTROT\u0026#34;,\u0026#34;FOXTRO\u0026#34;]) ==\u0026gt; [\u0026#34;DELTA\u0026#34;,\u0026#34;eragon\u0026#34;,\u0026#34;TRO\u0026#34;,\u0026#34;FOXTRO\u0026#34;] sticksOut([\u0026#34;aaa\u0026#34;,\u0026#34;b\u0026#34;,\u0026#34;cccc\u0026#34;,\u0026#34;f\u0026#34;,\u0026#34;dd\u0026#34;]) ==\u0026gt; [\u0026#34;aaa\u0026#34;,\u0026#34;cc\u0026#34;,\u0026#34;d\u0026#34;,\u0026#34;dd\u0026#34;] Note: The notation [\u0026hellip;] denotes an array, although this is not syntactically correct Java. Use the correct syntax in your program and tests.\n Write the function sticksOut. Write at least three additional tests. Use the Starter code and automated testing.  Requires detailed understanding of the String chapter.\n "
},
{
	"uri": "http://wy-cs.info/intermediate-cs/ch21a/21-ws-a/",
	"title": "21. Worksheet A",
	"tags": [],
	"description": "Practice with Chapter 21 concepts.",
	"content": " Write a data description for a structure \u0026ldquo;computer\u0026rdquo; that stores the memory (e.g., 4GB), used hard disk space (e.g., 104.9 GB) , and has a textual description of its location (e.g., \u0026ldquo;leftmost computer by the window\u0026rdquo;). Write the definition for this structure. Create the computer from the example above. Test your code by showing that the location of the computer you made is \u0026ldquo;leftmost computer by the window\u0026rdquo;. Design and test a function that is true when the computer has at least 4GB of memory. Design and test a function \u0026ldquo;empty-trash\u0026rdquo; which takes a computer and decreases the used hard disk space by 15% (producing a computer).  "
},
{
	"uri": "http://wy-cs.info/intermediate-cs/sem1review/sem-review-2/",
	"title": "I.2 Semester I Review 2",
	"tags": [],
	"description": "Random dots located on a circle, purify color, Benz symbol.",
	"content": "  Random dots on a circle. Create an animation of a dot moving to one of six random locations on a circle. Ideally the locations will be equally spaced.\nAdvanced: use the x coordinate of the location to control the amount of red, and the y coordinate to control the amount of green.\nSolution to basic.\n Purify color. Given a color name, decide which component has the greatest color value and return it. In the case of a tie you can choose any of the tied values.\npurify-color: string(color-name) -\u0026gt; string(\u0026#34;red\u0026#34; \u0026#34;green\u0026#34; or \u0026#34;blue\u0026#34;) Cheap Benz symbol. Write a function to create the image below. Then make an animation that lets you control the size of the image (e.g., right and left arrow keys).\n   Extra  Dotted Pentagon. The dotted-pentagon function puts a colored dot on one of the five vertices of a regular pentagon. Challenge: the color of the dot is red, but fades\u0026hellip;   "
},
{
	"uri": "http://wy-cs.info/ap-cs/jm/ch10/10-exercises/",
	"title": "10. Exercises",
	"tags": [],
	"description": "",
	"content": "  Thursday 2017-12-14: Exercises 3,4,5,7,9,18. Friday 2017-12-15: Exercises: TBA  More Exercises  Using the code below, compute:\n v == w v.equals(w) v.compareTo(w)   { String s = \u0026#34;cow\u0026#34;; String v = s; String w = new String(s); }"
},
{
	"uri": "http://wy-cs.info/ftc/meet-2/",
	"title": "FTC Meet 2",
	"tags": [],
	"description": "",
	"content": " Competition Location:\nBack of the Yards High School 2111 W 47th Street Chicago, IL 60609 Parking, Load-in, and Building Access: You may park in the school’s lot, which is located off of Hoyne Street to the South of the school. From the parking lot, go up the ramp on the right side of the school, and enter through the doors on the left at the top of this ramp. This side entrance will be available for one hour (8:00 - 9:00) at the start to load in, and one hour at the end (12:30 - 1:30) to load out. For security reasons, these doors will be locked from 9:00 to 12:00. If you need access during this time, please call or text me directly for assistance. Guests visiting during the match will need to enter through the main entrance of the school on 47th Street.\nCompetition Schedule: 7:30 -- Doors open, visiting volunteer and team check-in begins 8:00 -- Robot and field inspection begins 9:30 -- Schedule announced, drivers\u0026#39; meeting, queueing begins 10:00 -- Matches begin (approximate) 1:00 -- Matches and event conclude (approximate) Participating Teams If your team is listed below and not planning to participate, please contact me as soon as possible.\n   Team Name Team Number     Crazy Eights 116   Chicago Squires 329   Robophins 3216   Ryan Kamphuis 3758   Mission Impossible 7007   RoboMinds 7030   Bobcats Robotics 10253   Camelot STEM-Bulldogs 11822   LevelUP IRL 12176   Inca Eaglebots 12902   Olmec Eaglebots 12904   Aztec Eaglebots 12905   Mayan Eaglebots 12906   RUSH Robotics 13204   Why Don’t We Build 13956    Special Note about Make-up Matches A number of attending teams that played at the Arturo Velazquez Institute on November 4th did not have the opportunity to play all 5 matches, and will make up these cancelled matches at Back of the Yards. For example, a team that played only 3 matches on 11-04 will play 7 matches on 12-09. Teams that do not need make-up matches may be asked to play as proxies in some of these matches in addition to the 5 official matches they will play on 12-09. Please plan to stay until or possibly after 1:00 p.m. to accommodate this extended play, and thank you in advance for your gracious professionalism and flexibility as we work to provide fair opportunities to play to all teams!\nFood Options Concessions (cash only) will be available on-site at the match. There are also a variety of local and fast food options nearby \u0026ndash; one local favorite is the Back of the Yards Coffeehouse, right across Hoyne Street from our front entrance.\nPrior to the Event:  Team roster and consent forms: FIRST would prefer teams create a team roster through TIMS. If parents cannot complete consent forms online, teams can bring release forms signed by parents. Please see this link for more info: http://www.firstinspires.org/resource-library/youth-team-member-consent-and-release-form\n Late Arrival or Not Attending: If you run into unexpected difficulties arriving, please let me know by calling or texting me (Halllie) at (773) 896-6533. If we do not hear from you by 9:15 am, we will have to assume you will not be able to make it and continue the event without your team.\n Robot Self Inspection: In order to enable inspection run smoothly we HIGHLY encourage you to fill out the robot self-inspection and field self-inspection checklists. This will really benefit all teams as it will mean the event will run smoother\n Please remember to pack a power cord and spare tools and parts! \u0026ndash; Remember, even if you do not need a part you might be able to help out another team :-)\n FIRST Game Information: http://www.firstinspires.org/resource-library/ftc/game-and-season-info\n  "
},
{
	"uri": "http://wy-cs.info/intermediate-cs/pro/build-image/",
	"title": "Build Image",
	"tags": [],
	"description": "Build-image to create images from a formula for the pixel color.",
	"content": " You should learn how to use build-image to make the pictures in Chapter 15.\nAdvanced: build-image The build-image uses a function that specifies the pixel color to create a rectangular image.\nThe first example is a function that always returns orange, so it makes an orange square:\n(define (pixel-color x y) \u0026#34;orange\u0026#34;) (build-image 300 200 pixel-color) Notice that pixel-color does not appear in parentheses. The build-image command needs to activate (run) the pixel-color function over and over again, so needs to know the name of the function.\nThe second example is to give different colors in different circumstances. This example uses a mathematical formula to make a nice picture. Try it.\n(define (pixel-color-ii x y) (cond [(\u0026lt;= (abs (- y x)) 30) \u0026#34;orange\u0026#34;] [else \u0026#34;blue\u0026#34;])) (build-image 300 200 pixel-color-ii)"
},
{
	"uri": "http://wy-cs.info/ap-cs/jm/ch02/",
	"title": "2. Software Engineering",
	"tags": [],
	"description": "Reading guide for chapter 2.",
	"content": " Resource: read the book and/or Chapter 2 Powerpoint.\nReading Guide  Where does the word \u0026ldquo;coding\u0026rdquo; come from?\n How is assembly laguage different from machine code?\n What decade was FORTRAN created? Pascal? C++?\n What type of program produces executables from the object code?\n What is the difference between code compiled to machine instructions and interpreted code?\n What are two advantages of byte code over machine code?\n What does JIT mean? What does a JIT compiler do?\n Who originated the term \u0026ldquo;bug\u0026rdquo; and why?\n Compare syntax errors and logic errors.\n What is the usual result of a runtime exception?\n What are two traits your code needs in order to be reusable? (There are four and the last one in the list is the most important.)\n Say you have a class named Dinosaur and everything in your program works. Change Dinosaur to dinosaur in every Java file\u0026hellip; Does it still work? Explain.\n What was the first popular object oriented language? Where was it made? What hope did the author have for it?\n What makes inheritance useful? (Not the goals of inheritance.)\n  "
},
{
	"uri": "http://wy-cs.info/intermediate-cs/part-i/ch08/number-2/",
	"title": "Number Models 2",
	"tags": [],
	"description": "Progress bar, dot that follows a line.",
	"content": "Please read Sections 8.1-8.4 in the book!\n  Make a progress bar that shrinks in half every time a key is hit.     Make a dot that moves along a line from (50,0) to (250,300).\n Exercise 8.4.4 from the text. Be sure to follow the design process!\n  "
},
{
	"uri": "http://wy-cs.info/ap-cs/git/",
	"title": "Git",
	"tags": ["git"],
	"description": "",
	"content": " Git is a system for keeping track of all of the versions of things you write, both old and new. The whole system is quite complex, so we will limit ourselves to a small portion of what it can do.\nYou will use it for several purposes:\n Turning in your work Backing up your work Transferring work to and from home via the internet instead of using a flash drive Collaborating with a group  Incomplete It is impossible to write down everything you need to know about git. Even experienced developers need to look things up. There is the Pro Git book and many StackOverflow questions about git that you can learn from.\n"
},
{
	"uri": "http://wy-cs.info/intermediate-cs/part-i/ch03/ch03-art-project/",
	"title": "Art Project",
	"tags": ["project"],
	"description": "",
	"content": " Deadline: Finish before Tuesday, September 26 (chapter 3 test day). Turn in Wednesday, September 27.\nProduce: One complex piece of art per person in the group. (Two simpler pieces.) (Groups of at most two.)\nGoal: Art projects should demonstrate a range of functions from the chapter, try to use 3-4 from each category in your whole project.\n Methods of placement: beside, above, overlay, place-image, as well as the \u0026ldquo;/align\u0026rdquo; variations. (Use the variations!)\n Changing pictures: crop, scale, rotate.\n Shapes: triangles (many!), lots more listed at the end of Chapter 3 (PDF pages 60\u0026ndash;61).\n Colors: color-database, make-color from the internet, colorize or name-\u0026gt;color.\n  Remember: This is a short project. I expect you will spend no more than two hours on it, including time working in class Friday and Monday.\nIt is OK to simplify and focus on using the goal functions (see above).\nSteps  Find one inspiration piece of art. Have idea approved before the first class ends. Complete by working in class Friday and Monday, and possibly some time at home over the weekend.  Choice 1: DrRacket\u0026rsquo;s take on MoMA Choose a piece of art for inspiration.\n School appropriate. No duplicates with anyone you know in any class. MoMA archive:  Textiles from Japan - which could have floral patterns or numbers from the cataloging process Islamic art \u0026mdash; like this   Choice #2: Picture Puzzles Goal: create two pictures that are challenging or interesting to recreate once they are finished. If you can get someone to say, \u0026ldquo;How did you do that?\u0026ldquo;, your puzzle is a success.\nPossible sources:\n Geometry puzzles Triangle puzzles Mondrian  "
},
{
	"uri": "http://wy-cs.info/ap-cs/haskell/ch04/ch04-problemset/",
	"title": "Chapter 4 Problem Set",
	"tags": ["haskell", "homework"],
	"description": "Exercises to improve your Haskell programming.",
	"content": " Key new concepts: patterns, guards, where, let, case.\nPlease write function signatures for every solution.\n Some of these problems are classical exercises with solutions online. Please do not search for them or read them before turning in your work. (See Academic Integrity.)\nExercises  First Third. Return the sum of the first and third elements in the list. Example: firstThird [10,30,50,90] == 60.\n Take a list of items that can be compared for equality (Eq a) and reduce repeats to a single element. Only reduce repeats that are next to each other in the list.\nnoTwins [1,1,5,1,2,2,2] == [1,5,1,2] (CodingBat sum67.) Return the sum of the integers in the array, except ignore sections of numbers starting with a 6 and extending to the next 7 (every 6 will be followed by at least one 7). Return 0 for no numbers.\nsum67 [1, 2, 2] == 5 sum67 [1, 2, 2, 6, 99, 99, 7] == 5 sum67 [1, 1, 6, 7, 2] == 4 (Discuss!) Make a newFibonacci function that takes in the two starting values for the Fibonacci sequence (usually 1 and 1) and then the term in the sequence that you want, and computes that term in the sequence.\nnewFibonacci 1 1 10 == 55 newFibonacci 5 8 9 == 233 Hint: Get the standard Fibonacci fib function working, then move it completely inside a let binding so you can alter the starting values.\n Block Game. Do this bronze level USA Computing Olympiad problem. (You should start with a list of pairs of words, that is [(String,String)]; you do not have to read them from a file.)\n  Games We discussed these in class. You should be able to do them. If you missed class, talk to someone who was there.\n Laser Tag I. You are playing laser tag on the integer coordinate plane. You stand at (x0,y0) and fire your laser parallel to one of the axes. We will write the direction using unit coordinates, so (1,0) will be the positive x-direction. The coordinates of the other players are in a list. Assuming that you hit a player, report the coordinates of the player who is hit.\nlaserTag (1,2) (0,1) [(5,2), (1,-4), (1,50), (1,25), (1,30)] == (1,25) Laser Tag II. (Save for later if needed.) We continue to play the laser tag game, except now there are both people and double-sided mirrors oriented at 45 degrees to the coordinate axes. Represent the objects by triples (x,y,c) where c is a character * for a person, / or \\ for a mirror (depending on the orientation). Assume that eventually the laser will hit someone (maybe you?!). Find the coordinates of the person who gets hit.\nlaserTagMirrors (1,2) (0,1) [(1,2,\u0026#39;*\u0026#39;), (5,2,\u0026#39;*\u0026#39;), (1,5,\u0026#39;/\u0026#39;), (4,5,\u0026#39;*\u0026#39;), (-3,5,\u0026#39;*\u0026#39;)] == (4,5) Flipping the mirror at (1,5) should make the answer (-3,5). You should draw some test cases and make a tester function to verify your code is correct when there are more mirrors.\n  "
},
{
	"uri": "http://wy-cs.info/ap-cs/haskell/ch03/ch03-reading-guide-haskell/",
	"title": "Chapter 3 Reading Guide",
	"tags": ["haskell", "reading-guide"],
	"description": "",
	"content": "We learn about types and typeclasses. You should use valid Haskell types in all of your answers. Unless needed, I stick with Int for the type for integers.\nBasics  How do you find the type of an expression (when using the interpreter)? What is the type of a string, written in correct Haskell type syntax? What is the type of the expression (5 == 5)? What is the type signature for a function that takes in an integer and puts out a string? What is the type signature for a function that takes in two integers and multiplies them? What is the type of (factorial 50) from the book? How is that different from an Int? Write the signature of a function prob3 that takes in a number and puts out a string. What is the correct way to write the type signature of a function prob4 that take single number and a list of numbers and puts out a list of numbers?\n Find out the difference between Float and Double. Summarize it here.\n How can you tell whether the text \u0026ldquo;string\u0026rdquo; in a program refers to a variable or a type?\n Write the type signature for:\n snd repeat init    Class Constraints  Where can you find a class constraint? What special symbol separate a class constraint from a function\u0026rsquo;s type? What is the best type to give the function:\nmystery a b = if ( a \u0026lt; b ) then \u0026#34;A small\u0026#34; else \u0026#34;A large\u0026#34; What familiar typeclass indicates that something can be written in string form?\n  The Read Typeclass  What does being in the Read typeclass indicate? How can you convert the string \u0026ldquo;10230\u0026rdquo; to an integer?  Miscellaneous Typeclasses  What is the main use of the Enum typeclass? Aside from integers, give two other examples of things in the Enum typeclass. What typeclass tells you that something has a largest and smallest value? How would you find the smallest possible Int in Haskell?  Math  What is the difference between 5 and (5 :: Int)? Can you do this math?  3.2 * (5 :: Int) 5.63 * 20  What will happen when you use the following function? listBigSize aList = 3 * (length aList)  Integral vs Floating  The last function discussed in the chapter is the most important by far.\n Write its name and signature here. What is it used for?  Programming exercise: the quadratic formula. Write and test a function that takes in a,b, and c, and produces the larger root of ax^2+bx+c. (Assume there is at least one real root.)\n "
},
{
	"uri": "http://wy-cs.info/ap-cs/haskell/ch02/hw-a2/",
	"title": "Haskell HW 2",
	"tags": ["homework", "hw", "haskell", "ap-cs"],
	"description": "",
	"content": "Graph a function, is a pointon a line, get the numbers more than 100, break up a list, find the nearest point. Homework  Write the \u0026ldquo;grapher\u0026rdquo; function whose inputs are (i) a function f that takes in a number and puts out a number, (ii) a lower bound, and (iii) an upper bound. The grapher function should return a list of coordinates (x,y) where y=f(x) and x goes from the lower bound to the upper bound increasing by 1 each time.\n Write a function onLine that takes in a slope m, a y-intercept b, and a point (x0,y0) and gives back True if the point is on the line y=m*x+b and false otherwise.\n Write a function moreThan100 that takes in a list of numbers and puts out a list of numbers. The output is the same as the input with all of the numbers less than or equal to 100 removed.\n Break It Up. Given a list of numbers, create a list containing every sequence of four numbers in a row. Example:\nbreakItUp [5,10,20,3,8,9] = [ [5,10,20,3], [10,20,3,8], [20,3,8,9] ] Target Practice. (Challenge) Given a point (x0,y0) and a list of ordered pairs, return the point in the list that is closest to the given point. (Hint: skip the square root when you compare distances, it will save you some Haskell difficulties.)\n  OMIT  Write a function addp that adds two ordered pairs.\n (Bonus) The function nextInDirection takes in start point (x0,y0), a direction (dx,dy), and a list of ordered pairs. The function returns the point in the list that is closest to the start point and can be reached by beginning at the start and going in the given direction.\n "
},
{
	"uri": "http://wy-cs.info/intermediate-cs/",
	"title": "Intermediate CS",
	"tags": [],
	"description": "",
	"content": " Intermediate Computer Science uses the DrRacket environment and the Picturing Programs textbook. Use WeScheme if you cannot install programs, but read the notes on WeScheme because it is different in some ways.\nRecent Changes   P2. Attendance modified Mon 05-21  P1. Jackpot modified Mon 05-21  Sem II Review modified Mon 05-21  Agar.io modified Wed 05-16  Reversi modified Wed 05-16  25. Universe Projects modified Wed 05-16  Universe Slapjack modified Wed 05-16  Universe Resources modified Wed 05-16  All Content   Part I: Ch 1-19   Project: Space Invaders   20. Using Structures   21A. Making Structures   Sem.I Review   Sem.I Finals   21B. Structures   Project: PV   Contracts   22a. Recursion   22b. Lists   23. Battleship   24. Universe   25. Universe Projects   Sem II Review   Calendar   Pro Features   Online Help   Design Process   Resources The course syllabus, grading weights, and other basic information can be found in the resources section of the site.\n"
},
{
	"uri": "http://wy-cs.info/intermediate-cs/ch21a/21-ws-b/",
	"title": "21. Worksheet B",
	"tags": [],
	"description": "More practice with structures.",
	"content": " Pay attention to contracts for the functions you are asked to write. When a full-circle is mentioned, that means the data type that you defined in question 1 and 2. Both \u0026ldquo;takes in\u0026rdquo; and \u0026ldquo;given\u0026rdquo; are indications that the parameters to the function are being specified.\n Animation: Moving Colored Dot  Create a data definition for a type \u0026ldquo;fc\u0026rdquo; (for full-circle) that is able to store the location of the center, color, and radius of a dot. Write the actual struct definition. Test each feature (center, color, radius). Write a function to create a solid circle of the given color and radius. Design and test a function to draw the circle at the given position on the background. Design and test a function fc-move that takes in a full-circle and a position, and returns a new full-circle with the same color and radius, but different position. Write a function fc-set-color. Include a sensible purpose and contract. Write a function fc-change-radius that takes in a full-circle and an amount to change the radius. Include sensible purpose and contract. Create an animation of a full-circle randomly moving around the screen.  "
},
{
	"uri": "http://wy-cs.info/ap-cs/haskell/ch02/hw-a2-solution/",
	"title": "Haskell HW 2 Solutions",
	"tags": ["homework", "solutions", "haskell", "ap-cs"],
	"description": "",
	"content": "breakItUp plan:\n replicate input list (length - 3) times zip with count helper function knows count and list, drop \u0026amp; take  breaklicator xs = replicate (length xs - 3) xs numberIt ys = zip ys [0..] breakItUp\u0026#39; :: ([a],Int) -\u0026gt; [a] breakItUp\u0026#39; (xs,y) = take 4 $ drop y xs breakItUp_v2 :: [a] -\u0026gt; [[a]] breakItUp_v2 xs = [ breakItUp\u0026#39; w | w \u0026lt;- numberIt $ breaklicator xs ] Fancy solution for breakItUp, shows power of Haskell pattern matching (Chapter 4):\nbreakItUp :: [a] -\u0026gt; [[a]] breakItUp [a,b,c,d] = [[a,b,c,d]] breakItUp (x:xs) = (x:take 3 xs) : breakItUp xs targetPractice plan:\n distance formula helper function that remembers the closest point so far recursively go through list of all points  -- you should just write (Int,Int) everywhere I write Pt type Pt = (Int,Int) dist :: Pt -\u0026gt; Pt -\u0026gt; Int dist (x0,y0) (x1,y1) = (x1-x0)^2 + (y1-y0)^2 targetPractice :: Pt -\u0026gt; [Pt] -\u0026gt; Pt targetPractice pt ptList = targetPractice\u0026#39; pt ptList (head ptList) targetPractice\u0026#39; :: Pt -\u0026gt; [Pt] -\u0026gt; Pt -\u0026gt; Pt targetPractice\u0026#39; pt [] closestSoFar = closestSoFar targetPractice\u0026#39; pt (x:xs) closestSoFar = targetPractice\u0026#39; pt xs newClosest where newClosest = if (dist x pt) \u0026lt; (dist closestSoFar pt) then x else closestSoFar"
},
{
	"uri": "http://wy-cs.info/intermediate-cs/pv-proj/pv-tickh/",
	"title": "Tick Handler Helpers",
	"tags": [],
	"description": "Use multiple helper funcitons to create a tick handler that does multiple actions.",
	"content": "(Copied from the earlier combining tick handlers page.) You can combine two tick-handler actions into one by using \u0026ldquo;function composition\u0026rdquo;:\n; first-action: model -\u0026gt; model ; second-action: model -\u0026gt; model ; tick-handler: model -\u0026gt; model (define (tick-handler model) (second-action (first-action model))) Usually first-action makes one object move and second-action makes another object move. Writing separate functions makes it easier to test and reduces the confusion of doing multiple actions at once.\n"
},
{
	"uri": "http://wy-cs.info/resources/generic-cs-syllabus/",
	"title": "Syllabus: All Courses",
	"tags": [],
	"description": "",
	"content": " Computer Science Syllabus Overview The most important information (contact information, grading scale) comes first. Anything you need that you do not see here, check the following sources:\n Class web site resources section Email me and ask: amauer-oats@cps.edu  Course-specific information  AP Computer Science Intermediate Computer Science  Contact information I read email regularly. Email amauer-oats@cps.edu. I am willing to call or text with you. Make sure your student put your phone number on the parent page of the student information form \u0026hellip; or email me.\nPhilosophy I aim to create an equitable challenge for everyone in my class. I want to provide everyone in the class meaningful work experiences at a manageable but challenging intellectual level. I may give the same credit for different actual assignments to accomplish this goal.\nThe student side of this equitable challenge is that I expect everyone to work on computer science 100% of the time in class. This applies even if someone is finished with the current assignment or has been absent for a week. I have a shelf full of books available for advanced or catch-up work.\nI expect everyone to take my suggestions for improving their work seriously. Computer science is an art as well as a science. Polish good habits, eradicate bad ones. Please admit if you cling to unproductive habits and work honestly to change them.\nGrading weights and scale    Percent Category     20 Final Exam/Project (Quarterly)   40 Tests and Quizzes (individual)   20 Projects   20 Participation    Some grade should be updated every week. Every grade category except final exam should be updated every three weeks. Edline will have all raw score information. Only scaled (\u0026ldquo;curved\u0026rdquo;) scores will be posted on the CPS Gradebook.\nWe use the standard Whitney Young grading scale (90+ A, 80+ B, 70+ C, 60+ D, below 60 F).\nClass participation will be four points per day. You must be present and engaged in the class activities for the entire class to earn all of the points.\nGrading and attendance You must be present in order to learn from the class.\n   Absences Consequence     5 Call and email parent.   10 One letter grade (-10 point) deduction to final grade.   15 Additional -5 point deduction to final percentage.   20 Additional -5 point deduction to final percentage.   25 Failure in class    Three tardies more than 5 min late count as one absence.\nAny absence with a note from a medical doctor does not count toward the total absences. (Please make sure I see a copy of the note!) All other absences count. Please discuss necessary accomodations for IEP/504 in the first two weeks of class if I am not aware of them.\nDifferentiation All assigned work is expected to be completed.\nThere is no extra credit without regular credit. The way to improve a grade is through consistent effort, seeking help when needed, and allocating enough effective work time outside of class. Please track your work in your interactive notebook so we can discuss how to make your time more effective.\nAdvanced students may be allowed to replace standard work with projects, but all exceptions will be accompanied by a written contract detailing what other work will be completed to replace the main line coursework. In at most two weeks, the project is due and will receive a grade. Students are still responsible for standard material.\nEssentials of involvement As much as we can, we let students manage their own learning. Occasionally parents should be involved more at home. Sometimes adults need to talk directly. Please contact me directly if you see (or are being told) that grades are not up to date or your student is exempt from the work for any reason and does not have written documentation.\nDaily Materials  Notebook: A thin spiral or composition notebook dedicated to computer science is required for planning, reflection, and documenting progress.\n USB Flash Drive: A small USB drive to store files. (Any size is fine. Code is small.)\n  IEP and 504 plans will be followed Any student with a 504 or IEP will receive all accomodations listed. Please make sure the teacher has received a copy of the plan at the start of the year (especially if your schedule has changed, sometimes the paperwork follows too slowly).\nState standards Computer Science Teachers Association standards applicable in this class:\n 4.2.1 Computational Thinking (CT) 4.2.2 Collaboration (CL) 4.2.3 Computing Practice and Programming (CPP) See individual unit plans for more details.  "
},
{
	"uri": "http://wy-cs.info/intermediate-cs/universe/u-color/",
	"title": "Universe Color",
	"tags": [],
	"description": "Change the color on all of the clients by hitting a key.",
	"content": " We will make a client that knows \u0026ldquo;its own color\u0026rdquo; and the color that is showing on the screen. When a key is hit, the client sends its own color to the server. When a client receives a color message, it changes the color that is showing on the screen to that color. This means that hitting a key will change the color on everyone\u0026rsquo;s screen to your color.\nModel and Message Structure The model needs two colors, one to remember as \u0026ldquo;your color\u0026rdquo; and the other to show on the screen.\nThere will only be one kind of message, the color.\nProcess Review the universe overview.\n Define the structure. Make two examples, one which has \u0026ldquo;your color\u0026rdquo; blue and is showing orange, the other which has \u0026ldquo;your color\u0026rdquo; blue and is showing blue. Write and test the draw handler. Design and test the message handler (on-receive). Design and test the key handler.  Code  Server. You do not need to understand this code now. Color changing client from period 1  "
},
{
	"uri": "http://wy-cs.info/ap-cs/jm/ch15/file-quiz/",
	"title": "15. File Quiz",
	"tags": [],
	"description": "Quiz using File, similar tasks to what we have done previously.",
	"content": " Given the name of a folder (directory), find all of the files inside that directory that have either:\n more than 50 lines; or a number on the first line.  You may assume that the number on the first line is separated by whitespace from the other characters. You need only handle lines of these forms:\n211 S. Laflin St Room 306 I ate 4 cookies. There is a zip file containing a folder of test cases that you may use to test your code.\nQuestions and Problems  Is it required to look inside folders (directories) that you find? No. NullPointerException: Commonly caused by attempting to list the files of something that is not a directory. Generic debugging advice: Add print statements so you can see what is going on!  "
},
{
	"uri": "http://wy-cs.info/intermediate-cs/battleship/outline/",
	"title": "Battleship Outline",
	"tags": [],
	"description": "Game logic, draw handler, mouse handler.",
	"content": " In order for all of us to be working with a similar model, this page uses the definitions below for ship and game.\n(define-struct ship (name posns)) (define-struct game (ships shots)) Game logic  posn-in-list: posn(x) list-of-posns(data) -\u0026gt; boolean. True if x is one of the posns in data. You may have to write the posn=? function yourself if it is not in your posn-util.\n shot-hit-ship?: posn(shot) list-of-posns(ps) -\u0026gt; boolean. True if the shot hit the ship specified by the posns.\n shot-hit-any-ship?: posn(shot) list-of-ships -\u0026gt; boolean. True if the shot hits any one of the ships.\n ship-sunk?: ship list-of-posn(shots) -\u0026gt; boolean. True if the ship is sunk (every part of the ship is hit by a shot).\n  Drawing  You should have constants defined for the width and height of the board. Call them COLUMNS and ROWS.  There are two different, equally valid, ways to draw:\n Draw the grid, filling in the correct coloring for each square as you go. Draw an empty grid, then fill in each shot using place-image.  This discussion will use the second method.\nSizes How big should each grid square be? You get to decide, but make a constant instead of just writing \u0026ldquo;40\u0026rdquo; or \u0026ldquo;50\u0026rdquo; everywhere in your code.\nDraw grid Hopefully you\u0026rsquo;ve done this before. Usually two functions combine to make a grid.\n horizontal-stack: number(m) image -\u0026gt; image. Repeat the image (which will be a grid square) M times.\n vertical-stack: number(n) image -\u0026gt; image. Repeat the image (which will be a row of squares) N times.\n  Grid coordinates When we talk about the square at grid coordinates (0,2), we mean row 0 (the top row) and column 2 (which is the third column, since we start counting from zero).\nImage coordinates are usually numbers like (20,100), representing the actual location in the image of the center of the grid square.\nDraw shots Drawing the shots means we have to translate from grid coordinates to image coordinates.\nWhen each square is 40x40, what are the coordinates of the center of grid square (2,1)? Draw a picture and figure it out now!\n grid-\u0026gt;image-coords: posn -\u0026gt; posn. Translate the grid coordinates to image coordinates. The result should depend on the size of the squares in the grid.\n draw-one-shot: game posn(shot) image(bg) -\u0026gt; image. Draw one shot on the background. You will need to decide if the shot is a hit or a miss before you draw it.\n draw-all-shots: game list-of-posn(shots) image(bg) -\u0026gt; image. Draw all shots on the background.\n  Mouse handler When you click on a square, it should make a \u0026ldquo;shot\u0026rdquo; that hits that square.\nExample: grid squares are huge, 100x100. You click on (310, 190). What board square contains that click?\nAnswer: (3,1). Just divide each coordinate by the size of one grid square.\n Signature: mouse-handler: game(old-model) x y event -\u0026gt; game(new-model).\n Purpose: when the event is a click, add the corresponding square to the list of shots in the model.\n  "
},
{
	"uri": "http://wy-cs.info/intermediate-cs/ch22b/list-exercises-2/",
	"title": "22b. List Exercises 2",
	"tags": [],
	"description": "Vocabulary for list functions. More practice problems.",
	"content": " Vocabulary There are four major kinds of functions on lists that we will learn to write. They are: reduce, create, map, and filter.\n reduce: Any function that takes a list of things and produces a single thing. For example: add-them, which adds all of the numbers in a list of numbers. Functions like sea-of-stars that take a list of posns and produce an image also fall in this category.\n create: A function that creates a list from something that is not a list. Example: multiples-of-7, which takes a number N and produces a list of the first N multiples of 7.\n map: A function that performs the same action on every thing in a list of things, giving a list of things as its answer. Example: double-all which doubles every number in a list.\n filter: A function which removes some items from a list of items, leaving a list of items. Example: remove-small which removes every number less than 20 from a list of numbers.\n  Practice Problems  my-range: number(start) number(end) -\u0026gt; list of numbers. Create a list containing all of the numbers from start to end, inclusive. Example: (my-range 5 11) =\u0026gt; (list 5 6 7 8 9 10 11).\n two-power: number(n) -\u0026gt; list of numbers. Create a list of powers of two, starting with 2^n and ending with 2^0. Example: (two-power 5) =\u0026gt; (list 32 16 8 4 2 1).\n double-all: list of numbers -\u0026gt; list of numbers. Double each number in the list. Example (double-all (list 1 30)) =\u0026gt; (list 2 60).\n remove-small: list of numbers -\u0026gt; list of numbers. Create a list that excludes numbers smaller than 20 from the original list.\n  "
},
{
	"uri": "http://wy-cs.info/ap-cs/jm/interlude-feb/ap-programming-practice-3/",
	"title": "Programming Practice 3",
	"tags": [],
	"description": "",
	"content": "Direct links below do not work. Use this link for ProCom 4 contest.\n 2018-03-12:\n Ship prices. This counts as your problem solving quiz if you do it yourself.  "
},
{
	"uri": "http://wy-cs.info/intermediate-cs/ch22a/30-fibonacci/",
	"title": "22a. Fibonacci",
	"tags": [],
	"description": "Introduction to recursion using Fibonacci numbers.",
	"content": " Fibonacci 1,1,2,3,5,8,\u0026hellip;\n What are next three? How to number them?  Fibonacci |n|0|1|2|3|4|5|6| |-|-|-|-|-|-|-|-| |fib(n)|1|1|2|3|5|8|13|\nf(8) = ?\nFibonacci Where does it start?\nfib(0) = 1\nfib(1) = 1\nPattern?\nfib(102) = ?\nFibonacci Write the function (fib n).\nUse a conditional.\nFibonacci (define (fib n) (cond [(= n 0) 1] [(= n 1) 1] [else ... ])) "
},
{
	"uri": "http://wy-cs.info/intermediate-cs/pro/match/",
	"title": "Match",
	"tags": [],
	"description": "",
	"content": " Pattern matching lets you take apart structures into their component variables in a simple way.\nYou can use (require racket/match) to activate pattern matching.\nMatching The match function is like cond except it checks to see if a value matches a certain \u0026ldquo;literal\u0026rdquo; pattern or question. It can create variables to use immediately instead of requiring a helper function.\nProblem Write a function that takes in a number or a posn and returns the distance to the correct origin (either 0 or (0,0)) depending on which type it gets.\nExample Solution: Cond (define (cond-to-zero w) (cond [(posn? w) (sqrt (+ (sqr (posn-x w)) (sqr (posn-y w))))] [(number? w) (abs w)])) Example Solution: Match (define (match-to-zero w) (match n [(posn x y) (sqrt (+ (sqr x) (sqr y)))] [number? (abs w)])) Notice how\nIgnoring parts of a model You can use the underscore _ to match places that you want to ignore. This example shows how to pull out two scores from a model and use them to find the total number of points in the game.\n(define-struct game (p1pos p1score p2pos p2score)) (define (total-score model) (match model [(game _ s1 _ s2) (+ s1 s2)] List processing with matching Suppose you want to add all of the numbers in a list. You can use the '() pattern to match the empty list. The pattern (list a more ...) makes a match the first of the list and more match the rest of the list.\n(define (add-all data) (match data [\u0026#39;() 0] [(list a more ...) (+ a (add-add more))]))"
},
{
	"uri": "http://wy-cs.info/intermediate-cs/pv-proj/pv-help/",
	"title": "Help with Corrupted Models",
	"tags": [],
	"description": "How to debug corrupted model errors by using your own check-with function.",
	"content": " We have not talked about writing your own check-with? function. That can really help if you have not been careful about signatures and some of your functions do not do what they are supposed to do. Here is a brief tutorial how to create a really good checker function.\nIn the big-bang, (check-with game?) makes sure that the model is always a game. That saves you from the problem of returning a number from a tick handler that is supposed to return a game. It doesn\u0026rsquo;t prevent you from messing up the things inside the game struct (like putting a number where a posn is supposed to be).\nTo debug problems with your model being corrupted, you need to write your own check-with function that makes sure everything inside the model is OK too.\nSimple check-with This example shows how to check a model that has two posns and a number.\n(define-struct game (pos1 pos2 n)) (define (good-game? w) (and (game? w) (posn? (game-pos1 w)) (posn? (game-pos2 w)) (number? (game-n w)))) (big-bang ... (check-with good-game?)) Advanced check-with If your model is supposed to be a PV and a number, then you should write a really elaborate checker that makes sure everything has the right types.\n(define-struct pv (p v)) (define-struct game (pv n)) (define (good-pv? w) (and (pv? w) (posn? (pv-p w)) (posn? (pv-v w)))) (define (good-game? ww) (and (game? ww) (good-pv? (game-pv ww)) (number? (game-n ww))))"
},
{
	"uri": "http://wy-cs.info/intermediate-cs/ch21b/pv-tick-handler/",
	"title": "21.7.6 Tick Handler",
	"tags": [],
	"description": "Combining actions into one big tick handler.",
	"content": " We will start by a using an analogy to talk about doing multiple actions in one tick handler.\nMath Analogy Suppose you have two functions, f and g. The f function takes its input, multiplies by three, and adds one. The g function takes its input, squares it, and subtracts 9. Make a new h function that takes it input, multiplies by 3, adds one, then squares the answer and subtracts 9.\n(define (f x) (+ (* 3 x) 1)) (define (g x) (- (sqr x) 9))  Solution 1 - typical but long. Solution 2 - much better.  Big-bang You can combine two tick-handler actions into one by using \u0026ldquo;function composition\u0026rdquo;:\n; first-action: model -\u0026gt; model ; second-action: model -\u0026gt; model ; tick-handler: model -\u0026gt; model (define (tick-handler model) (second-action (first-action model))) Try combining the ball bouncing and ball moving actions in this way.\n"
},
{
	"uri": "http://wy-cs.info/intermediate-cs/sem1review/sem-review-3/",
	"title": "I.3 Semester I Review 3",
	"tags": [],
	"description": "Practice: red-blue, spam-circle, rectangle limitations. Review reading.",
	"content": " At home you may want to do some review reading and practice. You should be able to do review questions 1 and 2 in one day, and question 3 in a second day. Ask if you have questions!\nReview Reading Reading the book and looking at old exercises is a very productive way to study. Struggling in Chapter 21 (new structures)?\n Read 21.5 (\u0026ldquo;Functions returning user-defined structs\u0026rdquo;) and do the exercises. Read the extended example in 21.6 (moving-x).  Other good chapters to read are: 20 (posn and color), and 17 (animations using cond).\nReview Questions  Red-blue. Standard dice have 6 sides, numbered 1 through 6. Play a game with a standard blue die and two standard red dice. The number of points you get is ten times the blue roll plus three times the sum of the other two. Except you get zero points if your red dice total 4. Design and test the red-blue function.\nred-blue: any(ignore) -\u0026gt; number(points) Solution to red-blue.\n Spam-circle. Every time you click, a circle appears centered on the mouse. The color of the circle changes is red the first click, green the second, blue the third, red the fourth, and so on. Choose one option:\n display one circle at a time display all of the circles made so far  Advanced variations:\n Enter resets the color to red. The \u0026ldquo;c\u0026rdquo; key clears the screen. After five seconds, the game quits. When it quits, show how many circles the person currently has showing on the screen.  Solution to spam-circle.\n Rectangle Limitations. This will take a while. As you work on it, keep the design process in mind. Have a signature, purpose, and tests for every function.\nThe animation: as you move the mouse on the screen, a small circle follows the mouse.\n At the start of the game, the circle is restricted to the rectangle 100\u0026lt;=x\u0026lt;=200 and 150 \u0026lt;= y \u0026lt;= 250.\nThat means that if the mouse is outside of that rectangle, the circle will stick to one of the rectangle\u0026rsquo;s walls.\n After t seconds, the circle can move in the larger rectangle 100-10t \u0026lt;= x \u0026lt;= 200+10t and 150-5t \u0026lt;= y \u0026lt;= 250 + 5t.\n After 10 seconds the animation ends.\n  Breakdown of the creation process:\n What model? Call it \u0026ldquo;m\u0026rdquo;. It should be able to remember three posns: upper left, lower right, and a point anywhere on the screen. Design and test m-set-pt: m(model) posn(new-point) -\u0026gt; m(new-model)\u0026hellip; what should this function do? Look back at Chapter 21 Worksheets B and C if needed. Design and test limit-pt: posn(upper-left) posn(lower-right) posn(pt) -\u0026gt; posn (new-pt). This function makes a point that stays on the edge of the rectangle if pt is outside of the rectangle. Otherwise it does not change pt. Mouse-handler: remember the actual real position of the mouse. Draw-handler: use limit-pt to put the current mouse coordinates into the rectangle defined by the upper-left and lower-right posns in the model, then draw a circle there. Tick-handler: change the upper-left and lower-right posns by (10,5) in the correct direction (add or subtract).    "
},
{
	"uri": "http://wy-cs.info/intermediate-cs/ch20/click-circle/",
	"title": "20. Click Circle",
	"tags": [],
	"description": "A circle moves around the screen randomly. You win if you can click on it.",
	"content": " Exercises 20.6.3 and 20.6.4.\n A circle moves to a random position on the screen every so often. (20.6.3)\n Clicking on the circle displays a win screen. (20.6.4) Note: I recommend using a special posn as the model to indicate when to display the win screen.\n  check-with The clause (check-with posn?) makes sure that every handler returns a posn. You should add this clause to your big-bang whenever you work with posns. Colors have a similar check, color?.\nStop-when There is a new clause in big-bang called stop-when. It works like the linked demo code. The big-bang looks like this:\n(big-bang 0 (on-tick add1 0.1) (on-draw draw-num 300 200) (stop-when above-ten? draw-done)) The above-ten? method takes in a model and produces a boolean value. The big-bang stops if this function returns true.\nThe draw-done method is a draw handler called when to produce the last frame of the animation - regarless of why the big-bang is ending.\nImpossible State Trick One way to decide that an animation is over is to change the model to something that is impossible under regular circumstances. For example, a posn with negative coordinates could not be created by the mouse-handler under normal circumstances, so it could be used to indicate that the animation should end.\n(define MODEL-END-IT (make-posn -1001 999)) (define (stopping? model) (posn=? model MODEL-END-IT)) Notes  Never place randomness in the draw handler. The draw handler can be called lots more frequently than you imagine (for example, when you drag the window and it needs to redraw). Your model should not be an image any more. Use a better model.\n Complete big-bang documentation so you can look up any unusual keys or functions that you need. For example: button-down.\n  "
},
{
	"uri": "http://wy-cs.info/ap-cs/jm/ch03/",
	"title": "3. Objects and Classes",
	"tags": [],
	"description": "",
	"content": "  Day 1: read 3.1, skim 3.2 - read boldface, 3.3. Day 2: read 3.5-end. Day 3: Writing Simple Classes II. Day 4: Writing Simple Classes III. Statements and solution in the new github repository.  git clone https://github.com/2017-2018-wy-ap-cs/java-rotary-phone Reading Questions  What does CRC stand for in the phrase \u0026ldquo;I wrote a CRC card for SuperBot\u0026rdquo;?  Classes (3.3)  What is a class, according to Java Methods?\n What is the difference between a class and an object? Give two examples not from the text.\n Are there any rules in Java governing the name of a file containing DinosaurBot? If so, what?\n Does Java force you to name your classes beginning with capital letters? Explain the context of this question.\n What is an instance variable? How does it compare to a field?\n What vocabulary word is used for behaviors of a class?\n Give an example of an \u0026ldquo;implicit\u0026rdquo; field, constructor, or method. (Appears later in the chapter.)\n If you refuse to use import statements, does that mean you cannot access information from other files, like the Color class? Explain.\n Does Java care what order methods and fields appear in a class?\n What conventions do Java programmers use when ordering the things that they put in a class?\n Is it considered good design to put the main method inside your WorkerBot class? What do the Java Methods authors say? Why do you think they say that?\n  Gridworld (3.4) Fields, Constructors, Methods (3.5)  Is it an error to have two constructors: public Bug() and public Bug(Color c)? If not, how do you determine which one is used?\n What is a \u0026ldquo;reference\u0026rdquo; (intuitively)?\n What is garbage collection?\n Is it possible for a class to have no constructors? How? Or why not?\n What does it mean to \u0026ldquo;send a message\u0026rdquo; to an object in Java (metaphorically speaking)?\n Does a method belong to an object or a class? Explain briefly.\n How do you indicate that a method gives no result?\n There is a technique mentioned called either encapsulation or information hiding. What is one way to implement encapsulation?\n What is one advantage of encapsulation? (One of the three mentioned in the book is more important than the other two - try to pick that one.)\n  Inheritance (3.6)  Why might adding methods to an existing class not be \u0026ldquo;feasible or desirable\u0026rdquo;? (Three reasons.)\n Reason 1: Reason 2: Reason 3:  What is inherited from a superclass? What is not?\n Is it possible to make a class that does not inherit from any other class? Explain.\n Bug is on page 52, UTurnBug is on page 65. Why can\u0026rsquo;t UTurnBug just have turnAround() function that is direction += 180?\n What are accessor methods?\n  "
},
{
	"uri": "http://wy-cs.info/intermediate-cs/part-i/ch08/number-3/",
	"title": "Number Models 3",
	"tags": [],
	"description": "Remainder to repeat. Random dots.",
	"content": " Remainder warmups Opener Divide 324 by 7. What is the quotient? The remainder?\nFollow-up When you change 324 to other numbers, what possible remainders can you get? (For example, can you get a remainder of 2 by dividing something by 7? What?)\nAnimation An animation will just count from 0 to 6, then start over again at zero.\nWrite the model you choose, then checks and a function for the tick handler.\nMore animation Show the numbers (in order): 10, 30, 50, 70, 90, then go back to 10 and repeat.\n Model? Tick handler.  Repetition (without conditionals) What does this tick-hander do? Write checks for the results when num=0, num=1, and num=4.\n(define (repeat-it num) (remainder (+ num 1) 5)) Class practice 1a. Make a shape of your choice start at x=100, y=40, then move to x=100,y=110, then to x=100,y=180, then back to x=100, y=40. The motion should happen every second.\n1b. Hit a key to make the shape go to a random one of those three locations.\nHomework Add one colored circle at a random location on the screen every half second.\n"
},
{
	"uri": "http://wy-cs.info/ap-cs/karel/ch3/",
	"title": "Karel 3",
	"tags": [],
	"description": "Short list of updates and exercises for Chapter 3.",
	"content": " Adding new abilities to robots Practice  2017-10-19: In class exercise 2 (PinSetter). Homework: exercise 4 (HarvestDiamond).\n 2017-10-20: Chapter 3 exercise 6: DigitalClock.\n To set the size of a world:\nWorld.setSize(10,21); World.setVisible(true); Grab the lower right corner of the display window and drag it UP and LEFT to fit everything on the screen.\n I have updated the AP CS master repository with several extra commands:\n ./one-time to set a few defaults ./update to get my new changes ./save to do the three saving commands all in one     "
},
{
	"uri": "http://wy-cs.info/ap-cs/karel/",
	"title": "Karel the Robot",
	"tags": [],
	"description": "",
	"content": "  Book Links to the repository and documentation for the Karel the Robot unit.\n  Essentials Links to the repository and documentation for the Karel the Robot unit.\n  Karel 1 and 2 Reading and homework for the first two chapters of the Karel book.\n  Karel 3 Short list of updates and exercises for Chapter 3.\n  Karel 4.1-4.4 Very important chapter: Choreographer, Contractor, Strategy, Spy, Observer. Design patterns in Java.\n  Karel 4.5-4.6 Great chapter: Strategy, Spy, Observer. Design patterns in Java.\n  CodingBat Interlude Practice for the fundamentals of coding in Java: logic and loops.\n  4.6 PrettyBoxBot PrettyBoxBot to practice interfaces\n  4.6 FishBot A fish robot that alternates between two strategies so it is harder for predators to predict its motion.\n  4.6 More Classes Three exercises to improve your understanding of classes and interfaces.\n  4.6 MurderBot Review exercises for class design.\n  4.* Advanced \n  4. Test Karel test, based on the review done earlier. Be sure to understand the material from 4.6.\n  4. Robot Drama A skit involving robots making decisions.\n  Karel Intellij How to use IntelliJ IDEA to work with our Karel the Robot configuration.\n  Karel Hacked \n  "
},
{
	"uri": "http://wy-cs.info/intermediate-cs/part-i/ch03/puzzle-opener/",
	"title": "Puzzle Opener",
	"tags": ["opener"],
	"description": "",
	"content": ""
},
{
	"uri": "http://wy-cs.info/intermediate-cs/part-i/ch03/",
	"title": "3. More Interesting Pictures",
	"tags": ["homework"],
	"description": "",
	"content": " Pictures and Color  Quick guide to image variables in Picturing Programs. All of the images from the book online.\n Commands to change words to colors.\n  Homework  3.a, done in two days: pages 1-2 and pages 3-4. 3.b: problems 1-8. (Come in ready to discuss 8 if you cannot do it.)  See assignment sheet for more information.\n"
},
{
	"uri": "http://wy-cs.info/ap-cs/haskell/ch03/ch03-hw1/",
	"title": "Chapter 3 Problem Set",
	"tags": ["haskell", "homework"],
	"description": "",
	"content": "The essentials of the Types and Typeclasses chapter are: writing type signatures for functions, reading string inputs with the Read class, and dealing with Integral to Fractional conversions when they are needed.  You can explicitly say what type a number is by using two colons and the type you want - for example, (5::Int) or (5::Float). Find the types of each of the operations below, or say in English why it does not work. Do not just copy error messages.\n (/) (5::Int) / (10::Int) (5::Int) / (10::Float) (5::Float) / (10::Float)   Write a function to find the average of numbers in a list. This should bring up the difficulty that you cannot divide an integer by an integer(!).\nExamples: avg [10,20] should give 15 or 15.0, and avg [3.5, 4.5] should give 4.0.\n Write a signature and function body for add10Word which reads an integer from a string and adds 10 to it.\nExample: add10Word \u0026quot;15\u0026quot; should produce 25.\n Write a signature and function body for numberInSentence, which takes a number and returns the sentence \u0026ldquo;I have ___ pounds of flour.\u0026rdquo;\nExample: numberInSentence 5.5 reports \u0026ldquo;I have 5.5 pounds of flour.\u0026rdquo;\n Write a signature and function body for doubleDebt which takes a String and puts out a Float. The String contains a floating point number that represents how much money someone owes, and the Float output is twice that much.\nExample: doubleDebt \u0026quot;50.10\u0026quot; produces 100.20.\n Write a signature and function body for sampleStdDev that finds the sample standard deviation of a list of (the right kind of) numbers. Check the type signature for square root (sqrt)!\nPlease do not skip this problem with the excuse that you do not know how to find standard deviation. Look it up or ask someone who knows!\n Possibly Challenging: Write the function median to find the median of a list of items that can be ordered. (Use the type Int, if you prefer.) Assume the list is sorted.\n  We will learn how to sort a list later, but it goes like this:\nimport Data.List result = sort xs"
},
{
	"uri": "http://wy-cs.info/resources/apcs-syllabus--2017-2018/",
	"title": "Syllabus: AP CS",
	"tags": [],
	"description": "",
	"content": " This document gives information specific to the AP Computer Science course. See the all course syllabus information as well.\nAP Review We will do approximately three weeks of AP review before the AP exam. Second semester grades will be significantly impacted by AP test preparation.\nMany people benefit from outside preparation. Start in February. As a rough guide, the Barron\u0026rsquo;s AP Computer Science A text is too easy and the Be Prepared for the AP Computer Science Exam in Java book by Litvin and Litvin is too difficult. I have not read the Princeton Review text.\nIn the last three years Whitney Young\u0026rsquo;s AP CS pass rate has been: 85%, 100%, and 93%, so you will be prepared.\nBig picture calendar for course These dates are tentative, but they should give an idea of the major deadlines in the course.\n Weeks 1\u0026ndash;5: Haskell Week 6: Begin Java and Semester Project. October 23: Quarter 2 project top-down plan due. (No code!) October 27: Quarter 1 exam. (One week before quarter ends.) January 22: Quarter 2 project due. January 26: Quarter 2 exam. (One week before quarter ends.) March 23: Quarter 3 project due for early bonus. (Day before spring break.) March 26\u0026ndash;30: Spring Break. April 6: Quarter 3 project due. April 9: Quarter 3 exam. (Week of quarter end.) This is also part of AP exam review. April 9 \u0026ndash; May 4: AP Test Review. (Four weeks minus two days.) May 7: AP testing begins. May 15 at 12pm: AP Computer Science Test  "
},
{
	"uri": "http://wy-cs.info/intermediate-cs/universe/u-take-turns/",
	"title": "Universe Taking Turns",
	"tags": [],
	"description": "An introduction to taking turns when the universe broadcasts all messages to every client.",
	"content": " Labeled worlds. Give each world a unique identity (a string name or a number). Show the world\u0026rsquo;s identity in the upper left corner. When you hit a key in a world, every world also shows the identity of the world you clicked in.\n Colored worlds. The world you hit a key in turns green. All other worlds turn yellow. Still show each world\u0026rsquo;s identity.\n Active stamping. Add on to your colored worlds program. Hit a key to activate a world. Only one world is active at a time. When you click in the active world, it shows a solid circle. Inactive worlds show an outline circle. (Basic: only one circle at a time, no control over where it appears, disappears when de-/activating. Challenge: show all circles, centered at the location of the click.\n Spinning. Each world has a separate image. Only one image spins at a time. When you hit a key in a window, that world\u0026rsquo;s image starts spinning and the other window(s) stop.\n Chase. Each world has one image that it controls with the mouse. Hitting a key makes the mouse inactive for about one second. (Use a tick handler to reactivate.) I used a colored bar to indicate whether the window is active or not.\n     You cannot send a posn as a message for technical reasons. Reasonable replacements: enhanced posn-util, (define-struct msg (x y)) or use (list x y) for the message.\n "
},
{
	"uri": "http://wy-cs.info/intermediate-cs/ch22a/35-num-digits/",
	"title": "22a. Digits",
	"tags": [],
	"description": "Counting the digits in a number.",
	"content": " number of digits num-digits: whole-number -\u0026gt; number\nReturns how many digits in the number.\nnumber of digits  Use conditional. Base: answer of 1  number of digits (define (num-digits n) (cond [(\u0026lt; n 10) 1] [else ... ])) number of digits  Use conditional. Base: answer of 1 Else: one more than \u0026hellip;  number of digits Trick:\n (quotient number 10) has one fewer digit  "
},
{
	"uri": "http://wy-cs.info/intermediate-cs/ch20/click-circle-questions/",
	"title": "20. Click Circle Questions",
	"tags": [],
	"description": "Brief explanation of how to stop animations and show a win screen.",
	"content": " Main questions about the click circle project (20.6.4):\nStopping an animation    Stop condition How?     user action return (stop-with model) from a handler   model state (stop-when ...) in big-bang    Win screen Question: How do you make a win screen show?\nAnswer: There are three steps:\n Write a win-draw-handler function. Write a should-stop? function. This is a technical annoyance. For now this can do nothing:\n(define (should-stop? model) false) Add a (stop-when should-stop? win-draw-handler) clause to your big-bang.\n  "
},
{
	"uri": "http://wy-cs.info/intermediate-cs/part-i/ch03art/",
	"title": "3. Art with Racket",
	"tags": [],
	"description": "Student art-inspired programming projects.",
	"content": "Click on the period number to see larger images. Clicking on the contact sheet will only show a large contact sheet.\n Period 1   Period 5   Period 7  "
},
{
	"uri": "http://wy-cs.info/ap-cs/jm/ch15/file-divvy/",
	"title": "15. File Divvy",
	"tags": [],
	"description": "Questions about the Divvy trip database.",
	"content": " Get a subset of Divvy bike trip data. Later you may want the Divvy station data as well.\n Find the trip of longest duration. Find the oldest female rider in this dataset.  Tips You do not have to store the data in an ArrayList, but if you want to do that, you should make a class BikeInfo that has all of the information contained on one line in the database. Making 12 separate ArrayLists is lots harder to work with.\nThe Scanner class has a useDelimiter method that can be used to split on things that are not whitespace.\nThe String class has a split method that can be used in a similar way.\nAdvanced Your teacher regularly takes the Divvy to the station right next to school, arriving 7:40-7:50am. See if you can identify any trips in the full dataset.\n"
},
{
	"uri": "http://wy-cs.info/intermediate-cs/ch22b/bubble-wrap/",
	"title": "22b. Bubble Wrap",
	"tags": [],
	"description": "Random size circles all around the screen. Circles disappear when you click on them.",
	"content": "  A bunch of circles of random size and color are placed around the screen. When you click on a circle, it disappears. Only the top circle should disappear if multiple circles are stacked.  Model First, think about one bubble. How will you represent that? You need to keep track of at least:\n center radius color  Next, think about all of the bubbles. How will you represent a bunch of bubbles?\nDrawing It is good to get your draw handler written early, so you can see what is going on. I recommend that you write one function to draw a single bubble on a background, and another function to draw all of the bubbles.\nLogic You need to remove the bubble you click on from the game. I think that is best done in two steps:\n clicked-on-bubble?: bubble posn(click) -\u0026gt; boolean. True if the click is inside the given bubble. remove-clicked: list of bubbles posn(click) -\u0026gt; list of bubbles  "
},
{
	"uri": "http://wy-cs.info/ap-cs/jm/interlude-feb/programming-project/",
	"title": "Programming Project",
	"tags": [],
	"description": "",
	"content": " Briefly: Complete 3-5 problems from ProCom 4 on HackerRank.\nExpectations Five \u0026ldquo;points\u0026rdquo; is an A. You should be working on problems of an appropriate level of difficulty for you. (Don\u0026rsquo;t do five easy problems in one day and then say you are done.)\nDebrief  List the programs that you have completed. For each one:\n Did you have any difficulties? What were they? What was the root cause of one of those difficulties? Did you learn something? What?    Problem-specific comments  A Hexing Situation: You cannot use split() - test cases have extra whitespace in them (not every word is separated by a single space).\n Rebuilding the Rebellion Part Two: Many people forget to handle the \u0026ldquo;No Win\u0026rdquo; situation. Another common problem is to check the main diagonal twice instead of checking both diagonals once.\n  "
},
{
	"uri": "http://wy-cs.info/intermediate-cs/ch22a/40-sum-digits/",
	"title": "22a. Sum Digits",
	"tags": [],
	"description": "Sum the digits in a number.",
	"content": "sum-digits: whole-number -\u0026gt; number\nFind the sum of the digits in a number.\n   n (sum-digits n) simplified     5 5 5   53 5 + 3 8   921 9 + 2 + 1 12   3216 3 + 2 + 1 + 6 12   65536 6 + 5 + 5 + 3 + 6 25    "
},
{
	"uri": "http://wy-cs.info/intermediate-cs/pv-proj/pv-turnin/",
	"title": "PV Turnin",
	"tags": [],
	"description": "How to turn in your project.",
	"content": " Reflection You may hand-write your reflection or place it as a comment at the start of your code.\n What was one specific difficulty you faced? How did you figure it out and fix it? Try to identify one change in your programming process that would help you get stuck less or find a problem faster. What part of the design process is most helpful to you? Explain.  Your reflection should be at least six sentences (1-2 paragraphs).\nTurn in  Email project to me. Include copy-and-pasted code as well as attachment.  "
},
{
	"uri": "http://wy-cs.info/ftc/meet-4/",
	"title": "FTC Meet 4: Qualifiers",
	"tags": [],
	"description": "Chicago league playoffs, state qualifier.",
	"content": "  Location: Amundsen High School at 5110 N. Damen. Time: 7:30am-6:00pm  Schedule 7:30 a.m. - 8:00 a.m. -- Registration 8:00 a.m. - 10:00 a.m. -- Judging and inspections 10:15 a.m. -- Opening ceremonies and drivers’ and coaches’ meeting 10:30 a.m. -- Qualification matches begin 12:30 p.m. -- Break for lunch (½ hour) 1:00 p.m. -- Qualification matches resume 3:30 p.m. -- Alliance selection 4:00 p.m. -- Elimination matches begin 5:30 p.m. -- Closing ceremonies Robophins Specific Notes  8:15am Judging Room C Odd qualifier: ranked 5 in city.  Parking  West parking lot, off Foster, is now available. (Earlier messages stated that it would not be.) That is the best place to park.\n You can also park in the South Lot (enter from Damen) or on Damen Avenue, and enter through the door in the southeast corner of the building (Door #4).\n  General Info Concessions will be available on-site. There will be a variety of snacks available for purchase, and an option to order pizza for lunch.\nImportant reminders:\n Please bring enough safety glasses for your team, and remember to always wear safety glasses in the competition area and in the pits! Access to power will be somewhat limited. Please bring a power strip, and please clearly label your team’s chargers, batteries, and power strip with your team number. Please complete the Robot and Field Self-Inspection Checklists prior to the competition, and refer to the special inspection notes below.  Special Inspection Notes The Robot and Field Inspection team would also like to remind teams of a few frequent issues (if you have questions or concerns about any of these please reply to this email and I will be happy to clarify and/or help). Please complete the self-inspection checklist prior to the day of the competition \u0026ndash; we will be running on a tight schedule and unfortunately will not be able to significantly delay the start of matches to accommodate unprepared teams. If you need help getting your robot ready in advance of the competition, please reply to this email and we will arrange assistance for your team:\n All robots, even those using Modern Robotics Core Power Modules, must have a separate, securely installed, easily accessible, and clearly labeled main power switch Robots must be labeled with team numbers at least 2.5 in tall with stroke width at least 0.5 in (this is especially important at the qualifier, as there will be many more teams in a much larger room and teams will be scouting for their alliance partners). The font “Impact” size about 375 works well for this. Motorola Moto G Play phones (the phones sold this year and last by the FTC storefront) must be updated to at least Android version 6.0.1. Operating system requirements for other phones vary. The Robot Controller and Drivers Station apps both must be updated to at least version 3.3, and both must be the same version. If possible, we recommend updating to the latest version (3.6) or at least 3.5, since stability of the app has improved through the season.  "
},
{
	"uri": "http://wy-cs.info/intermediate-cs/ch21b/pv-review/",
	"title": "21. PV Review",
	"tags": [],
	"description": "Review problems for PV quiz.",
	"content": "Use computer coordinates for this review!\n As a background use (empty-scene 300 200). Graph a point or position with an arrow showing the direction of velocity.\n Point A. (make-pv (make-posn 225 30) (make-posn 25 -10)) Point B. (make-pv (make-posn 50 180) (make-posn -10 20))   Should each point bounce? Explain which wall and why.\n   Point Pos Vel     C (200, 10) (-10, 20)   D ( 0,190) ( -5, 15)   E (180,200) ( 10,-20)    Amaja has an animation that looks good until the ball tries to bounce off the right side. The ball slowly slides up the right side, shaking back and forth. What could be wrong?\n(define (should-bounce-right? w) (\u0026lt;= 300 (posn-x (pv-pos w)))) Helena\u0026rsquo;s program is almost done. The ball bounces correctly off the left, right, and top. However, it ignores the code to bounce off the bottom. What should she do?\n Travis has been written a tick handler to make the ball move and one tick handler to make the ball bounce off each side.\n(define (update-pos model) ...) (define (do-left-wall model) ...) (define (do-right-wall model) ...) (define (do-top-wall model) ...) (define (do-bottom-wall model) ...) What should he do to combine them? How can he make one tick handler to do all five actions?\n  "
},
{
	"uri": "http://wy-cs.info/ap-cs/jm/sem1final/4-final-codingbat/",
	"title": "4. Final - CodingBat",
	"tags": [],
	"description": "Period 4 final programming question.",
	"content": "noTrees. Return a version of the given array where every occurrence of the word \u0026ldquo;tree\u0026rdquo; has been removed. Shift everything else down and place \u0026ldquo;grass\u0026rdquo; at the end of the array.\nExamples:\nnoTrees([\u0026#34;rock\u0026#34;, \u0026#34;tree\u0026#34;, \u0026#34;Grass\u0026#34;, \u0026#34;rock\u0026#34;]) ==\u0026gt; [\u0026#34;rock\u0026#34;, \u0026#34;Grass\u0026#34;, \u0026#34;rock\u0026#34;, \u0026#34;grass\u0026#34;] noTrees([\u0026#34;Tree\u0026#34;, \u0026#34;bush\u0026#34;, \u0026#34;plant\u0026#34;, \u0026#34;house\u0026#34;, \u0026#34;TREE\u0026#34;]) ==\u0026gt; [\u0026#34;bush\u0026#34;, \u0026#34;plant\u0026#34;, \u0026#34;house\u0026#34;, \u0026#34;grass\u0026#34;, \u0026#34;grass\u0026#34;]  You may make a new array or modify the existing one. Match \u0026ldquo;tree\u0026rdquo; in any combination of cases of the letters. Starter code: noTrees.  "
},
{
	"uri": "http://wy-cs.info/intermediate-cs/sem1review/sem-review-4/",
	"title": "I.4 Semester I Review 4",
	"tags": [],
	"description": "Analysis of functions - signatures and check-expects. Structure practice.",
	"content": "Remember to practice writing check-expects for your functions, so you have a way to make progress.\n Analyze the program segment below.\n(define initial \u0026#34;large fluffy bunny\u0026#34;) (define (f model) (+ 1 (string-length model))) (define (g model) (text model 25 \u0026#34;black\u0026#34;)) (define (k model x y e) (string-append model x)) (define (p model w) (substring model 1)) (big-bang initial ...)  Is f suitable for a tick handler? Explain. What could g be used for? Are either k or p suitable handlers? If so, for what? Write a useful, correct check-expect for the function p. Write a useful, correct check-expect for the function k.  The median is the middle number in a list of sorted numbers. Write the function median that works for three numbers.\nmedian: number number number -\u0026gt; number Writing tests is the most important part of this exercise.\n Structures\n Make a structure scn that has fields for a string, a color, and a number.\n Create an example of your structure and put it in a variable.\n Write a function that gets the number out of your structure and adds one to it.\nsincr: scn -\u0026gt; int The sdraw function draws a circle with the given color, using the number for the radius. Unless the string is square, in which case draw a square in the same way.\nsdraw: scn -\u0026gt; image Write a function scolor that makes a new structure with the given color, not changing any of the other fields.\nscolor: scn color(new) -\u0026gt; scn The scat function takes in two structures and combines them by appending the strings and adding the numbers. The color of the result will be the same as the first structure\u0026rsquo;s color.\nscat: scn scn -\u0026gt; scn   "
},
{
	"uri": "http://wy-cs.info/intermediate-cs/ch20/tightrope/",
	"title": "20. Tightrope",
	"tags": [],
	"description": "A square changes color as you balance between two circles.",
	"content": " There are two unmoving blue circles on the screen.\n You can move a square with the mouse.\n Square color is:\n Green if the distance from the square to circle 1 and the distance from the square to circle 2 are within 20 of each other. Red otherwise.   Some people had trouble understanding this description. In a computer-like language:\na = distance from square to circle 1 b = distance from square to circle 2 green if a and b are within 20 of each other Write:\n Model The function square-color: model -\u0026gt; color.  "
},
{
	"uri": "http://wy-cs.info/ap-cs/jm/",
	"title": "Java Methods",
	"tags": [],
	"description": "",
	"content": " We use Java Methods, Second Edition by Litvin and Litvin. While a PDF of the whole book is not available, the author has made available many resources:\n Home page for all textbook resources PowerPoint slides for each chapter. These are quite thorough. Starter code for students.  Note that we have the second edition, which is from 2011 (now out of date). There are probably few changes.\nChapters  1. CS Basics   2. Software Engineering   3. Objects and Classes   6. Data Types   10. Strings   Interlude   12. Arrays   Unit Testing   Semester 1 Final   13. ArrayList   14. Searching and Sorting   Programming Practice   Q3. Review   15. Files and Streams   20. Set and Map   "
},
{
	"uri": "http://wy-cs.info/intermediate-cs/part-i/ch08/number-4/",
	"title": "Number Models 4",
	"tags": [],
	"description": "",
	"content": " How to show a number in an image:\n (number-\u0026gt;string 50) makes \u0026ldquo;50\u0026rdquo; (text \u0026hellip;) wrapped around that makes an image  Example: (text (number-\u0026gt;string 50) FONT-SIZE \u0026quot;purple\u0026quot;) produces an image with the number 50 in FONT-SIZE point purple font.\n Make a dot follow the line y=2x-30 from x=0 to x=100. Repeat over from x=0 once the dot gets to 100.\n Draw a random radius circle (10\u0026lt;=r\u0026lt;=100) on the screen. Show the radius inside the circle.\nWriting check-expects is key to making this work!\n    Make an animation of a point moving along the right-opening parabola x=y^2. The point should hit (0,0), (25,5), (100,10), (225,15), and (400,20) before repeating. The draw handler can be a little tricky too - make sure you test it so you know it works.\n Challenge: can you make the point hit (100,-10), (25,-5), (0,0), (25,5), and (100,10) instead?\n  "
},
{
	"uri": "http://wy-cs.info/ap-cs/karel/ch4a/",
	"title": "Karel 4.1-4.4",
	"tags": [],
	"description": "Very important chapter: Choreographer, Contractor, Strategy, Spy, Observer. Design patterns in Java.",
	"content": "  Monday, October 23, 2017: Read Section 4.1-4.3 and do Exercise 3.5 (DiamondBot) with a Choreographer robot.\n Tuesday October 24, 2017: Section 4.2 review (abstract class, override methods).\n Class: make a robot (team) to create my figure 4.2b ending from the old blog. Then make a robot (team) to pick up my figure 4.2b start. Homework: Read Section 4.4.  What is the function of an interface? What does delegation mean in cs?   Wednesday, October 25, 2017: Section 4.4 (interfaces)\n Class: review box on page 76 (purpose of interface, no methods in an interface) Class: review box on page 79 (references can point anywhere) Class: \u0026ldquo;delegation\u0026rdquo;. Assignment: Forester. The Forester plants trees and bushes. In the robot world, you see a top view of the forest - tall plants are represented by lots of beepers, short plants are represented by few beepers in a pile. Oak trees are tall (7 beepers in a location). Maple trees are medium height (3 beepers), and bushes are only 1 beeper tall but they take up four locations instead of one.  Make a Forester interface that has the doPlanting() method. Implement the Forester interface in OakPlanter, MaplePlanter and BushPlanter. Demonstrate with a short program that plants two oak trees 5 squares apart, and a maple next to a bush.   Thursday, October 26, 2017: Practice for quiz Friday.\n Create two robot classes: SpeedyMover and DropMover.  SpeedyMover moves two steps when told to move one. DropMover drops a beeper and moves when told to move.  Create an interface ArmyCaricature that defines the march() and crawl() methods.  march(): go three steps crawl(): go one step and drop a beeper  Create a DrillSargent class that bosses two ArmyCaricature robots. The drill sargent should have a void bootCamp(ArmyCaricature a, ArmyCaricature b) method that tells a to do three marches and b to do three crawls. Verify that your DrillSargent works by giving it a SpeedyMover and a DropMover.   Quiz 4.1-4.4 on Friday You should be able to demonstrate the following skills from Sections 4.1-4.4.\n Create a new class (including constructor from memory). Instance variables to remember helper robots. Abstract class, then concrete implementation to fill in missing parts. Interface: create and implement. Comparison of abstract class and interface.   Additional Notes  Read: old notes, still good.\n Android programming has an AbstractCursor class that handles many commom behaviors. Notice that some of the methods are not there, like:\nabstract public String[] getColumnNames();  "
},
{
	"uri": "http://wy-cs.info/intermediate-cs/part-i/ch04/",
	"title": "4. Writing Functions",
	"tags": [],
	"description": "",
	"content": "Chapter 4 teaches you how to write and test your own functions. When you are done, you should know the difference between a parameter and an argument, how the stepper evaluates functions, and where names like pic are visible (\u0026ldquo;scope\u0026rdquo;).  Chapter 4 Homework  "
},
{
	"uri": "http://wy-cs.info/ap-cs/haskell/ch04/ch04-summary/",
	"title": "Chapter 4 Summary",
	"tags": [],
	"description": "patterns, guards, where, let, case",
	"content": " patterns  f [] = 0 f (x:xs) = x + f xs  guards  numword x | x \u0026lt; 0 = \u0026#34;Negative\u0026#34; | x == 0 = \u0026#34;Zero\u0026#34; | otherwise = \u0026#34;Positive\u0026#34;  where  h x = constant * x where constant = 100  let  yis65 x = let (parabola = 10 * x * x + 25) in parabola == 65  case  numit value = case (value) of 5 -\u0026gt; \u0026#34;Five\u0026#34; 4 -\u0026gt; \u0026#34;Four\u0026#34; _ -\u0026gt; \u0026#34;Something else\u0026#34;"
},
{
	"uri": "http://wy-cs.info/resources/intermediatecs-syllabus--2017-2018/",
	"title": "Syllabus: Intermediate",
	"tags": [],
	"description": "",
	"content": " This document details the information specific to Intermediate Computer Science. See the all course syllabus information as well.\nMaterials  Notebook - a lightweight paper notebook dedicated to computer science. USB Drive of any size. Picturing Programs book electronic version - downloaded onto flash drive. DrRacket programming environment - installed at home. WeScheme - Online only replacement for DrRacket. Use if you cannot install software. You have to read special instructions to make it work.  "
},
{
	"uri": "http://wy-cs.info/ap-cs/karel/ch4b/",
	"title": "Karel 4.5-4.6",
	"tags": [],
	"description": "Great chapter: Strategy, Spy, Observer. Design patterns in Java.",
	"content": " NeighborTalker Read Section 4.5.\n What is the purpose of the private BeeperPutter neighbor field of a NeighborTalker? Could the neighbor field be null when you run the distributeBeepers() method? Draw a box and arrow diagram showing the different robots that aRobot points to as the main method on the top of page 82 runs. How could you modify the distributeBeepers() method so that the last robot in the line puts their beeper down and moves before the second to last robot in line, etc., so the first robot in line is the last one to put their beeper down and move.  Robot Horde Project Make a \u0026ldquo;Robot Horde\u0026rdquo; where each robot sends a swarm() message to the 0, 1, or 2 robots that it controls.\n StrategyLayer (4.6) (Two days.)\n Does the StrategyLayer robot implement the Strategy interface? Explain in what way your answer is logical.\n Casts\n Clark Kent / Superman analogy Can a cast change an UrRobot into a HarvesterBot? Is a cast useful to change a HarversterBot into an UrRobot? What happens when you cast an UrRobot into something that it is not?  How can you use \u0026ldquo;advanced\u0026rdquo; robot methods in a Strategy?\n Misc: The three-hands method of exchanging two items.\n  "
},
{
	"uri": "http://wy-cs.info/ap-cs/karel/codingbat/",
	"title": "CodingBat Interlude",
	"tags": [],
	"description": "Practice for the fundamentals of coding in Java: logic and loops.",
	"content": " We are studying something easy for the two days at the end of the quarter.\n Make an account on CodingBat.com. Do not use a valuable password.\n Wednesday, November 1:\n Read about logical operations in Java. See below for a quick summary. Do eight problems from Logic-1 or higher.  Thursday, November 2:\n Read about for and while loops . Read about arrays which provide a context for using for. See below for a quick summary. Do eight problems from Arrays-2.   Summary of Logical Operations  if - else if - else and(\u0026amp;\u0026amp;), or (||), not (!)  public boolean someFunction (int n) { boolean answer = false; if ( n \u0026gt; 20 ) { answer = true; } else { answer = ( n \u0026lt; -10); } return answer; } Summary of Looping  arrayname.length finds the length of the array arrayname[index] gets the the value at the given index for (set starting value; test to continue; what to do between steps) { \u0026hellip; }  public int countNines (int[] nums) { int count = 0; for (int k = 0; k \u0026lt; nums.length; k++) { if (nums[k] == 9) { count = count + 1; } } return count; }"
},
{
	"uri": "http://wy-cs.info/ap-cs/karel/ch4b-hw1/",
	"title": "4.6 PrettyBoxBot",
	"tags": [],
	"description": "PrettyBoxBot to practice interfaces",
	"content": "A PrettyBoxBot makes a square box on the screen. In order to let a person easily configure it without learning how to design new robots, the PrettyBoxBot accepts two strategies in its constructor.\n Side laying strategy: controls how long the side is Corner beautifying strategy: controls how many beepers get put on a corner.  Putting lots of beepers on the corners of a box makes it more beautiful in robot-land.\nThe PrettyBoxBot itself should have some abilities that help make the box:\n putAndGo(): Build a single unit of the box wall. makeBox(): Build the entire box.  In the PrettyBoxBot constructor you will want to accept the side laying and corner beautifying strategies and remember them.\nAs usual, there is sample code from our discussion on the class GitHub in the karelCh4.drjava project.\n"
},
{
	"uri": "http://wy-cs.info/ap-cs/karel/ch4b-hw2/",
	"title": "4.6 FishBot",
	"tags": [],
	"description": "A fish robot that alternates between two strategies so it is harder for predators to predict its motion.",
	"content": " Purpose The purpose of this assignment is to motivate the use of Strategies instead of \u0026ldquo;hard-coding\u0026rdquo; individual behavior into an object.\nIntroduction A fish that is startled moves to get away from a predator. If a fish always does the same behavior to escape, it is easy for a predator to predict what will happen and the fish will get eaten. In order to avoid getting eaten, a fish alternates between darting forward and darting to the left.\n DartForward: a Strategy of moving forward three times DartLeft :a Strategy of turning left and moving forward once\n FishBot is a kind of (our) StrategyLayer that remembers two different strategies and alternates betweewn them.\n public void startle() activates the startle reflex, running the current strategy for escape public void swapStrategy() switches between the two strategies that the fish knows    Difficulties  Confusion between StrategyLayer and Strategy.  How are they actually related? Can both be created? (new Strategy() vs new StrategyLayer(...))  What is the relationship between FishBot and StrategyLayer? Too-specific names for things:  iFishBotStrategy for the interface variables of type DartStrategy and DodgeLeftStrategy instead of just Strategy   Some of these difficulties should have come up with the ArmyCaricature, so we need to revisit that!\n"
},
{
	"uri": "http://wy-cs.info/ap-cs/karel/ch4c-classes/",
	"title": "4.6 More Classes",
	"tags": [],
	"description": "Three exercises to improve your understanding of classes and interfaces.",
	"content": " Go South Write a GoFarStrat which makes a BirdBot fly three times.\nWe are not going to write a BirdBot class, but assume it is already written:\npublic class BirdBot extends StrategyLayer { ... public void fly() { ... } } The following code should work:\npublic static void main (String[] args) { GoFarStrat flyFar = new GoFarStrat(); BirdBot robin = new BirdBot(4,1,East,20, flyFar); flyFar.doIt(robin); // could be robin.doStrat() } AndThenStrat The AndThenStrat is a Strategy that combines two strategies by doing one and then the other. See lines 5-6 in the code sample below for its construction and use.\nThe following sample code should cause the robot to step and then turn. The MoveOneStrat is supposed to make the robot move one step. The TurnOneStrat is supposed to mkae the robot turn to the left. You do not need to write either of those strategies; they are just here to illustrate how the AndThenStrat works. 1public static void demoAndThen() { 2 UrRobot r = new UrRobot(4,1,East,20); 3 Strategy step = new MoveOneStrat(); 4 Strategy turn = new TurnOneStrat(); 5 AndThenStrat combine = new AndThenStrat(step, turn); 6 combine.doIt( r ); 7}\nZigStrat We are going to make a strategy that is called ZigStrat. This strategy layers on top of another strategy that we are given and does three things:\n turnLeft() (the behavior from the given strategy) turnRight()  The following sample code should cause the robot to turn left, move three, and turn right:\npublic static void main (String[] args) { Strategy th = new MoveThreeStrat(); ZigStrat z = new ZigStrat(th); BetterBot bb = new BetterBot(4,1,East,20); z.doIt(bb); } Background and Additional Information The MoveThreeStrat extends the basic Strategy interface from the book:\npublic interface Strategy { public void doIt(UrRobot r); } We will use a robot called BetterBot that has a turnRight() method. Do not write your own turnRight.\nExtensions Check to make sure your solution is still good when you add a public void skip() method to BetterBot that causes it to move two spaces forward. Make ZigStrat turn left, skip, do the other work, turn right, and skip again.\n"
},
{
	"uri": "http://wy-cs.info/ap-cs/karel/ch4d-review/",
	"title": "4.6 MurderBot",
	"tags": [],
	"description": "Review exercises for class design.",
	"content": " MurderBot  A MurderBot is a kind of StrategyLayer with two additional abilities:\n public void stab(): place two beepers public void flee(): move one step  The KillerStrategy is a kind of Strategy that makes the robot it controls stab the first time the strategy is invoked (via doStrat, which will call doIt). Every subsequent time the robot is told to doStrat(), it should flee.\n Make sure the same doStrat() call causes one stab or one flee each time.\n Test your MurderBot with 8 calls to doStrat().\n Challenge yourself: this can be done without variables (except what is built into the StrategyLayer).\n Advanced: use the techniques the Spy in Section 4.8 to cause the stab action to find another robot on the same corner as the MurderBot and turn it off.\n  ViciousMurderBot Create a kind of MurderBot that places six beepers when it is told to stab, instead of just two.\n"
},
{
	"uri": "http://wy-cs.info/intermediate-cs/universe/u-quiz-1/",
	"title": "Universe Quiz 1",
	"tags": [],
	"description": "Quiz on week one of the Universe teachpack.",
	"content": " Every window has a different list of numbers at the start. Show the sum of the list of numbers and the total, like this:\n20 = 8 + 7 + 5 When a person hits a number key from the top of the keyboard (\u0026quot;1\u0026quot;,\u0026quot;2\u0026quot;,\u0026hellip;,\u0026quot;9\u0026quot;, \u0026quot;0\u0026quot;), that number is added to the right hand side of the sum, and the correct new total is displayed. For example, when the \u0026ldquo;4\u0026rdquo; key is hit, the display should show:\n24 = 8 + 7 + 5 + 4 Advice  Make sure the server is running. Correct code will do nothing without a server.  Challenges  Allow the entry of multi-digit numbers which are then sent by hitting space.  "
},
{
	"uri": "http://wy-cs.info/intermediate-cs/ch22a/50-fibsum/",
	"title": "22a. Fibsum",
	"tags": [],
	"description": "Sum of Fibonacci numbers.",
	"content": " fibsum (fibsum n): Sum of Fibonacci numbers 0 through n.\n   n (fibsum n) simplified     0 1 1   1 1+1 2   2 1+1+2 4   3 1+1+2+3 7   4 1+1+2+3+5 12   5 1+1+2+3+5+8 20    "
},
{
	"uri": "http://wy-cs.info/ftc/meet-state/",
	"title": "FTC Meet 5: State",
	"tags": [],
	"description": "",
	"content": "We qualified for the 2018 FTC State Championships as the 3rd place Inspire Award winner from the Chicago League Qualifier held February 10, 2018 at Amundsen High School.\n FTC State Info Page Friday, Feb. 23\n Notice: Friday evening activities!! Arrive by 6:30pm for judging and robot inspections. Finished by 9:00pm. Schedule is not published as of 2018-02-11. Check back later for more information.  Saturday Feb. 24\n All day event, like FLL fundraiser. Arrival target: 7:45am Expected departure: 6:30pm   Team issues to address\n Update roster including parent contact information. Send home paper information sheet. Who is going? Parents? Who can drive/carpool? Interest in staying in a hotel? Cost: about $80/night each room.   "
},
{
	"uri": "http://wy-cs.info/intermediate-cs/sem1review/sem-review-5/",
	"title": "I.5 Semester I Review 5",
	"tags": [],
	"description": "The drifter animation that takes little or big steps while moving.",
	"content": " Drifter Drifter. A circle moves around inside a rectangle. There are two different modes of motion: small steps (activated by \u0026ldquo;s\u0026rdquo;) and big steps (activated by \u0026ldquo;b\u0026rdquo;). The arrows let you move the circle.\nExample: s left left moves two small steps left, then b up right up takes three big steps (up, right, and up in that order).\nExtras: Lite Review Questions  Take a posn and a color. Give a new color that has:\n green = same as the original color red = original red plus x value of posn blue = original blue minus y value of posn   Math-er: takes in three numbers code, a, and b, puts out one number:\n when code is 1, put out the sum of a and b when code is 2, put out the positive difference between a and b when code is any other number multiply a and b for the answer    "
},
{
	"uri": "http://wy-cs.info/intermediate-cs/ch20/map-image/",
	"title": "20. Map Image",
	"tags": [],
	"description": "Changing the colors in a picture, pixel by pixel.",
	"content": " The map-image command runs a function on every pixel of an image. See the map-image documentation for the official info.\nExercises for map-image  blue-only: Keep only the blue, removing red and green. black-white: Turn an image to black and white. You will need to decide how to set the threshold. grayscale: Turn an image to grayscale. green-to-white: Change only green pixels to white.  Color There are several logical ways of combining the red, green, and blue components to get one number. The most common is averaging, but it is not the only way.\n Average the numbers. Use the maximum of the numbers. Use the minimum of the numbers. (?!) Other unusual math methods like the geometric mean.  Extras Make the function color-distance: color-\u0026gt;color, which measures the distance between two colors in the same way that distance measures the distance between two posns.\nThe formula for color distance would be:\n(square root of (r1-r2)^2 + (g1-g2)^2 + (b1-b2)^2) Your color-distance function can be used to change colors near green to white, so you don\u0026rsquo;t have to have perfect green to see it work.\n"
},
{
	"uri": "http://wy-cs.info/ap-cs/karel/ch4b-adv/",
	"title": "4.* Advanced",
	"tags": [],
	"description": "",
	"content": " Undoing Page 100, exercise 12 - the robot that has the undo command. I used the idea of a Decorator strategy.\nSimultaneous Action Chapter 8 in the text shows how to make more than one robot act at the same time. See the MultiThreadBot on the class GitHub.\nA brief summary is:\n World.setupThread(robot) prepares the robot to act in its own thread.\n World.startThreads() calls the run() method for every robot that is set up as threading using the command above.\n  "
},
{
	"uri": "http://wy-cs.info/intermediate-cs/part-i/ch08/number-review/",
	"title": "Number Model Review",
	"tags": [],
	"description": "A summary of the key points of Chapters 7-8. Preparation for a test.",
	"content": " Things to know:\n Animation following the graph of an equation:\n Computer coordinates People coordinates  Repetition using remainder.\n Max/min to keep values large/small.\n Randomness\n Range of random numbers (e.g., 10\u0026lt;=x\u0026lt;=50). Write and test a non-random function first.  Write checks for a function that you do not yet know how to write.\n  Terms:\n Computer coordinates: (0,0) in the upper left, positive y going down. People coordinates: (0,0) in the center, positive y going up.  Sample code:\n People coordinates demo  Review Problems  Make a sunset: a half circle.\n shrinks in radius changes color from red(ish) to black as the sun sets. (Advanced: yellow to magenta.)  Make a point that follows the graph of the equation y=((x-50)/10)^2\n Use \u0026ldquo;people coordinates\u0026rdquo;. Move from x=0 to x=150. Repeats the path from x=0 to x=150 over and over. Hit a key make the point go to x=0 (and start moving). Move the mouse to make the point move. (The point should seem to move faster when you move the mouse.)  (Some people didn\u0026rsquo;t like this one\u0026hellip; feel free to skip.) Make a line that you can move up and down with the mouse.\n Straight line through x=0, y=70 Passes through the point where the mouse is sitting.  Make a rectangle that is three times as wide as it is tall.\n Height is determined by y-coordinate of the mouse. Height decreases 5 units every time you hit a key. Height cannot go below 20 units using key. Height cannot go above 150 units using mouse. You choose the color. (Advanced: color of grey depends on y-coordinate.)   "
},
{
	"uri": "http://wy-cs.info/intermediate-cs/ch22b/list-exercises-3/",
	"title": "22b. List Exercises 3",
	"tags": [],
	"description": "Randomly generate points on a parabola and graph them in people coordinates.",
	"content": "MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']], displayMath: [['$$','$$'], ['\\\\[','\\\\]']] }});   Note: This page uses MathJax to show fancy formulas.\n random-gen: number(N) -\u0026gt; list of numbers. Generate N random numbers, each one in the interval $-150 \u0026lt;= x \u0026lt;= 150$. Example (random so numbers will be different each time):\n(random-gen 5) =\u0026gt; (list -75 100 -30 50 21) parabola-it: list of numbers -\u0026gt; list of posn. Use the numbers as the x-coordinates of function\n\\[ f(x) = 0.01 * x^2 - 50 \\]\n(parabola-it (list 5 10)) =\u0026gt; (list (make-posn 5 -49.75) (make-posn 10 -49)) people-graph: list of posn -\u0026gt; image. Place the posns in people coordinates on a 300x200 rectangle with origin at the center.\n   A quick check to make sure everything is in order is to run all of the functions together:\n(people-graph (parabola-it (random-gen 50)))"
},
{
	"uri": "http://wy-cs.info/ap-cs/karel/ch4e-test/",
	"title": "4. Test",
	"tags": [],
	"description": "Karel test, based on the review done earlier. Be sure to understand the material from 4.6.",
	"content": " Karel Chapter 4 Test You may not use any resource materials for this test.\nPartners New laws have been passed and now robots can get married. A robot who wants to get married must implement the Partner interface. The Partner interface consists of a public Partner getSpouse() method as well as a public void setSpouse(Partner x) and a public boolean isAvailable() method. When robots are delivered from the factory they do not have a partner.\n Write the Partner interface.\n getSpouse: return the current spouse setSpouse: make the current spouse be the given robot isAvailable: false if the Partner has a spouse  Create a LBot that implements the Partner interface. Example test code:\n  public static void main (String[] args) { LBot sally = new LBot(4,2,East,10); LBot harry = new LBot(5,2,East,4); sally.setSpouse(harry); if (sally.getSpouse() != harry) { System.err.println(\u0026#34;Sally just married Harry. What\u0026#39;s going on?\u0026#34;); } if (sally.isAvailable()) { System.err.println(\u0026#34;Sally should not still be available!\u0026#34;); } } Marriage  The JusticeOfThePeaceBot can marry robots. The function is public boolean marry(Partner a, Partner b).  Write this function. Only marry if both robots are available. If either robot is unavailable, do not marry them! Return true if the partners get married, false if the marriage fails.   public static void testMarry() { LBot sally = new LBot(4,2,East,10); LBot harry = new LBot(5,2,East,4); JusticeOfThePeaceBot judge = new JusticeOfThePeaceBot(1,1,East,0); boolean gotMarried = judge.marry(sally,harry); if ( ! gotMarried || sally.getSpouse() != harry || harry.getSpouse() != sally ) { System.err.println(\u0026#34;they did not get married!?\u0026#34;); } } Relationships Do one of the following:\n (Know 4.8) The FindRelationship strategy is: move forward one step, if there is a robot there and it is available, change to NoStrategy, otherwise continue looking.\n (No 4.8) The Courting strategy is created by Strategy s = new Courting(Partner x). The strategy checks to see if the partner is available, and if so it puts a beeper down. Write the Courting strategy.\n  public static void testCourt() { LBot sally = new LBot(4,2,East,10); LBot harry = new LBot(5,2,East,4); Courting c = new Courting(sally); c.doIt(harry); // harry should place a beeper  sally.setSpouse(sally); // married herself to make harry go away  c.doIt(harry); // harry should do nothing }"
},
{
	"uri": "http://wy-cs.info/ap-cs/karel/ch4f-project/",
	"title": "4. Robot Drama",
	"tags": [],
	"description": "A skit involving robots making decisions.",
	"content": " You are going to make a play in which robots interact.\nDocumentation:\n Karel the Robot (all) Robot UrRobot Hacked Karel the Robot  Assignment in Brief Assignment Elements  One robot interacts with another robot. You create a new interface or abstract class for use. Robots interact in a non-formulaic way. Interesting plot line (please!). It\u0026rsquo;s supposed to be fun.  Assignment Timeline  Friday: Outline of the action which will happen. (Check in.) Tuesday: You should have at least 3 classes/interfaces written. (Check in.) Tuesday after Thanksgiving: project due.  SchoolBot abstract class We decided that every robot in school will have four basic functions.\nboolean isStudent(); boolean isTeacher(); boolean isHelpful(); Strategy getHelp(); Robots can be students or teachers. If a robot is helpful, then you can get a Strategy from it. (The idea is that the Strategy will get you help when you \u0026ldquo;doIt\u0026rdquo;.)\nStudentBot looks for TeacherBot To interact with other robots, I suggest using:\n the enhanced Robot class the neighbors() function  Robot vs UrRobot Use the Robot class instead of UrRobot. This lets your robot detect some things in its environment. For example, nextToARobot() returns true if there is at least one other robot with the same coordinates. Links to the Robot documentation are at the top of this page.\nneighbors The myRobot.neighbors() function returns an Enumeration. An Enumeration is an object that is basically a list of items. There is a nextElement() function which gives you the next item in the list. (You start before the first item.) There is a hasMoreElements() which returns true if there is another element you can get.\nIn order to use Enumeration you must include import java.util.* at the start of your document.\n Note: Karel the Robot is an old program and Enumeration is an old interface. New programs use an Iterator instead.\n"
},
{
	"uri": "http://wy-cs.info/intermediate-cs/universe/u-quiz-2/",
	"title": "Universe Quiz 2",
	"tags": [],
	"description": "Quiz on taking turns.",
	"content": "  In each window:\n e makes that window count down \u0026ldquo;exclusively\u0026rdquo;, stopping any others from counting g makes that window count down without affecting any other window s stops all windows from counting down r resets that window to its original count  "
},
{
	"uri": "http://wy-cs.info/intermediate-cs/ch22b/list-exercises-4-q/",
	"title": "22b. List Exercises 4 Quiz",
	"tags": [],
	"description": "Quiz on lists.",
	"content": " count-down-odd: number(start) number(end) -\u0026gt; list of numbers. Generate a list of all of the odd numbers from end down to start (inclusive).\n(count-down-odd 5 10) =\u0026gt; (list 9 7 5) (count-down-odd 5 5) =\u0026gt; (list 5) dinosaur: list of numbers -\u0026gt; list of strings. Change a list of numbers, all of which will be between 0 and 7 inclusive, into a list of the corresponding letters from the word dinosaur.\n(dinosaur (list 4 5 0)) =\u0026gt; (list \u0026#34;s\u0026#34; \u0026#34;a\u0026#34; \u0026#34;d\u0026#34;) shaper: list of numbers -\u0026gt; image. Choose an image based on the number (1=triangle, 2=square, 3=circle; pick colors and sizes you like). Randomly place the image on a 400x300 gray rectangle.\nAdvanced bonus: the list of numbers comes in pairs - the first number selects the shape and the second number selects its size.\n(shaper (list 1 50 3 20))  The call above would place a triangle of side length 50 and a circle of radius 20.\n  "
},
{
	"uri": "http://wy-cs.info/intermediate-cs/ch22a/60-more-rec/",
	"title": "22a. More Recursion",
	"tags": [],
	"description": "Many more recursion practice problems.",
	"content": " sum-cubes: number(n) -\u0026gt; number. Finds the sum of the first n perfect cubes.\n vblock: number(n) image(img) -\u0026gt; image. Makes a vertical stack of n copies of img.\n hblock: number(n) image(img) -\u0026gt; image. Make a horizontal stack of n copies of img.\n grid: number(rows) number(columns) image -\u0026gt; image. Make a grid that is columns wide and rows tall of the image repeated.\n add-sqrt: number(start) number(end) -\u0026gt; number. Add up (sqrt n) for every integer n with start \u0026lt;= n \u0026lt;= end If no numbers fit this description, the sum should be zero.\nExample: when start=4 and end=5, the answer is (+ (sqrt 4) (sqrt 5)), which is about 4.236.\n(check-expect (add-sqrt 4 3) 0) (check-expect (add-sqrt 4 4) 2) (check-within (add-sqrt 4 5) 4.23 0.01) (check-within (add-sqrt 4 8) 12.15 0.01) lots-of-hyphens: string(word) -\u0026gt; string. Insert a hyphen after every letter in the word.\n(lots-of-hyphens \u0026#34;grape\u0026#34;) ==\u0026gt; \u0026#34;g-r-a-p-e-\u0026#34; Extra: get \u0026quot;g-r-a-p-e\u0026quot; instead.\n ten-circle: number(start) number(end) -\u0026gt; image. Produces concentric circles starting at radius start and drawing every 10 units until the radius is at least end. Assume start \u0026lt; end.\n   "
},
{
	"uri": "http://wy-cs.info/intermediate-cs/sem1review/sem-review-6/",
	"title": "I.6 Semester I Review 6",
	"tags": [],
	"description": "Random numbers. Gas gauge. Graphing in people coordinates.",
	"content": " What does it do? Write check-expects.\n The double-circle-img function (abbeviate dci):\n(define (double-circle-image img) (image-width (beside (circle 40 \u0026#34;solid\u0026#34; \u0026#34;blue) img (circle 40 \u0026#34;solid\u0026#34; \u0026#34;blue)))) Write and test a function r2d that returns a random two digit number. There is a 40% chance of the number beginning with a 2 and a 60% chance of it beginning with a 1. The ones digit should be random.\n Gas gauge. You are making a text based gas gauge function.\ngas-gauge: number -\u0026gt; string  The readout result will be 16 X\u0026rsquo;s when the tank is full, and then should O\u0026rsquo;s for the part that is empty. For example, half full is \u0026quot;XXXXXXXXOOOOOOOO\u0026quot;. The gas tank can hold a maximum of 12 gallons. When the tank is over half full, round the result, so 96% reads full. When the tank is less than half full, always round down to avoid suddenly running out of gas. (So 6% reads empty.)  Graphing. You are making an animation where a red circle follows the people-coordinate graph of the function\ny = 1/600 * (x-200) * (x+200)  Graphing window is 500x300. Both x and y axes are visible. People-coordinate origin is (250,150) in computer coordinates. Positive y-axis for the graph is up. As you move the mouse, the red point shows on the graph is directly above/below your mouse.   "
},
{
	"uri": "http://wy-cs.info/intermediate-cs/ch20/color-enhancing/",
	"title": "20. Color Enhancing",
	"tags": [],
	"description": "One exercise working with color.",
	"content": "Write a function that takes a color and does the following:\n cut the amount of red in half leave green the same double the amount of blue  Start using the design process - write a signature, then examples showing how each number changes. What possibly troublesome cases should appear in your examples?\n"
},
{
	"uri": "http://wy-cs.info/ap-cs/jm/ch06/",
	"title": "6. Data Types",
	"tags": [],
	"description": "",
	"content": " We did a whirlwind tour of Chapter 5 and 6\nChapter 5 Read Section 5.3 - reserved words. Look at Figure 5-1 on page 111 and do not use those words as variable names in your program. Especially try!\nInterested in mastering all of Java? Look up the unusual keywords:\n native transient synchroniszed assert strictfp  Chapter 6 Skim Chapter 6:\n 6.3: Declaring fields, including the use of final for constant instance variables. Constants are conventionally written in UPPERCASE. 6.4: The Table 6-1 on page 133 shows the size in bytes of each of the built-in types, as well as their range. 6.5: How do you get \u0026quot; inside a string? How about \\? 6.6: The section on scope is too brief, but the PowerPoint has good examples.  Read the code below and decide how new Demo(8) will print out?\npublic class Demo { private int num = 1; public Demo(int n) { int num = n; } public String toString { return \u0026#34;Demo: \u0026#34;+num; } } Chapter 6 exercises  Exercises: 3, 4, 6, 7, 9, 11. Programming: 13.  "
},
{
	"uri": "http://wy-cs.info/intermediate-cs/part-i/ch06/",
	"title": "6. Animations I",
	"tags": [],
	"description": "Big-bang for animations. Essential information and walkthroughs.",
	"content": " Essentials These essentials are on page 100 (PDF page 111) or page 138 (PDF page 149). There is a detailed checklist on page 105 (PDF page 116). Use it! You should memorize them.\n model: What the computer remembers.\n draw-handler: model -\u0026gt; image: Draw the model on the screen; adds non-moving parts to the image. (on-draw)\n tick-handler: model -\u0026gt; model: Update the model as time passes. (on-tick)\n key-handler: model key -\u0026gt; model: Update the model when a key is hit. (on-key)\n mouse-handler: model x y event -\u0026gt; model: Update the model when the mouse is moved or clicked. The inputs x and y are numbers, the event is a string. (on-mouse)\n  Design Process When designing every function, these are the steps you should follow:\n Signature Purpose Example Function \u0026mdash; write it Test \u0026mdash; check-expect  Reference: page 70 (PDF page 81) has a longer version of the same list.\nF.A.Q.  Q: Why do you write \u0026ldquo;model\u0026rdquo; when the model is just an image?\nA: Next chapter our models will be numbers, and soon after that our models will be sentences. If you memorize \u0026ldquo;model\u0026rdquo; as the type, you don\u0026rsquo;t need to memorize a new signature every chapter.\n  Topics  Intro to Animations   Animations Outline   Animation Examples   Animation Portfolio   Animation Project   Daily Animations   "
},
{
	"uri": "http://wy-cs.info/ap-cs/haskell/ch06/",
	"title": "6. Higher Order Functions",
	"tags": [],
	"description": "",
	"content": "This is a fun chapter to read, but as a class we are done after Chapter 5 (for now).\n Chapter 6 Reading Guide   "
},
{
	"uri": "http://wy-cs.info/resources/grading-scale/",
	"title": "Grade Weights",
	"tags": [],
	"description": "",
	"content": " The most common question people have is how grades are computed.\nGrading weights and scale    Percent Category     20 Final Exam/Project (Quarterly)   40 Tests and Quizzes (individual)   20 Projects   20 Participation    We use the standard Whitney Young grading scale (90+ A, 80+ B, 70+ C, 60+ D, below 60 F).\nClass participation will be four points per day. You must be present and engaged in the class activities for the entire class to earn all of the points.\nExceptional circumstances Please contact your teacher if you have a very unusual circumstance (extended illness, international competition, etc.). Ordinary events causing you to miss a day or two of school are not in that category.\n"
},
{
	"uri": "http://wy-cs.info/resources/academic-integrity/",
	"title": "Academic Integrity",
	"tags": [],
	"description": "",
	"content": "Being honest and honorable regarding one’s academic integrity is essential in all of your classes.\nStudents are expected to adhere to the following honor code regarding all of their work in this class.\n “I have neither given nor received improper aid on this test/project.”   “Improper aid” includes, but is not limited to:\n copying another student’s work allowing another student to copy your work sharing the problems given on a test to a student who has not taken the test copying work from any online or electronic resource without citation chatting or texting with another student during a test in which computer use is allowed  On a project (not test), it is acceptable to give suggestions to a student who knows less than you do.\n The student who is giving help may read the code of the student seeking help. The student who is giving help may not type (or write) any code.  Penalties when a student is caught cheating in this class may include:\n A zero on the assessment Final grade being lowered a letter Expulsion from National Honor Society (NHS or NJHS) Denial of a future application to National Honor Society (NHS or NJHS) Negatively affecting scholarships and post-high school programs for which you have applied  "
},
{
	"uri": "http://wy-cs.info/intermediate-cs/universe/u-slapjack/",
	"title": "Universe Slapjack",
	"tags": [],
	"description": "Once the screen shows green, hit a key fast and get a point.",
	"content": " A bunch of players connect to the server. (One player per window.) The screen is yellow for a random amount of time (say 1-10 seconds). When the screen turns green, the first window to hit a key gets a point. The others are locked out until the next time the screen turns green.\n Show points on screen. Any key hit in a window scores for that window. Only one point per green screen. No points can be earned when the screen is yellow.  Planning  Model Message(s) What will happen when the message is received?  Images The grey background and the line are not part of the animation; they just separate the active worlds.\n  Ready to score    Waiting, cannot score   Hints  Show the time remaining until someone can score again. (The color gray is unobtrusive.)  "
},
{
	"uri": "http://wy-cs.info/intermediate-cs/ch22a/70-rec-helpers/",
	"title": "22a. Recursive Helpers",
	"tags": [],
	"description": "Exercises involving recursive functions with helper functions.",
	"content": " Image Theory  big-bullseye: number(n) -\u0026gt; image. Draw n concentric circles, alternating color beginning with black on the inside. Begin with a radius of 10 and increase the radius by 10 each successive circle.\n sier-triangle: number(n) number(size) -\u0026gt; image. Make a Sierpinski triangle with n stages in the pattern and a side length of size. Do this by dividing the size in two when you make a smaller triangle, and arrange those triangles themselves in a triangle (see images).\n   (Remaining content moved to a later helper function page.)\n"
},
{
	"uri": "http://wy-cs.info/intermediate-cs/sem1final/7-final-exam/",
	"title": "7. Final Exam",
	"tags": [],
	"description": "Period 7 final exam.",
	"content": " This is the final exam for Intermediate Computer Science, Semester I, 2017-2018. Except as noted below, you may not use materials previously written by you or anyone else.\nThere are two sections: written (1\u0026frasl;3) and programming (2\u0026frasl;3). Before you use a computer, you must turn in your answers to the written questions.\nWrite all of your solutions on a separate sheet of paper.\nWritten Questions (30 points)\nIn the written portion, you may not consult any sources. Suggested time: 30 minutes.\n (10 pts) A function ch-col takes in a color and changes red by a random amount in the [-15,15] interval, and changes blue by twice that same random amount.\n Write a signature for the ch-col function. Explain a method of testing the ch-col function. (That is, how do you go about adding testing to this situation?)  (10 pts) The data definition for the game struct is below.\n; STRUCT game: t1=number, t2=number, poss=number ; purpose: remember points for team 1 and team 2, ; and which team has possession of the ball (1 or 2) Write the simple-score: game -\u0026gt; game function that records a two point score for the team that has possession (which is always 1 or 2).\n (10 pts) An animation uses the game struct from the previous question as a model. What could you add to your big-bang to help you find the source of errors in your mouse handler like: \u0026ldquo;game-t1: expected a game, given 12\u0026rdquo;? Explain briefly.\n (10 pts) Meg is writing a program. She is part way done, and now wants to finish the design and test it.\n(define (f x y z) (* x y))  Write a signature. Write one good test for this function. Why might a function have a useless parameter like that?    Programming Questions (60 points: do both)\nIn the programming portion, you may use the book Picturing Programs, the Racket Help Desk, your posn-util.rkt file, and the class blog.\nYour work will be evaluated on the basis of correctness and how well it demonstrates your understanding of the design process.\nSuggested time: 60 minutes.\n Grapher. (30 pts) The equation x=130*sqrt(1-(y/120)^2) is half of an ellipse when the y-coordinates range from -120 to 120. When the mouse is clicked, jump to the point on the graph with the same y-coordinate as the mouse.\n  Graph using people coordinates in the formula. Display in a 450x220 window. Origin is (225,110) in computer coordinates.  Red light, green light. (30 pts) A light (circle on the screen) is always either red or green. It changes color randomly every 0.5 seconds. The player is any small image on the screen.\n Clicking when the light is green moves your player 50 pixels toward the top of the screen. Clicking when the light is red moves your player back to the bottom of the screen.   "
},
{
	"uri": "http://wy-cs.info/intermediate-cs/sem1review/sem-review-7/",
	"title": "I.7 Semester I Review 7",
	"tags": [],
	"description": "Additional review exercises.",
	"content": " This page contains optional additional review exercises.\nBasic Spanish We will write a function to conjugate regular verbs \u0026ldquo;-ar\u0026rdquo; and \u0026ldquo;-er\u0026rdquo; verbs according to the following chart. Use the ending letters to decide how to categorize a given verb. We will only consider the present and past tense (preterit) of the verbs.\n   Verb Subject Past? Result is base + Example (\u0026ldquo;andar\u0026rdquo;/\u0026ldquo;correr\u0026rdquo;)     -ar yo false -o ando   -ar yo true -é andé   -ar tu false -as andas   -ar tu true -aste andaste   -er yo false -o corro   -er yo true -é corré   -er tu false -as corres   -er tu true -iste corriste    Example:\n(define past-tense? true) (check-expect (conjugate \u0026#34;correr\u0026#34; \u0026#34;tu\u0026#34; past-tense?) \u0026#34;corriste\u0026#34;) Note: ignore accents.\nToo much? Try the simplified, present tense only function:\n   Verb Subject Result is base + Example (\u0026ldquo;andar\u0026rdquo;/\u0026ldquo;correr\u0026rdquo;)     -ar yo -o ando   -ar tu -as andas   -er yo -o corro   -er tu -as corres    Placed objects An image-posn is an image together with a posn.\n draw-it: ip image(background) -\u0026gt; image teleport: ip(shape1) ip(shape2) -\u0026gt; ip(new-shape1): Produce a new ip whose image is the same as shape1 but whose position is the same as shape2. This has the effect of moving shape1 on top of shape2. Make an animation that remembers two images with their positions. When you hit the \u0026ldquo;t\u0026rdquo; key, the first image teleports to the second image. When you click the mouse, the first image jumps to the mouse\u0026rsquo;s position. The second image slowly moves left and up from its original position, maybe 6 pixels every 0.5 seconds.   "
},
{
	"uri": "http://wy-cs.info/intermediate-cs/ch20/ch20-review/",
	"title": "20. Review",
	"tags": [],
	"description": "Review questions on posn and color.",
	"content": "Write checks and follow the design process as you write these functions.\n Move to parabola. Input any point, output a point on the graph of y=x^2. Find the output point by moving vertically up or down from the input point until you reach the graph of y=x^2.\nto-parabola: posn(initial) -\u0026gt; posn If you have time, make an animation that shows a gray circle where the mouse is and then connects that via a gray line to a blue circle on the parabola. You can use my 400x400 parabola image to see the whole parabola. (Read the code I used to make the parabola if you want.)\nIf you want to see an upward facing parabola in people coordinates, you should use the formula below:\n(define (f x) (+ 200 (* -1/200 (- x 200) (- x 200)))) Input a color, output a new color.\nmix-color: color -\u0026gt; color  output red is twice the input amount of green output green is the average of the input red, green, and blue output blue is 50 units less than half of the red input  Hot-Cold. Take in a posn and output a color. The color will depend on the distance of the point from (100,200).\n distance \u0026lt; 100: pure red distance \u0026gt; 355: pure yellow in between: red is 255 minus distance, green is distance minus 100, blue is 0   hot-cold: posn -\u0026gt; color  "
},
{
	"uri": "http://wy-cs.info/intermediate-cs/part-i/ch07/",
	"title": "7. Numbers",
	"tags": [],
	"description": "",
	"content": "We learn to do math with numbers. Essential summary  Basic arithmetic\n(+ 5 3) (/ 13 7) ; thirteen divided by seven (* 11 2) (- 9 1) ; nine minus one (- 8) (quotient 21912 7) (remainder 21912 7) Exponents, square root, squaring:\n(expt 1.01 95) ; 1.01 to the 95 power is about 2.57 (sqrt 9) ; square root of 9 is three (sqr 1241) ; when you square 1241 you get 1540081 Inexact answers, checking with tolerance\n\u0026gt; (sqrt 5) ; about 2.236 #i2.23606797749979 The #i at the start of #i2.236... means that the number is an \u0026ldquo;inexact\u0026rdquo; decimal. You should never use check-expect with inexact numbers, because the inexact results can be different on different computers! Instead, use check-within.\n(check-within (sqrt 5) 2.236 0.001) Special numbers: both pi is built in. Your tests should still pass if you use either the buit in value of pi or 3.1415.\n\u0026gt; pi #i3.141592653589793 Maximum, minimum, absolute value\n(max 0 -4) ; ==\u0026gt; 0 (min 255 300) ; ==\u0026gt; 255 (abs -10) ; ==\u0026gt; 10 Getting rid of fractions. The best generic method to use is real-\u0026gt;int. Otherwise there are specific functions that will round traditionally, round up (ceiling), and round down (floor).\n(real-\u0026gt;int 0.5) (real-\u0026gt;int 1.5) (real-\u0026gt;int 2.5) (ceiling 1.2) (floor 1.7) (round 1.6)  Further Information  More Exercises 4 \n  Exercises 3 \n  Max and min slides Slideshow of exercises to learn max, min, abs, and random.\n  Randomness Making random numbers. Testing functions that use random numbers.\n  Exercises 2 Exercises working with number functions.\n  Exercises 1 Exercises.\n "
},
{
	"uri": "http://wy-cs.info/intermediate-cs/universe/u-mistakes/",
	"title": "Universe Mistakes",
	"tags": [],
	"description": "A list of common mistakes made when writing universe animations.",
	"content": "  A package must have the entire model as its first argument. You can\u0026rsquo;t put part of the model in the first argument and another part in the second argument (where the message goes).\n Do not write recursive functions that take a model as an input. It is a bad idea. Your code gets more complicated and there is no benefit. Instead, write a helper function that takes in the list part of the model (along with any other needed information).\n  Advice  Send only the minimum amount of information that needs to be sent.\n Split actions between local key/mouse/tick handlers and the receive handler.\n changes affecting only one world\u0026rsquo;s model should be done in a key or mouse handler (or the first argument of make-package)\n changes in every world\u0026rsquo;s model should be done in the receive handler\n   "
},
{
	"uri": "http://wy-cs.info/intermediate-cs/ch22a/80-rec-practice-q/",
	"title": "22a. Recursion Quiz Practice",
	"tags": [],
	"description": "Quiz practice: hawaiian-earring, double-ss, math-mess.",
	"content": "Use define/contract for each function.\n hawaiian-earring: number(stage) number(radius) -\u0026gt; image. Create stage circles with each successive circle 80% of the radius of the previous one.\n (hawaiian-earring 10 80)    double-ss: string -\u0026gt; string. Double each s appearing in the string.\n(check-expect (double-ss \u0026#34;The snake was silent.\u0026#34;) \u0026#34;The ssnake wass ssilent.\u0026#34;) math-mess: number(start) number(end) -\u0026gt; number. For all of the numbers between start and end: add the squares of the even numbers, subtract the square roots of the odd numbers.\n(math-mess 10 10) =\u0026gt; (* 10 10) (math-mess 11 11) =\u0026gt; (- (sqrt 11)) (math-mess 10 11) =\u0026gt; (- (* 10 10) (sqrt 11))  "
},
{
	"uri": "http://wy-cs.info/intermediate-cs/part-i/ch08/",
	"title": "8. Number Animations",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://wy-cs.info/resources/",
	"title": "Resources",
	"tags": [],
	"description": "",
	"content": " These resources may be useful throughout the year.\n Syllabus for all classes Git program information (work in progress)  Course-specific information  AP Computer Science  Syllabus extra info  Intermediate Computer Science  Syllabus extra info WeScheme - when you cannot install software   "
},
{
	"uri": "http://wy-cs.info/intermediate-cs/ch22a/81-rec-quiz/",
	"title": "22a. Recursion Quiz",
	"tags": [],
	"description": "First quiz on recursion: reciprocal-squares, blank-vowels, hollow-diagonal.",
	"content": " You may use the Picturing Programs textbook and the blog to look up functions th at you do not know. Do not consult any other programs written by you or anyone else. (No old homework, Stack Overflow, etc.)\nUse define/contract and have at least two check expects for each function.\n reciprocal-squares: number(start) number(end) -\u0026gt; number. Find the sum of 1/n^2 for every n between start and end (including both).\n   start end sum     1 1 1.0   1 2 1.25   1 3 1.36111\u0026hellip;    blank-vowels: string(word) -\u0026gt; string. Change every vowel (a,e,i,o,u) to an underscore (_). Example: (blank-vowels \u0026quot;elephant\u0026quot;) =\u0026gt; \u0026quot;_l_ph_nt\u0026quot;.\n  Period 5,7 Only  circle-circle: number(big-radius) number(little-radius) number(turn-angle) number(n) -\u0026gt; image. Produce n circles of size little-radius around the perimeter of a circle of size big-radius. In between each, have a central angle of turn-angle.\n  (circle-circle 100 20 45 8)    (circle-circle 120 15 30 6)     Period 1 Only  hollow-diagonal: number(radius) number(n): Produce n circles of the given radius along a diagonal.\n (hollow-diagonal 20 5)   \n  "
},
{
	"uri": "http://wy-cs.info/intermediate-cs/universe/u-resources/",
	"title": "Universe Resources",
	"tags": [],
	"description": "Reference material and tutorials on the Universe.",
	"content": " This page contains only the bare-bones information.\n  Racket Code   generic-server-v1.rkt  (1 kB)   posn-util-enhanced.rkt  (0 kB)     Generic server (see attachment). (make-package model message) to update model and send a message. A main function start-big-bang to launch the windows.\n(define (start-big-bang my-name initial-model) (big-bang initial-model (on-draw draw-h) (on-receive receive-h) (on-key key-h) (register LOCALHOST) (name my-name) (close-on-stop true))) The launch-many-worlds command to quickly and easily start several windows.\n(launch-many-worlds (start-big-bang \u0026#34;whale\u0026#34; (make-model \u0026#34;blue\u0026#34; \u0026#34;gray\u0026#34;)) (start-big-bang \u0026#34;squirrel\u0026#34; (make-model \u0026#34;red\u0026#34; \u0026#34;yellow\u0026#34;)))  Sending Posns You cannot send posns without a hack. The hack is to make a separate file that contains a little bit of lower level Racket code and require it. This code could go in your posn-util.rkt file! You need to use Racket mode, not Beginning Student.\n#lang racket (provide (all-defined-out)) (define-struct posn (x y) #:prefab) Additional Resources  Universe in Racket Documentation. See especially Section 2.4.7, the examples, where a ball-bouncing example is developed.\n Universe tutorial by Sub\n  "
},
{
	"uri": "http://wy-cs.info/ap-cs/jm/interlude-feb/bloopers/",
	"title": "Java Bloopers",
	"tags": [],
	"description": "",
	"content": " Here are two very tricky problems that people in our class had.\nExponentiation What should the output of loop(5) be?\npublic static void loop(int y) { for (int k = 0; k \u0026lt; (y^2); k++) { System.out.println(k); } } Explain:\nDemoBlooper.loop(5); 0 1 2 3 4 5 6  Uh-oh:\nDemoBlooper.loop(7); 0 1 2 3 4  I\u0026rsquo;ll leave it a mystery for now. If you want the compiler to give you a hint, remove the parentheses around y^2.\nConditionals The following code is supposed to examine the neighbors of the element row=r, col=c in the array temp. If the element is 1 but it has less than 2 or more than 3 neighbors, it becomes 0. If the element is 0 but has 3 neighbors, it becomes 1.\nint nextalive = countnextalive(size, r, c, temp); if(temp[r][c] == 1) if(nextalive \u0026lt; 2 || nextalive \u0026gt; 3) nums[r][c] = 0; else if(nextalive == 3) nums[r][c] = 1; The code has a bug in it\u0026hellip; any ideas? You\u0026rsquo;ll probably need to test it to figure out what\u0026rsquo;s wrong.\n"
},
{
	"uri": "http://wy-cs.info/intermediate-cs/ch22a/90-helpers/",
	"title": "22a. Helpers",
	"tags": [],
	"description": "Real introduction to helper functions in recursion.",
	"content": " Warmup Write a function count-div: number(k) number(n) -\u0026gt; number that gives 1 if k divides n and 0 otherwise.\nOpener count-divisors: positive-integer(n) -\u0026gt; positive-integer. Count how many integers 1,2,\u0026hellip;,n divide the number n.\nCount-divisors solution.\nString Practice group-3: string(word) -\u0026gt; string. Insert spaces after every three letters of word. Example: (group-3 \u0026quot;pancake\u0026quot;) =\u0026gt; \u0026quot;pan cak e\u0026quot;.\nNumber Theory  smallest-factor: positive-integer(n) -\u0026gt; positive-integer. Find the smallest divisor of n that is greater than 1.\n is-prime?: positive-integer(n) -\u0026gt; boolean. Determine whether or not n is prime. Note: this can do less checking than the previous function.\n smallest-prime-factor: positive-integer(n) -\u0026gt; positive-integer. Find the smallest prime factor of n.\n  "
},
{
	"uri": "http://wy-cs.info/intermediate-cs/part-i/ch09/",
	"title": "9. Strings",
	"tags": [],
	"description": "",
	"content": " This chapter takes one day to do. Read pages 149-150 in the book.\nHomework Page 151 (PDF page 162), exercises 9.2.2 through 9.2.7.\nChallenge: 10.2.6.\nKey Functions  string-append string-length number-\u0026gt;string substring: string number(start) number(end) -\u0026gt; string.  If you omit the end number, the result you get starts at the \u0026ldquo;start\u0026rdquo; position and goes until the end of the original string.\nIllustration of positions in the string \u0026ldquo;Cattle\u0026rdquo;:\nC a t t l e 0 1 2 3 4 5 6  So (substring \u0026quot;Cattle\u0026quot; 1 3) produces \u0026quot;at\u0026quot;.\nThe function string-\u0026gt;number is sometimes useful but not nearly as important. Usually it is misused.\n"
},
{
	"uri": "http://wy-cs.info/intermediate-cs/ch22a/91-count-divisors/",
	"title": "22a. Helpers: Count Divisors",
	"tags": [],
	"description": "A complete lecture on count-divisors.",
	"content": " Warmup Write a function count-div: number(k) number(n) -\u0026gt; number that gives 1 if k divides n and 0 otherwise.\nWarmup Solution (define (count-div k n) (cond [(= 0 (remainder n k)) 1] [else 0] (check-expect (count-div 3 6) 1) (check-expect (count-div 4 6) 0) Count-divisors example (count-divisors 2) =\u0026gt; 1 + 1 (count-divisors 3) =\u0026gt; 1 + 0 + 1 (count-divisors 4) =\u0026gt; 1 + 1 + 0 + 1 (count-divisors 5) =\u0026gt; 1 + 0 + 0 + 0 + 1 Notice that there is not a pattern of repeating previously used results! See the longer list of factors to confirm:\n1 =\u0026gt; 1 2 =\u0026gt; 1,2 3 =\u0026gt; 1,3 4 =\u0026gt; 1,2,4 5 =\u0026gt; 1,5 6 =\u0026gt; 1,2,3,6 7 =\u0026gt; 1,7 8 =\u0026gt; 1,2,4,8 9 =\u0026gt; 1,3,9 This means that you cannot write a recursive function the way we have been writing them. (count-divisors 5) has nothing to do with (count-divisors 4).\nCount-divisors walkthrough It really looks like we need to keep track of two things:\n what number we are counting the divisors for (always the same, let\u0026rsquo;s call it end) the number that we are test dividing (changes, let\u0026rsquo;s call it start)  Skeleton:\n(define (count-divisors-help start end) ; not finished 0) Now you write examples. You could abbreviate this function\u0026rsquo;s name as cdh if writing on paper.\nExamples Your examples should look like this list below (abbreviating count-divisors-help as cdh:\n(cdh 1 6) =\u0026gt; 4 (cdh 2 6) =\u0026gt; 3 (cdh 3 6) =\u0026gt; 2 (cdh 4 6) =\u0026gt; 1 (cdh 5 6) =\u0026gt; 1 (cdh 6 6) =\u0026gt; 1 Finale You know there are two steps to writing a recursive function:\n make sure it stops, when it should stop; and make sure it keeps going when it should keep going.  Stops You can write a conditional that always gets the right answer in one case. Try it!\nKeep going You can see that there could be a recursive function call with start increasing by one each time, because the answer for start=3 builds off the answer for start=4.\nThe two ingredients for this part are:\n (count-divisors-help (+1 start) end) (count-div start end)  You have to try writing the rest of the function now!\nAnswer I hope you have worked through each step and tried to understand it before reading the solution.\nBare-bones solution and a complete solution with checks, straight from lecture.\n"
},
{
	"uri": "http://wy-cs.info/intermediate-cs/part-i/ch09/ch9-ex1/",
	"title": "9. Exercises 1",
	"tags": [],
	"description": "",
	"content": " dot-fill: Take in a string(word) and put out a string. The output string is the same as the input string, except that it has periods added (\u0026ldquo;.\u0026rdquo;) to bring it to 10 characters long.\nExamples:\n(check-expect (dot-fill \u0026#34;abc\u0026#34;) \u0026#34;abc.......\u0026#34;) (check-expect (dot-fill \u0026#34;0123456789\u0026#34;) \u0026#34;0123456789\u0026#34;) You may assume that the word has no more than ten letters.\n cash: num(dollars) num(cents) -\u0026gt; string(price)\nWrite the price including the dollar sign.\n(check-expect (cash 5 99) \u0026#34;$5.99\u0026#34;) (check-expect (cash 10 0) \u0026#34;$10.00\u0026#34;) (check-expect (cash 98 15) \u0026#34;$98.15\u0026#34;) (check-expect (cash 6 4) \u0026#34;$6.04\u0026#34;)  "
},
{
	"uri": "http://wy-cs.info/intermediate-cs/ch22a/92-helpers-2/",
	"title": "22a. Recursion Practice 3",
	"tags": [],
	"description": "Even more recursion practice.",
	"content": " Do at least the first three. Please make sure to write at least three tests for each function.\n is-in-word?: string(letter) string(word) -\u0026gt; boolean. True if the letter is in the word, false otherwise.\n(check-expect (is-in-word? \u0026#34;x\u0026#34; \u0026#34;explode\u0026#34;) true) (check-expect (is-in-word? \u0026#34;s\u0026#34; \u0026#34;juliuc caecar\u0026#34; false) word-shrink: string(word) number(starting-size) -\u0026gt; image. Create a picture of the word in which each letter is four points smaller than the previous letter. Do not let the font size go below 5pt.\n (shrink-word \u0026#34;Perspective Drawing\u0026#34; 64)    sum-penta: number(start) number(end) -\u0026gt; number. The pentagonal numbers are created by making larger and larger pentagons - Wikipedia has a nice animated image. The formula for the nth pentagonal number is (* 0.5 n (- (* 3 n) 1)).\nFind the sum of all of pentagonal number n from n=start through n=end.\n   n (penta n) (sum-penta 1 n)     1 1 1   2 5 6   3 12 18     Challenge  draw-tic-tac-toe: string -\u0026gt; image. Take a string containing 9 characters (from \u0026ldquo;X\u0026rdquo; \u0026ldquo;O\u0026rdquo; and \u0026ldquo;-\u0026rdquo;) and turn it into a 3x3 image of \u0026ldquo;X\u0026rdquo; \u0026ldquo;O\u0026rdquo; and blank squares in a tic-tac-toe board.\nHint: You will probably want helper functions draw-one-space and draw-one-line.\n (draw-tic-tac-toe \u0026#34;XXOO-OOXX\u0026#34;)    (Math) Write is-pentagonal?: number -\u0026gt; boolean. Then read Project Euler 44, which might be doable soon. You can celebrate if you find any two pentagonal numbers whose sum and difference are both pentagonal.\n  "
},
{
	"uri": "http://wy-cs.info/intermediate-cs/part-i/ch09/ch9-ex2/",
	"title": "9. Exercises 2",
	"tags": [],
	"description": "",
	"content": " centr as shown below. Write a signature, purpose, and function for centr.  (centr \u0026#34;panda\u0026#34;) =\u0026gt; \u0026#34;*****panda*****\u0026#34; (centr \u0026#34;sinful\u0026#34;) =\u0026gt; \u0026#34;*****sinful****\u0026#34; (centr \u0026#34;conspicuous\u0026#34;) =\u0026gt; \u0026#34;**conspicuous**\u0026#34;"
},
{
	"uri": "http://wy-cs.info/intermediate-cs/ch22a/93-self-quiz/",
	"title": "22a. Recursion Self Quiz",
	"tags": [],
	"description": "A brief quiz to make sure you understand recursion.",
	"content": "draw-cats: string -\u0026gt; image\nDraw one cat for every time the word \u0026ldquo;cat\u0026rdquo; appears in the string.\n  (draw-cats \u0026#34;nyan cat\u0026#34;)    (draw-cats \u0026#34;cat dog cat\u0026#34;)   I have had problems with tests failing even though the images are identical. I found that scaling the image in Racket caused the problem. Now I do not scale the size of the images I use in my tests.\n "
},
{
	"uri": "http://wy-cs.info/intermediate-cs/ch22a/94-rec-practice-4/",
	"title": "22a. Recursion Practice 4",
	"tags": [],
	"description": "Change penguin to penguins and mouse to mice in zoo-1, sum5, double-middle.",
	"content": " Classwork (20 min) and discussion (25 min).\n zoo-1: string -\u0026gt; string. Change every occurrence of \u0026ldquo;penguin\u0026rdquo; to \u0026ldquo;penguins\u0026rdquo; and change every occurrence of \u0026ldquo;mouse\u0026rdquo; to \u0026ldquo;mice\u0026rdquo;. Leave everything else alone.\n(check-expect (zoo-1 \u0026#34;mouse\u0026#34;) \u0026#34;mice\u0026#34;) (check-expect (zoo-1 \u0026#34;xmouse\u0026#34;) \u0026#34;xmice\u0026#34;) (check-expect (zoo-1 \u0026#34;mousex\u0026#34;) \u0026#34;micex\u0026#34;) (check-expect (zoo-1 \u0026#34;mouse moose\u0026#34;) \u0026#34;mice moose\u0026#34;) (check-expect (zoo-1 \u0026#34;mouse mouse\u0026#34;) \u0026#34;mice mice\u0026#34;) (check-expect (zoo-1 \u0026#34;penguin penguins\u0026#34;) \u0026#34;penguins penguinss\u0026#34;)  Review Homework  sum5: number(n) -\u0026gt; number. Find the sum of the first n fifth powers, starting with 1.\n(check-expect (sum5 3) (+ (* 1 1 1 1 1) (* 2 2 2 2 2) (* 3 3 3 3 3))) double-middle: string -\u0026gt; string. Double every letter between j and q (inclusive).\n(check-expect (double-middle \u0026#34;jog snake\u0026#34;) \u0026#34;jjoog snnakke\u0026#34;)  "
},
{
	"uri": "http://wy-cs.info/intermediate-cs/ch22a/95-rec-quiz-2/",
	"title": "22a. Recursion Quiz 2",
	"tags": [],
	"description": "Ice cream quiz.",
	"content": " An ice cream cone can have strawberry, vanilla, or chocolate ice cream scoops. The number of scoops is unlimited, specified by the string of flavors that is input.\nice-cream: string -\u0026gt; image  (ice-cream \u0026#34;chocolate vanilla strawberry strawberry chocolate\u0026#34;)   Detailed Instructions  Build up to all of the flavors by first picking a single flavor and creating a cone for only that flavor. Write checks as we have discussed in class. It is worth your time! Permitted resources: Picturing Programs book and Racket Help Desk. No old homework or notes.  Grading  Flawless single flavor cone = 70% Good tests = +10% Multi-flavor cone, no problems: 90%. Penalty for untested code, or errors when tested -5.  F.A.Q.  You may write any helper functions that you want.  "
},
{
	"uri": "http://wy-cs.info/ftc/t-shirt/",
	"title": "Robophins T-Shirts",
	"tags": [],
	"description": "",
	"content": " Cost Order going in Friday October 27. Sign up and give $15 to Doc Mo before Friday.\nFront  Back  "
},
{
	"uri": "http://wy-cs.info/intermediate-cs/ch22a/99-hangman/",
	"title": "22a. Hangman Project",
	"tags": [],
	"description": "Make the classic game of hangman.",
	"content": " The game of hangman a classic guess-the-word game. You can try hangman online, but do not play too long - just learn the rules.\nCheck in  2018-03-15: Illustrations and model. 2018-03-16: Key handler and logic helper function: (string-contains-letter? str letter). 2018-03-17 (Monday): Draw handler and define/contract. 2018-03-18 (Tuesday): Completed project.  Steps  22a. Hangman Outline Outline of everything to do for hangman project.\n  22a. Hangman Images How to load a sequence of images into DrRacket.\n  22a. Hangman Key Handler Every keypress is a guess - adjust the model accordingly.\n  22a. Hangman DH Warmup \n  22a. Hangman Draw Handler \n  "
},
{
	"uri": "http://wy-cs.info/intermediate-cs/ch22b/list-resources/",
	"title": "22. Additional Resources",
	"tags": [],
	"description": "",
	"content": "In addition to Chapters 22-23 in Picturing Programs, students in the past have found these resource useful:\n How to Design Programs, Part II. Pairs and Lists in the Racket Guide.  "
},
{
	"uri": "http://wy-cs.info/ap-cs/jm/ch10/",
	"title": "10. Strings",
	"tags": [],
	"description": "",
	"content": "There are a lot of tricky issues related to strings. Read the powerpoint carefully!\n 10. Overview   10. Exercises   10. Test   "
},
{
	"uri": "http://wy-cs.info/ftc/learning/",
	"title": "Learning Resources",
	"tags": [],
	"description": "",
	"content": " Servos and Pivots  "
},
{
	"uri": "http://wy-cs.info/ap-cs/haskell/usaco/",
	"title": "USACO Practice",
	"tags": [],
	"description": "Challenging problems for people who want to stretch their understanding.",
	"content": "One of the key ideas to keep in mind when learning from USA Computing Olympiad problems is that time matters. A slow algorithm is not good enough; keep thinking about the problem, trying to find a more efficient way to solve it. Always time your solutions. Always try your solutions on the official test cases \u0026mdash; many times they will contain a situation that you have not considered. Enjoy it when that happens.\n Haybales   "
},
{
	"uri": "http://wy-cs.info/ap-cs/jm/interlude-jan/",
	"title": "Interlude",
	"tags": [],
	"description": "",
	"content": "  CodingBat String-2: did 16 the week before Winter Break.  Review 1 Review 2  Change \u0026ldquo;snow\u0026rdquo; to \u0026ldquo;ice\u0026rdquo;, but only when it appears between \u0026ldquo;December\u0026rdquo; and \u0026ldquo;February\u0026rdquo;. To simplify, you may assume that both December and February appear in the string, and December comes before February.\nSystem.out.println(winter(\u0026#34;snow December snow ice snow February snow\u0026#34;)); ==\u0026gt; \u0026#34;snow December ice ice ice February snow\u0026#34; Create a ASCII tree. Given:\n height of whole tree (height \u0026gt;= 6) width of crown at the top (width odd) trunk is always 4 lines tall and 3 characters wide width of crown increases by two \u0026ldquo;*\u0026rdquo; each line between bottom and top of crown (then decreasing halfway in between)   Example:\ntree(10,5) ==\u0026gt; ***** ******* ********* ********* ******* ***** *** *** *** ***  "
},
{
	"uri": "http://wy-cs.info/intermediate-cs/part-i/ch11/",
	"title": "11. Planning",
	"tags": [],
	"description": "",
	"content": "  11.3 Intro Slides Intro to Chapter 11.\n  11.3 Homework 1 Homework for 11.3\n  11.6.1 House Exercise 11.6.1 with help, from the book.\n  11.6.2 Airline \n  Home Project Design your own house (art) and cost calculator (math). Practice managing complexity and good function-writing style.\n  "
},
{
	"uri": "http://wy-cs.info/ap-cs/jm/ch12/",
	"title": "12. Arrays",
	"tags": [],
	"description": "",
	"content": " The fundamentals:\n Create (make space for) an array:  int[] data = new int[50]; String[] names = { \u0026#34;Justyn\u0026#34;, \u0026#34;Connor\u0026#34;, \u0026#34;Leo\u0026#34;, \u0026#34;Ellie\u0026#34; };  Arrays in Java do not grow or shrink. There is no += for arrays. The length of the data array is data.length. Arrays without new have no space created for them.  int[] nums; int len = nums.length; // error, array is not made at all!! nums[0] = -1; // error, certainly no item 0  Getting values from an array:  int first = data[0]; int last = data[data.length - 1];  Setting values in an array:  data[0] = 10; data[1] = 50;  Miscellaneous\n Arrays are handled like Java Objects in memory. The name of the array is a reference to a block of memory where the array data is stored. You cannot use the {10,30,90} form of the initializer anywhere except the declaration of the object.  int[] nums = {10,30,90}; // OK int[] bad; bad = {10,30,90}; // ERROR  Resources If you missed class, you will want to read Chapter 12 and/or the Java Arrays Tutorial.\nHomework  2018-01-10: CodingBat Array-1 exercises in class. Complete 5 or more; enough so you are comfortable with the basics - getting items from the start and end of an array, changing values, making new arrays.\n 2018-01-12: CodingBat Array-2 exercises all day. You should have completed 8 already. Do 12 more before class Tuesday 2018-01-16.\n 2018-01-16: Class JavaMethods GitHub - Chomp is Chapter 12.\n  "
},
{
	"uri": "http://wy-cs.info/ap-cs/jm/testing/",
	"title": "Unit Testing",
	"tags": [],
	"description": "JUnit testing, like the check-expect system from Racket.",
	"content": "  Unit Testing Level I An introduction to using the JUnit test system.\n  Unit Testing Level II Slightly more advanced unit testing commands and techniques.\n  "
},
{
	"uri": "http://wy-cs.info/ap-cs/jm/sem1final/",
	"title": "Semester 1 Final",
	"tags": [],
	"description": "Programming portion of the semester 1 final exam.",
	"content": "  2. Final - CodingBat Period 2 final programming question.\n  4. Final - CodingBat Period 4 final programming question.\n  "
},
{
	"uri": "http://wy-cs.info/ap-cs/jm/ch13/",
	"title": "13. ArrayList",
	"tags": [],
	"description": "An array-like class that (i) grows automatically and (ii) can delete elements.",
	"content": "ArrayList in-class problems\n 2018-02-05:\n Classwork: pages 2, 4, 8 (ArrayList 0, 2, 3) in presentation linked above. HW: Read Chapter 13. Do reading comprehension questions (exercises) 1-6 on pages 378-379. Answering the questions should take about 10 minutes. Java Methods PowerPoints: Skim Chapter 13.  2018-02-06\n Aardvark Assignment Learn to test ArrayList functions!   2018-02-18\n yesToNo (ArrayList 7) ShoppingList (ArrayList 4a,4b) from problems linked at the top of the page. Shopping List example code.   Example: testing code and useless function so the tests compile.\n 2018-02-08\n Opener: throddPigs Quiz or Homework (if you were not present): ArrayList 8 \u0026ldquo;Penguin\u0026rdquo; from problems linked at the top of the page. Note on testing: A popular question is how to test functions that modify their arguments. See aardvark testing notes.   "
},
{
	"uri": "http://wy-cs.info/intermediate-cs/part-i/ch13/",
	"title": "13. Booleans",
	"tags": [],
	"description": "",
	"content": " The quick reference guide is on page 208 of the PDF.\nSummary  Functions end in ? if (and only if) they return a boolean value for their answer.\n true, false\n Determine the type of something: string?, number?, integer?, image?, boolean?\n Decide equality: string=?, image=?, etc.\n Comparisons for numbers: \u0026lt;, \u0026lt;=, =, \u0026gt;=, \u0026gt;\n Comparisons for other things: string\u0026lt;?, string\u0026lt;=?, string=?, etc.\n Case insensitive comparison: string-ci\u0026lt;?, etc.\n Combinations: and, or, not\n  Extras  replicate string-contains?  Sections  Ch13 Exercises   "
},
{
	"uri": "http://wy-cs.info/intermediate-cs/spaceinv/",
	"title": "Project: Space Invaders",
	"tags": [],
	"description": "Managing the space invaders game creation.",
	"content": "See the plan for initial information! We are currently going to make the functions that decide when action happens.\n SI Plan   SI Walkthrough   "
},
{
	"uri": "http://wy-cs.info/ap-cs/jm/ch14/",
	"title": "14. Searching and Sorting",
	"tags": [],
	"description": "",
	"content": " 2018-02-12: Read Section 14.1-14.2 and do exercise 1 on the Comparable page.\n 2018-02-13: EBO, exercise 2 on the Comparable page.\n 2018-02-14: Binary search.\n 2018-02-15: Binary insert.\n 2018-02-16: Selection sort.\n 2018-02-20: Insertion sort.\n 2018-02-21: Merge sort. Use arrays of integers. Colorful visual demo or another visual demo.\n   14. Comparable   14. Binary Search   14. Test Corrections   "
},
{
	"uri": "http://wy-cs.info/ap-cs/jm/interlude-feb/",
	"title": "Programming Practice",
	"tags": [],
	"description": "Learn to integrate all of the skills that you have acquired in AP Computer Science by solving problems.",
	"content": "  Make a HackerRank account. Log in. Join the ProCom 3 contest.  Direct links to HackerRank pages do not work. You need to log in, then join the contest and find the linked problem.\n Your progress is only saved in the browser that you are using while you work on the problem. You can get submitted code from anywhere, though.\n Assignments  Programming Practice 1   Programming Practice 2   Programming Practice 3   Programming Project   Java Bloopers   "
},
{
	"uri": "http://wy-cs.info/ap-cs/jm/q3review/",
	"title": "Q3. Review",
	"tags": [],
	"description": "Quarter 3 AP Review",
	"content": "  Q3. Classes More 1 Writing classes, some review problems.\n  "
},
{
	"uri": "http://wy-cs.info/intermediate-cs/part-i/ch15/",
	"title": "15. Conditionals",
	"tags": [],
	"description": "Making choices in Racket using &#39;cond&#39;.",
	"content": " See slides for introductory material.\nAssignment 15.A Read the first three sections of Chapter 15. Do Exercises 15.3.{1,2,4,5,6}. These are on PDF page 223.\nAdvice:\n 15.3.4: The first input is the candidate for whom you are counting votes. (For example \u0026ldquo;Clinton\u0026rdquo;.) The next four inputs are votes cast for a person. (For example \u0026ldquo;Trump\u0026rdquo; \u0026ldquo;Clinton\u0026rdquo; \u0026ldquo;Sanders\u0026rdquo; \u0026ldquo;Trump\u0026rdquo;.) You are supposed to return the number of votes for the candidate from the first input. (For example: 1 in this case.)\n 15.3.7: Keep using build-image not build3-image.\n  Advanced students can do the image making (see below).\nAssignment 15.B Exercises 15.5.{1,2,3,4,5}. These begin on PDF page 229.\nAssignment 15.C Read 15.6 (\u0026ldquo;Unnecessary conditionals\u0026rdquo;). Skip Section 15.7.\nDo Exercises 15.8.{2,3,5}. Exercise 15.5.6. These begin on the bottom of PDF page 238.\nAdvanced See the build-image tutorial. Use that to do 15.3.3 and 15.3.{7-10}. Do not use build3-image even though the book says to use it. The build-image function is better.\nPractice Quiz Get ready by doing last year\u0026rsquo;s Chapter 15 quiz.\n"
},
{
	"uri": "http://wy-cs.info/ap-cs/jm/ch15/",
	"title": "15. Files and Streams",
	"tags": [],
	"description": "Using Scanner, File, PrintWriter.",
	"content": "  2018-04-18: Introduction to using Scanner and File.  Topics  15. File Intro API for File, Scanner, PrintWriter.\n  15. File Assignments Short problems using File.\n  15. File Quiz Quiz using File, similar tasks to what we have done previously.\n  15. File Divvy Questions about the Divvy trip database.\n  "
},
{
	"uri": "http://wy-cs.info/ap-cs/jm/ch20/",
	"title": "20. Set and Map",
	"tags": [],
	"description": "Important data structures for actually using Java to get stuff done quickly.",
	"content": " See the Java Methods Chapter 20 Powerpoint for a discussion.\nHashing vs Trees When dealing with Sets and Maps one needs to find a value quickly. There are two main ways storing the data: hashing and using a tree.\nHashing Hashing gives you a \u0026ldquo;random-ish\u0026rdquo; number to associate with the thing you are storing. The number is always the same, so you can store the object at the location given by the number and look in that location (with no searching) later when you want to find the object. The drawback is that hashing does not keep the objects in any kind of order.\nOne simplified example is to take integers and use the remainder after dividing by a medium-sized prime (like 173). This lets someone use an array of length 173 to store numbers that may be much larger:\n{ int [] data = new int[173]; for (int k=0; k\u0026lt;30; k++) { int num = (int)(Math.random()*100000); data[num%173] = num } } With that code it is very fast to find if a number is in the array. (Just check to see if data[newnum%173] == newnum.)\nDividing by a prime means smaller numbers will not be able to have short cycles - as a non-example, think what happens with the multiples of 16 when you divide by 128 (which is not prime). The \u0026ldquo;hashes\u0026rdquo; of the multiples of 16 would be 16, 32, 64, 80, 96, 112, 0, and then repeat.\nTree A binary tree records \u0026ldquo;smaller\u0026rdquo;, \u0026ldquo;bigger\u0026rdquo;, or \u0026ldquo;equal to\u0026rdquo; by offering a number and two choices at each step of the tree. Searching a tree for your object takes about log(N) steps, where N is the number of objects stored in the tree so far. This is slower than a hash function, and requires the objects to be ordered, but it keeps them in order - which can be very useful.\nSet The interface Set represents a mathematical set. Implementing classes include HashSet and TreeSet.\nMap The interface Map represents a mathematical function. Implementing classes include HashMap and TreeMap.\n"
},
{
	"uri": "http://wy-cs.info/intermediate-cs/ch20/",
	"title": "20. Using Structures",
	"tags": [],
	"description": "Remembering or returning more than one thing. For example, coordinates.",
	"content": "  20. Posn Util Utility functions for posns. Accessing functions defined in other files.\n  20. Click Circle A circle moves around the screen randomly. You win if you can click on it.\n  20. Click Circle Questions Brief explanation of how to stop animations and show a win screen.\n  20. Tightrope A square changes color as you balance between two circles.\n  20. Map Image Changing the colors in a picture, pixel by pixel.\n  20. Color Enhancing One exercise working with color.\n  20. Review Review questions on posn and color.\n  20. Test Results \n  "
},
{
	"uri": "http://wy-cs.info/intermediate-cs/ch21a/",
	"title": "21A. Making Structures",
	"tags": [],
	"description": "More than one piece of information in one variable, generalizing posn and color.",
	"content": "2018-01-12 (Friday): Chapter 21 Reading Guide - Do pages 1 and 2 on Friday.\n2018-01-16: Chapter 21 Worksheet A.\n2018-01-17: Chapter 21 Worksheet B. Make sure to test your code in DrRacket!\n 21. Worksheet A   21. Worksheet B   21. Worksheet C   "
},
{
	"uri": "http://wy-cs.info/intermediate-cs/sem1review/",
	"title": "Sem.I Review",
	"tags": [],
	"description": "",
	"content": "  I.1 Semester I Review 1 Random shape. Drift to a new position. Reduce the amount of green.\n  I.2 Semester I Review 2 Random dots located on a circle, purify color, Benz symbol.\n  I.3 Semester I Review 3 Practice: red-blue, spam-circle, rectangle limitations. Review reading.\n  I.4 Semester I Review 4 Analysis of functions - signatures and check-expects. Structure practice.\n  I.5 Semester I Review 5 The drifter animation that takes little or big steps while moving.\n  I.6 Semester I Review 6 Random numbers. Gas gauge. Graphing in people coordinates.\n  I.7 Semester I Review 7 Additional review exercises.\n  Semester Review Topics List Major topics missed on Chapter 20 test: randomness, consistent signatures for big-bang, good testing.\n  "
},
{
	"uri": "http://wy-cs.info/intermediate-cs/sem1final/",
	"title": "Sem.I Finals",
	"tags": [],
	"description": "Semester I final exams.",
	"content": "  1. Final Exam Period 1 final exam.\n  5. Final Exam Period 5 final exam.\n  7. Final Exam Period 7 final exam.\n  "
},
{
	"uri": "http://wy-cs.info/intermediate-cs/ch21b/",
	"title": "21B. Structures",
	"tags": [],
	"description": "Position and velocity - the last half of Chapter 21. Choosing the right model.",
	"content": "  21. PV Intro Slides with introduction to position-velocity struct exercises.\n  21.7.6 Groundwork Groundwork practice for 21.7.6\n  21.7.6 Tick Handler Combining actions into one big tick handler.\n  21. PV Review Review problems for PV quiz.\n  Math Soln 2 \n  Math Soln 1 \n  "
},
{
	"uri": "http://wy-cs.info/intermediate-cs/pv-proj/",
	"title": "Project: PV",
	"tags": [],
	"description": "",
	"content": " This project must incorporate position and velocity in some way.\n At least two moving items. Interaction of some kind between the items.  Read the Help with Corrupted Models page if you have problems like pv-pt: expects a pv, given (make-posn (make-posn 100 0) 8).\n Helpful links  Draw Handler Helpers Use multiple helper functions to create a draw handler that draws multiple moving objects.\n  Tick Handler Helpers Use multiple helper funcitons to create a tick handler that does multiple actions.\n  Help with Corrupted Models How to debug corrupted model errors by using your own check-with function.\n  PV Turnin How to turn in your project.\n  PV Project Quiz Quiz on the concepts of the PV project.\n  Theme  Period 1: Avocado. Period 5: French fries. Period 7: Rice / pasta.  Plan You need:\n two separate sketches of game ideas. pick one and draw two scenes from the game model paragraph description of the action  Do not miss anything in the model! It\u0026rsquo;s hard to add more in later.\nDraw Handler The next step is to make a draw handler that draws all of the scenes that you have drawn in your plan.\nMotion Make sure you have two things that move (or approval to skip this). It is likely to take two days to get the motion you want. Write checks as you go.\nStyle  Check-expects for every function Follow the style guidelines that we have discussed in class.\n Close as many parentheses as you want on one line Break after every group of closed parentheses    Grading  25% style 25% check-expect 50% content  "
},
{
	"uri": "http://wy-cs.info/intermediate-cs/contracts/",
	"title": "Contracts",
	"tags": [],
	"description": "Racket can enforce signatures (contracts). Learn how.",
	"content": "We have been writing signatures for functions by using comments.\n; double-it: number -\u0026gt; number This works fine for organizing your thoughts, but it would be nice if Racket could actually stop you from doing something different from what you said you would do.\nIntermediate student mode is required to use contracts. (require racket/contract)\n  Contract Intro An introduction to using contracts.\n  Contract for Structs When you are working with a structure, the best way to make sure it does not get \u0026ldquo;broken\u0026rdquo; is to write a function to check that each part of the struct has the correct type. Here is an example of a game struct that has fields for: player-1 posn, player-2 posn, player 1 score, and player 2 score. We write a function to use in our handlers that (define-struct game (p1pos p2pos p1score p2score)) (define (good-game?\n  "
},
{
	"uri": "http://wy-cs.info/intermediate-cs/ch22a/",
	"title": "22a. Recursion",
	"tags": [],
	"description": "Recursion lets you solve a problem by solving simpler problems.",
	"content": "  22a. Fibonacci Introduction to recursion using Fibonacci numbers.\n  22a. Digits Counting the digits in a number.\n  22a. Sum Digits Sum the digits in a number.\n  22a. Fibsum Sum of Fibonacci numbers.\n  22a. More Recursion Many more recursion practice problems.\n  22a. Recursive Helpers Exercises involving recursive functions with helper functions.\n  22a. Recursion Quiz Practice Quiz practice: hawaiian-earring, double-ss, math-mess.\n  22a. Recursion Quiz First quiz on recursion: reciprocal-squares, blank-vowels, hollow-diagonal.\n  22a. Helpers Real introduction to helper functions in recursion.\n  22a. Helpers: Count Divisors A complete lecture on count-divisors.\n  22a. Recursion Practice 3 Even more recursion practice.\n  22a. Recursion Self Quiz A brief quiz to make sure you understand recursion.\n  22a. Recursion Practice 4 Change penguin to penguins and mouse to mice in zoo-1, sum5, double-middle.\n  22a. Recursion Quiz 2 Ice cream quiz.\n  22a. Hangman Project Make the classic game of hangman.\n  "
},
{
	"uri": "http://wy-cs.info/intermediate-cs/ch22b/",
	"title": "22b. Lists",
	"tags": [],
	"description": "Lists give a way to remember an unlimited number of items.",
	"content": "  22. List Intro An introduction to lists in Racket.\n  22b. List Exercises 1 Introductory exercises with lists.\n  22b. List Exercises 2 Vocabulary for list functions. More practice problems.\n  22b. Bubble Wrap Random size circles all around the screen. Circles disappear when you click on them.\n  22b. List Exercises 3 Randomly generate points on a parabola and graph them in people coordinates.\n  22b. List Exercises 4 Quiz Quiz on lists.\n  22. Additional Resources In addition to Chapters 22-23 in Picturing Programs, students in the past have found these resource useful: How to Design Programs, Part II. Pairs and Lists in the Racket Guide.   "
},
{
	"uri": "http://wy-cs.info/intermediate-cs/battleship/",
	"title": "23. Battleship",
	"tags": [],
	"description": "The classic Battleship game, one player version.",
	"content": "The game of Battleship is a classic game from the early 20th Century in which you try to guess the locations of your opponent\u0026rsquo;s ships in a grid.\nYou may be able to play Battleship online but do not waste much time doing that kind of research. Playing on paper is better for developing your understanding of what information needs to be tracked (the model).\n Battleship Model Play battleship on paper to develop the model.\n  Battleship Examples An example of how to use the model you defined.\n  Battleship Outline Game logic, draw handler, mouse handler.\n  "
},
{
	"uri": "http://wy-cs.info/intermediate-cs/universe/",
	"title": "24. Universe",
	"tags": [],
	"description": "Make multi-player, multi-computer games in Racket.",
	"content": "The universe functions let you build multiple big-bang windows that communicate with each other.\n Universe Overview Overview of the Universe.\n  Universe Mini Projects Short projects to get used to the Universe code.\n  Universe Color Change the color on all of the clients by hitting a key.\n  Universe Taking Turns An introduction to taking turns when the universe broadcasts all messages to every client.\n  Universe Quiz 1 Quiz on week one of the Universe teachpack.\n  Universe Quiz 2 Quiz on taking turns.\n  Universe Slapjack Once the screen shows green, hit a key fast and get a point.\n  Universe Mistakes A list of common mistakes made when writing universe animations.\n  Universe Resources Reference material and tutorials on the Universe.\n  "
},
{
	"uri": "http://wy-cs.info/intermediate-cs/p25/",
	"title": "25. Universe Projects",
	"tags": [],
	"description": "Longer projects using the universe and messages.",
	"content": "  Reversi The game of Reversi.\n  Agar.io A clone of the agar.io web game.\n  "
},
{
	"uri": "http://wy-cs.info/intermediate-cs/sem2review/",
	"title": "Sem II Review",
	"tags": [],
	"description": "Review of skill from Semester II.",
	"content": "  P1. Jackpot Give each world an id number (1, 2, 3, \u0026hellip;). The worlds are all lined up according to their id number. Every world has some money. When a \u0026ldquo;jackpot\u0026rdquo; happens, the money from one world is distributed to its neighbors (each gets half). Write down your model, message, and reaction to the message in detail before programming.\n  P2. Attendance World 1 is the teacher counting students in a class. Other worlds are students. The teacher yells \u0026ldquo;attendance\u0026rdquo; and then each student responds \u0026ldquo;present\u0026rdquo;. Write down your model, message(s), and the reaction to receiving each message in detail before programming.\n  "
},
{
	"uri": "http://wy-cs.info/ap-cs/haskell/daily/",
	"title": "Haskell Daily Notes",
	"tags": ["haskell", "daily-notes"],
	"description": "Notes for each day.",
	"content": "  2017-10-04 More CodingBat problems.\n  2017-10-03 CodingBat problems to improve your problem-solving skills.\n  2017-09-18 Battleship and homework review.\n  2017-09-14 Indentation Indentation matters. A lot.\n  2017-09-12 Technical details that came up while doing Chapter 2 Homework.\n  2017-09-11 worked examples - removeVowels and wordLenPairs\n  "
},
{
	"uri": "http://wy-cs.info/intermediate-cs/ch22a/99-hangman/99a-hangman-outline/",
	"title": "22a. Hangman Outline",
	"tags": [],
	"description": "Outline of everything to do for hangman project.",
	"content": "Use define/contract for all of your functions. Write two check expects for every non-trivial function.\n Three illustrations of \u0026ldquo;action\u0026rdquo; that should occur in the game. Explain what they are. Model Top-down design. Image sequence and loading images into Racket. Key-handler\n Purpose Examples: at least two (which become tests) Write function.  Draw-handler\n Purpose Illustrations on paper (two) - easier than making computer examples. Examples: at least two (which will become tests) Write function.  Final screens: win and lose.\n  "
},
{
	"uri": "http://wy-cs.info/intermediate-cs/ch22a/99-hangman/99b-hangman-images/",
	"title": "22a. Hangman Images",
	"tags": [],
	"description": "How to load a sequence of images into DrRacket.",
	"content": " Goal for the day: produce a sequence of images to use for \u0026ldquo;hangman\u0026rdquo; and load it into Racket.\nImage sequence Draw a sequence of images hang-0.png, hang-1.png, etc., with the appropriate number of parts of the person filled in. Use \u0026ldquo;File -\u0026gt; Export as\u0026hellip;\u0026rdquo; to save each file with a different name.\nTools:\n Microsoft Paint on Windows Paintbrush (download) on Macintosh. You will need to hold down Control when you click on the application to allow it to open for the first time. Gimp on Linux.  Make a Racket function  Load images into Racket. Write a function that takes in the number of mistakes and returns the correct image of the gallows.  The best way to load an image from a file is to use bitmap/file.\nExamples:\n (bitmap/file \u0026quot;hang-0.png\u0026quot;) (bitmap/file \u0026quot;pics/hang-1.png\u0026quot;)  For the simplest loading, save the Racket file in the same folder as your images. \u0026ldquo;Untitled\u0026rdquo; programs will not find your images - save!\n Why? The only cases of file corruption I have seen involve large images being pasted into DrRacket files. Keeping the images in separate files prevents that problem.\n"
},
{
	"uri": "http://wy-cs.info/intermediate-cs/ch22a/99-hangman/99c-hangman-keyhandler/",
	"title": "22a. Hangman Key Handler",
	"tags": [],
	"description": "Every keypress is a guess - adjust the model accordingly.",
	"content": "The key handler needs to change the model depending on what key was typed.\n Create an example model for some state in the game. You could use one of your examples from the initial planning.\n Write a check-expect that demonstrates what should happen when the person hits a key which is in the word.\n Write a check-expect that demonstrates what should happen when the person hits a key which is not in the word.\n Seriously!! Write check-expects. See my example checks for the key handler.\n Recommendation: Write the helper function (string-contains-letter? str letter) that determines if a letter is in the word.\n Write the key handler. Remember to use define/contract.\n  "
},
{
	"uri": "http://wy-cs.info/intermediate-cs/ch22a/99-hangman/99d-hangman-drawhandler/",
	"title": "22a. Hangman DH Warmup",
	"tags": [],
	"description": "",
	"content": " The key step is to draw the word with underscores for the letters missed.\nThis page will not include any specific advice on how to draw the word with underscores for the letters that are not guessed. The wipeout function below should provide you will all of the skills you need to do it, though.\nUnderscore Warmup I: omit The omit function takes in a word and a letter and returns the same word with every occurence of the letter omitted (left out).\nomit: string(word) string(letter) -\u0026gt; string (check-expect (omit \u0026#34;word\u0026#34; \u0026#34;w\u0026#34;) \u0026#34;ord\u0026#34;) (check-expect (omit \u0026#34;hangman\u0026#34; \u0026#34;a\u0026#34;) \u0026#34;hngmn\u0026#34;) (check-expect (omit \u0026#34;nothing\u0026#34; \u0026#34;z\u0026#34;) \u0026#34;nothing\u0026#34;) Follow the design process to write the omit function.\n Simple examples that build up to a three letter word, showing how a letter can be omitted zero, one, or two times. Write the function: handle the empty word Write the function: handle one letter word Write the function: handler longer words  Run your checks after each step to make sure you stay on track.\nUnderscore Warmup II: wipeout The wipeout function takes in a word and a string of letters to remove. Every occurence of the letters should be removed from the word.\nwipeout: string(word) string(letters) -\u0026gt; string (check-expect (wipeout \u0026#34;Williams\u0026#34; \u0026#34;li\u0026#34;) \u0026#34;Wams\u0026#34;) (check-expect (wipeout \u0026#34;penguin\u0026#34; \u0026#34;dinosaur\u0026#34;) \u0026#34;peg\u0026#34;) Follow the design process and use the omit helper function!\n"
},
{
	"uri": "http://wy-cs.info/intermediate-cs/ch22a/99-hangman/99e-hangman-drawhandler-2/",
	"title": "22a. Hangman Draw Handler",
	"tags": [],
	"description": "",
	"content": " Draw the whole scene by using helper functions to draw the different parts. At first you can just put all of the images above each other; later you can change the placement so it looks the way you prefer.\n Draw the gallows based on how many wrong answers. Draw the mistaken letters. Draw the word with underscores for letters that are not guessed.  The key step is to draw the word with underscores for the letters missed.\nunderscorizer: string(word) string(letters-guessed) -\u0026gt; string (check-expect (underscorizer \u0026#34;wow\u0026#34; \u0026#34;w\u0026#34;) \u0026#34;w_w\u0026#34;) (check-expect (underscorizer \u0026#34;wow\u0026#34; \u0026#34;ow\u0026#34;) \u0026#34;wow\u0026#34;) Of course you can take in the correct guesses instead of all guesses, or you can take in anything else from your model that makes sense.\nAdvice Decide on an approach:\n Examine word letter by letter? Examine letters guessed letter by letter?  Write tests that build up to your solution in the way we have discussed and demonstrated in class.\nMany approaches work. If you have no preference, I recommend the first approach.\n"
},
{
	"uri": "http://wy-cs.info/intermediate-cs/part-i/ch11/11_3a/",
	"title": "11.3 Intro Slides",
	"tags": [],
	"description": "Intro to Chapter 11.",
	"content": " gas cost  number(miles) -\u0026gt; number(dollars) $3.09 per gallon 26 miles per gallon  bad idea (define (gas-cost miles) (* miles #i0.118846153)) good idea (define MILES-PER-GALLON 26) (define DOLLARS-PER-GALLON 3.09) (define (gas-cost miles) ; to do 0) even better: break it down  gas-needed cost-of-gallons gas-cost (improved)  "
},
{
	"uri": "http://wy-cs.info/intermediate-cs/part-i/ch11/11_3b/",
	"title": "11.3 Homework 1",
	"tags": [],
	"description": "Homework for 11.3",
	"content": " homework  11.3.1  gas-needed: number(miles) -\u0026gt; number(gallons) cost-of-gallons: number(gallons) -\u0026gt; number(dollars) gas-cost: number(miles) -\u0026gt; number(dollars) using the above  11.3.2 cylinder-volume 11.3.3 cylinder-area: find the surface area of a cylinder  Ask a search engine for the surface area and volume of a cylinder if you need them.\n"
},
{
	"uri": "http://wy-cs.info/intermediate-cs/part-i/ch11/11_6a/",
	"title": "11.6.1 House",
	"tags": [],
	"description": "Exercise 11.6.1 with help, from the book.",
	"content": " We discussed the following function using tools from Chapter 9:\n(centr \u0026#34;panda\u0026#34;) =\u0026gt; \u0026#34;*****panda*****\u0026#34; (centr \u0026#34;sinful\u0026#34;) =\u0026gt; \u0026#34;*****sinful****\u0026#34; (centr \u0026#34;conspicuous\u0026#34;) =\u0026gt; \u0026#34;**conspicuous**\u0026#34; Write a signature, purpose, and function for centr.\n We discussed 11.6.1, the house:\n identifying pieces of house separate functions for each piece how to create the roof   You should finish the house 11.6.1 for homework if you did not finish it in class.\n  "
},
{
	"uri": "http://wy-cs.info/intermediate-cs/part-i/ch11/11_6b/",
	"title": "11.6.2 Airline",
	"tags": [],
	"description": "",
	"content": "Make a plan before you start programming.\nThere are two essentials:\n Multiple functions! Variables to give your numbers meaning.  "
},
{
	"uri": "http://wy-cs.info/intermediate-cs/calendar/",
	"title": "Calendar",
	"tags": [],
	"description": "The course calendar and assignment sheet links.",
	"content": "The assigment sheet goes with the calendar. "
},
{
	"uri": "http://wy-cs.info/intermediate-cs/pro/",
	"title": "Pro Features",
	"tags": [],
	"description": "Brief descriptions of advanced topics that have come up in various individual projects.",
	"content": "This page contains information about advanced topics that I have been asked.\n Strings for Experts Strings: randomizing and creating by formula.\n  Build Image Build-image to create images from a formula for the pixel color.\n  Match Pattern matching lets you take apart structures into their component variables in a simple way. You can use (require racket/match) to activate pattern matching. Matching The match function is like cond except it checks to see if a value matches a certain \u0026ldquo;literal\u0026rdquo; pattern or question. It can create variables to use immediately instead of requiring a helper function. Problem Write a function that takes in a number or a posn and returns the distance to the correct origin (either 0 or (0,0)) depending on which type it gets.\n  "
},
{
	"uri": "http://wy-cs.info/ap-cs/news/data-science/",
	"title": "Data Science Summer Camp",
	"tags": [],
	"description": "A data science summer camp for CPS students.",
	"content": " There is a Data Science Summer Camp at DePaul.\nExecutive summary  Age: current sophomores and up. CS: finished Exploring CS. Math: have taken \u0026ldquo;geometry and/or algebra\u0026rdquo;.  Organizational Information  Location: DePaul University\u0026rsquo;s Loop campus Time: from 9:30 a.m. to 3:30 p.m. Dates: June 25th-29th, 2018  "
},
{
	"uri": "http://wy-cs.info/ap-cs/news/sail-uiuc/",
	"title": "CS Sail at UIUC",
	"tags": [],
	"description": "",
	"content": "Sail is a one-day event held at the Thomas M. Siebel Center for Computer Science. It is completely free to attend. They provide food and swag.\nGo learn more about computer science and life at the University of Illinois through classes taught by current students on topics ranging from Machine Learning and Virtual Reality to The Science of Bitcoin and Texas Hold\u0026rsquo;em Techniques. SAIL: CS @ Illinois\n Date: April 7, 2018 Busses from Chicago available - sign up now!  "
},
{
	"uri": "http://wy-cs.info/ap-cs/jm/ch14/ch14-test-corr/",
	"title": "14. Test Corrections",
	"tags": [],
	"description": "",
	"content": "Tests from Chapter 14 are returned Thursday/Friday.\nUnderstanding your score:\n Number: multiple choice score, out of 20.\n Letter below number: programming free response score.\n  Grading:\n 20 points multiple choice: turn in test corrections Monday for half points back.\n 20 points free response: discuss with me if you had problems here. (A=95%, B=85%, etc.)\n  Test corrections:\n Explain what the right answer is. Show work justifying you are correct. Code tracing (problems 2,8) - explain in writing what happens as you trace your example through the program.  "
},
{
	"uri": "http://wy-cs.info/intermediate-cs/pv-proj/pv-proj-quiz/",
	"title": "PV Project Quiz",
	"tags": [],
	"description": "Quiz on the concepts of the PV project.",
	"content": "Match the number. In this game you have a goal number, picked randomly by the computer. You start with 0 number displayed and 0 numerical velocity.\n Up arrow increase velocity. Down arrow decrease velocity. Every tick (0.2 sec), the displayed number changes by the velocity number. Velocity can\u0026rsquo;t be below 1 once you start moving. Color the changing number based on how far away from the goal number it is. Mouse click to reset the goal to a new random number and reset the displayed number and velocity to zero. Space bar to end game and invoke win screen (see below). Win screen:\n Win if you hit the number Lose if numbers are not the same    Suggested model:\n(define-struct g (n v goal))"
},
{
	"uri": "http://wy-cs.info/ap-cs/jm/ch13/13-quiz-1/",
	"title": "13. ArrayList Quiz",
	"tags": [],
	"description": "",
	"content": "  Change the sequence \u0026ldquo;I\u0026rdquo; \u0026ldquo;run\u0026rdquo; \u0026ldquo;fast\u0026rdquo; to \u0026ldquo;You\u0026rdquo; \u0026ldquo;and\u0026rdquo; \u0026ldquo;I\u0026rdquo; \u0026ldquo;run\u0026rdquo; \u0026ldquo;fast\u0026rdquo; every place that the former occurs.\npublic static void runfast(ArrayList\u0026lt;String\u0026gt; data) No mice. Remove every \u0026ldquo;mouse\u0026rdquo; (or \u0026ldquo;mice\u0026rdquo;) in the input.\npublic static void noMouse(ArrayList\u0026lt;String\u0026gt; school)  Advanced Read Wolfram\u0026rsquo;s numbering scheme for one dimensional cellular automata. Write a function that creates a new ArrayList according to a given rule number.\npublic static ArrayList\u0026lt;Boolean\u0026gt; evolve (int rule, ArrayList\u0026lt;Boolean\u0026gt; data)"
},
{
	"uri": "http://wy-cs.info/intermediate-cs/ch21b/pv-tick-handler/math-soln-2/",
	"title": "Math Soln 2",
	"tags": [],
	"description": "",
	"content": "(define (h x) (g (f x)))"
},
{
	"uri": "http://wy-cs.info/intermediate-cs/ch21b/pv-tick-handler/math-soln-1/",
	"title": "Math Soln 1",
	"tags": [],
	"description": "",
	"content": "(define (h x) (- (sqr (+ (* 3 x) 1)) 9))"
},
{
	"uri": "http://wy-cs.info/ap-cs/news/",
	"title": "News",
	"tags": [],
	"description": "",
	"content": "  ProCom 4   CodeJam 2018   Data Science Summer Camp   CS Sail at UIUC   "
},
{
	"uri": "http://wy-cs.info/ap-cs/jm/ch12/12-ex/",
	"title": "12. Book Exercises",
	"tags": [],
	"description": "",
	"content": " Chapter 12, exercises 23, 24, and 25. Write tests to prove that your work is correct. Those exercises, restated here, are:\nExercise 23: Rotate  public static int[] rotateLeft(int[] a) public static int[] rotateRight(int[] a) public static int[] rotate(int[] a, int amount): Rotate by amount to the right, so to the left when amount is negative.  Exercise 24: Add Digits  Add two positive numbers given by arrays representing the individual digits.\npublic static int[] add(int[] a, int[] b)\nExample 923+94=1017:\n@Test public void test_add_1() { int[] a = {9,2,3}; int[] b = {9,4}; int[] ans = {1,0,1,7}; assertArrayEquals(ans, add(a,b)); }  Exercise 25: Average Two Largest  Find the average of the greatest two elements in an array.\npublic static double largestAverage(int [] data)\n@Test public void test_largest_average() { int[] data = {100,40,90,30}; assertEquals(95, largestAverage(data), 0.1); int[] fdata = {-1000,-30,-31,-80}; assertEQuals(-30.5, largestAverage(fdata), 0.1); }  "
},
{
	"uri": "http://wy-cs.info/ap-cs/jm/ch12/12-chomp/",
	"title": "12. Chomp",
	"tags": [],
	"description": "",
	"content": " Class JavaMethods GitHub -\u0026gt; Chomp project directory -\u0026gt; CharMatrix class. The CharMatrix code can be copy-and-pasted into Repl.it or DrJava. Make sure you test your code as you go, so you know what the problems are. There is a tester file in the Chomp project directory that works with DrJava.\nIssues  Using DrJava: how do you run the tests? Answer: Make sure the file CharMatrixTester.java is in your project. Click Compile Project and then Test Project.\n CharMatrixTester.java was updated on GitHub; sorry about the incorrect test results.\n  "
},
{
	"uri": "http://wy-cs.info/intermediate-cs/sem1review/sem-review-topics-1/",
	"title": "Semester Review Topics List",
	"tags": [],
	"description": "Major topics missed on Chapter 20 test: randomness, consistent signatures for big-bang, good testing.",
	"content": " We have learned about randomness, writing consistent signatures for big-bang, writing high quality tests, and how to limit numerical values.\nRecent major topics  Randomness\n Work with a non-random function first.  Non-random function has more parameters than random version. Testable.  Random function  Calls non-random function with random input. Not usually tested.   Signatures / Big-Bang\n Information flow must be consistent Write signatures for everything Test everything individually Use check-with to catch signature errors. (See below.)  Testing\n Write two tests for each function. Especially when you do not know how to make it work! (Fight instinct to just hack.) Use different numbers for each argument in a test. (Why is this important?)   Minor Topics Still important enough to mention.\n Numerical functions that limit or convert values:\n min, max to limit values real-\u0026gt;int round, ceiling, floor  People coordinates\n Changing to and from  String functions.\n substring: both the two and three argument versions.    Details on check-with Example in big-bang is: (check-with posn?). More in click-circle writeup. The check-with command is first introduced in Chapter 8, book page 137, PDF page 148.\n"
},
{
	"uri": "http://wy-cs.info/intermediate-cs/ch20/ch20-results/",
	"title": "20. Test Results",
	"tags": [],
	"description": "",
	"content": "The edited chapter 20 test and brief scoring guide.\nYou should review your solution and figure out good ways to do everything. Practice good coding - especially testing as you rewrite.\n"
},
{
	"uri": "http://wy-cs.info/ap-cs/jm/testing/testing-medium/",
	"title": "Unit Testing Level II",
	"tags": [],
	"description": "Slightly more advanced unit testing commands and techniques.",
	"content": " You can make common setup code run with @Before. Use it to give instance variables their initial values for each test. This method runs once before each test, so it will reset the variables to the values you want them to have at the start.\nCommon setup for all tests @Before: Method runs before every test. Used to set up instance variables containing objects to be tested.\nprivate int maxNum; @Before public void set_max() { maxNum = 4; } @Test public void test_max() { assertEquals(maxNum,4); } Many tests with the same setup I use parameterized tests. They may be to complex for beginners, but see my HospitalTest code on GitHub or the raw file.\n"
},
{
	"uri": "http://wy-cs.info/intermediate-cs/ch21a/21-ws-c/",
	"title": "21. Worksheet C",
	"tags": [],
	"description": "",
	"content": "You are going to create a new struct np that remembers both a number and a posn.\n Data definition: write a human-understandable description for np.\n Write the Racket code to define the np structure.\n Write two check-expect to verify that you get out the same information that you put in to the structure.\n Design and test np-set-num: np(old) number -\u0026gt; np(new) that sets the number in a given number-position structure.\n Design and test np-set-posn: np(old) posn -\u0026gt; np(new) that makes the posn of the np into the given posn.\n Go do Exercise 21.6.3 using the idea from this worksheet.\n  "
},
{
	"uri": "http://wy-cs.info/ap-cs/jm/ch12/12-arrays-2d/",
	"title": "12. Two Dimensional Arrays",
	"tags": [],
	"description": "Two dimensional arrays can represent temperatures across the states, locations of buildings, or hospital X-rays.",
	"content": " Fundamentals int[][] data = new int[30][60]; int rows = data.length; int cols = data[0].length; import java.util.Arrays; int[][] given = {{1,2},{3,4},{5,6}}; System.out.println(Arrays.deepToString(given)); Exercises  Write the makeBoard function that creates a matrix of ones surrounded by a moat of zeros.\npublic static int[][] makeBoard(int rows, int cols); int[][] result = makeBoard(5,7); System.out.println(Arrays.deepToString(result); /* 0 0 0 0 0 0 0 0 1 1 1 1 1 0 0 1 1 1 1 1 0 0 1 1 1 1 1 0 0 0 0 0 0 0 0 */ Make boxSplit, which takes in a 1D array of integers of even length and splits it into two rows (in \u0026ldquo;row major order\u0026rdquo;).\npublic static int[][] boxSplit(int[] data); int[] data = {10,20,40,80,120,160}; int[][] result = boxSplit(data); /* result == {{10,20,40}, {80,120,160}} */ Make the boxSplitV, which takes in a one dimensional array of integers of even length and splits it into two rows, but distributes the values in \u0026ldquo;column major order\u0026rdquo;.\npublic static int[][] boxSplitV(int[] data); int[] data = {10,20,40,80,120,160}; int[][] result = boxSplitV(data); /* result == {{10,40,120}, {20,80,160}} */ The colMax function takes in a (nonempty, rectangular) 2D array of data and returns a 1D array containing the maximum value from each column of the array.\npublic static int[] colMax(int[][] data); int[][] data = {{-50, 100, 40}, {-30, 0, 90}, {-40, 95, 30}}; int[] result = colMax(data); System.out.println(Arrays.toString(result)); // {-50,100,90}  More Links  Array 2D intro and Practice slides  "
},
{
	"uri": "http://wy-cs.info/ap-cs/jm/ch10/10-test/",
	"title": "10. Test",
	"tags": [],
	"description": "Test on strings and loops.",
	"content": "We took a test on Strings, a little bit of loops, and CodingBat. You should use the testing code template to make sure your code works before re-submitting it. Please resubmit Tuesday.\nYou should be able to copy and paste this code in to repl.it as well as using it in DrJava.\n"
},
{
	"uri": "http://wy-cs.info/ap-cs/jm/ch12/cb-array-2/",
	"title": "12. CodingBat",
	"tags": [],
	"description": "",
	"content": "Friday 2018-01-18: Complete 12 more CodingBat Array-2 exercises, for a total of 20. Due Tuesday.\n"
},
{
	"uri": "http://wy-cs.info/intermediate-cs/spaceinv/si-walkthrough/",
	"title": "SI Walkthrough",
	"tags": [],
	"description": "",
	"content": " Drawing  Draw alien at a given posn on a background\ndraw-alien: posn image(bg) -\u0026gt; image Draw turret at a given posn on a background\ndraw-turret: posn image(bg) -\u0026gt; image Draw bullet at a given posn on a background\ndraw-bullet: posn image(bg) -\u0026gt; image Draw win screen.\n Draw lose screen.\n  Action  Bullet activating function. This does not fit into our model so far.\nactivate-bullet: posn(turret-posn) -\u0026gt; posn(bullet-posn) Right arrow moves right, left arrow moves left\nturret-key-h: model(turret-posn) -\u0026gt; model(turret-posn)  Tick handler  Bullet moves up at a constant rate.\nupdate-bullet: posn -\u0026gt; posn Details: where should the bullet be when you start?\n Alien advances (harder).\nHow can you tell when to go right and when to move left? Discuss choices: y-coordinate or an extra direction parameter.\n  Logic For each of these, first write (or type) the information you will take as parameters in order to create the function. Do not include constants in your parameter list.\n enemy-right-edge?: posn (enemy-posn) number(direction) -\u0026gt; boolean enemy-left-edge?: posn (enemy-posn) number(direction) -\u0026gt; boolean bullet-hit-enemy?: posn (bullet-posn) posn (enemy-posn) -\u0026gt; boolean enemy-hit-turret?: posn (enemy-posn) posn (turret-posn) -\u0026gt; boolean game-over?: posn(bullet-posn) posn (enemy-posn) posn (turret-posn) -\u0026gt; boolean bullet-on-screen?: posn (bullet-posn) -\u0026gt; boolean can-fire?: posn (bullet-posn) -\u0026gt; boolean  Combining Now we need a model that will combine everything, and write handlers that combine the other handlers. They are going to look like basically like this:\n(define (real-tick-handler model) (alien-tick-handler (bullet-tick-handler model))) There are some technical details and I will end up providing functions that glue everything together.\n"
},
{
	"uri": "http://wy-cs.info/intermediate-cs/part-i/ch15/15-practice-quiz/",
	"title": "15. Practice Quiz",
	"tags": [],
	"description": "Practice quiz, adapted from a previous year.",
	"content": " Review Concepts  Design process (as always!). Signature, purpose, examples, function, check-expect. Especially plan to use the design process when you can not write the function.\n Helper functions as in: count-votes-4, who-won, 4-votes-\u0026gt;winner. Note that repeated code is not full credit.\n Decisions based on types of inputs (Section 15.8).\n  Quiz Questions You may not consult any person or any old homework when taking this quiz. You may consult the book and the Racket Help Desk without citing them.\n Write a function short-between? that determines whether a word (string) is short (less than 6 letters) and also is alphabetically between \u0026ldquo;good luck\u0026rdquo; and \u0026ldquo;quiz\u0026rdquo; (inclusive). Ignore the case of the words. Spaces should get no special treatment just use the built-in behavior.\n Define a function beautiful-gpa that takes in a grade point average, which is a decimal number between 0.00 and 6.00, and outputs an image of the that GPA number colored according to its value: at least 4.50 is green, 3.5\u0026lt;=gpa\u0026lt;4.5 is orange, 2.5\u0026lt;=gpa\u0026lt;3.5 is purple, 1.5\u0026lt;=gpa\u0026lt;2.5 is red, and below that range is dark magenta. Make sure it prints out cases like a GPA of 3.5 correctly.\n The game tryhard.io offers you special in-game abilities that you can buy for in-game diamonds. The long-distance shooter costs 150 diamonds, the super fast speed costs 200 diamonds, and the teleporter costs 400 diamonds. If your subtotal is at least 450 diamonds, you take a 10% discount to find your total. If your subtotal is at least 600 diamonds you take a 20% discount to find your total. (You are only eligible for one discount.) Write a function that takes in three number parameters. These determine how many shooter, speed, and teleporter abilities you purchase. Your function outputs the total cost.\n  "
},
{
	"uri": "http://wy-cs.info/resources/events/",
	"title": "CS Events",
	"tags": [],
	"description": "",
	"content": " Computing Olympiad\n Dec 15-18: First Contest Jan 19-22: Second Contest Feb 23-26: Third Contest Mar 23-26: US Open May 24-Jun 2: Training Camp Sep 1-8: IOI 2018 in Japan  Feb 24, 2018: Introduce a Girl to Engineering at UIC. 10am-2pm. Free. Register by Feb 16, 2018.\n Ladies Who Make. Tuesdays, 5-8pm. January 2 - May 22, 2018. Silkscreen. Laser cutter. Etched wood or acrylic. Modeling in 3D.\n  "
},
{
	"uri": "http://wy-cs.info/ecs-teach/scratch/",
	"title": "Scratch",
	"tags": [],
	"description": "",
	"content": "Resources (all are Google Drive shared folders):\n Introductory materials Variables Lists  There are quizzes as well; email me for access if you are an instructor.\n"
},
{
	"uri": "http://wy-cs.info/ap-cs/karel/karel-intellij/",
	"title": "Karel Intellij",
	"tags": [],
	"description": "How to use IntelliJ IDEA to work with our Karel the Robot configuration.",
	"content": " This documents using IntelliJ IDEA development environment. Way overkill unless DrJava is giving you trouble.\nEasy method  Clone the apcs-karel-intellij repository.\nThis is just a snapshot to get you started at home. I just copied all of the java files from the karel repository to a new directory in the correct place.\n  git clone https://github.com/2017-2018-wy-ap-cs/apcs-karel-intellij  IDEA has: File -\u0026gt; New -\u0026gt; Project from existing sources\u0026hellip; that will let you import my files. If you are lucky you can even just use my whole folder.   Step by step  New project in IDEA: File -\u0026gt; New -\u0026gt; Project\u0026hellip; Make lib and src subfolders. KarelJRobot.jar goes into lib. All java files go into src. IDEA:  File -\u0026gt; Project Structure\u0026hellip; -\u0026gt; Modules (under Project Settings on left) Select \u0026ldquo;Dependencies\u0026rdquo; tab. Use \u0026ldquo;+\u0026rdquo; and choose the KarelJRobot.jar file in the lib folder. I checked the box \u0026ldquo;Export\u0026rdquo;; not sure if that matters.  Build -\u0026gt; Build Project. I had to delete the \u0026ldquo;HackBot.java\u0026rdquo; since I did not include the hacked KarelHRobot library. Run -\u0026gt; Run\u0026hellip;  "
},
{
	"uri": "http://wy-cs.info/intermediate-cs/part-i/ch13/ch13-exa/",
	"title": "Ch13 Exercises",
	"tags": [],
	"description": "",
	"content": "  Exercises: 13.3.{3-5}, 13.4.1 Exercises: 13.4.2, 13.5.1 Exercises: 13.7.{2-7} Exercises: 13.7.{8-13}  Review Exercises that must be reviewed for understanding: 13.7.{7,9,12}.\nNotes:\n 13.7.7 play-craps 13.7.9 not-single-letter? 13.7.12 is-not-red-square?  "
},
{
	"uri": "http://wy-cs.info/ap-cs/karel/karel-hack/",
	"title": "Karel Hacked",
	"tags": [],
	"description": "",
	"content": "On GitHub, I have placed a KarelHRobot.jar that has a hacked UrRobot that has the following capabilities:\n street(): The current street the robot is on (row = y) avenue(): The current avenue the robot is on (column = x) direction(): The direction the robot is facing. beepers(): The number of beepers the robot has in its beeper bag.  I know some people have already enhanced UrRobot with similar capabilities. These hacks are to let the rest of you finish your project without learning every trick of Karel programming.\nThere is a sample project karelPlayProject.drjava that includes the hacked library. It also contains a demo HackBot.java that shows some of the functions in action. Update to get the most recent code from GitHub.\n "
},
{
	"uri": "http://wy-cs.info/intermediate-cs/part-i/ch11/house-project/",
	"title": "Home Project",
	"tags": [],
	"description": "Design your own house (art) and cost calculator (math). Practice managing complexity and good function-writing style.",
	"content": " In this project you will design a house of your own. You will write functions to create the house and functions to determine how much it will cost. Your costs do not have to be realistic.\nTimeline We will spend two whole days working on this in class. I expect it will take 2-4 additional hours outside of class, although this will depends on your understanding and how ambitious of a house you create.\nCheck in points:\n Paper sketch and function outline approved for house image. Style check of two completed functions. House functions completed. Paper outline of functions approved for costs. Cost functions completed.  Work days:\n Sketch house and check-in plan.  List three traits you can change. List functions needed. Write two of the house functions. (Work on house at home. Do at least two functions.)  Decide costs, outline functions needed. Start writing cost functions. Complete cost functions at home. We will need a third work day to finish up.  Due: Thursday after Thanksgiving (note: we will work on new material this week).\nHouse Make decisions on each of these areas. I have listed possibilities but you can choose other ideas as well. Be creative and have fun.\n Shape of the roof: triangle, isosceles trapezoid, rectangle. Height of roof: fixed height, fixed slope. Base: probably a rectangle but could be an octagon, several triangles, or make your own shape. Option: Stilts? In hurricaine-prone areas, houses are built on stilts twelve feet off the ground so that a typical storm surge does not touch the ground floor. Door: maybe one rectangle or two rectangles; could be a sliding patio-door type. Windows could vary in height and style.  fixed height or make them grow taller as the house gets taller. windows of various sizes or styles (like add a smaller attic window) rectangular, octagonal, curved on top  Color: the whole house could vary in color, or certain parts could be colored similarly, some parts could always be the same color (like white windows or a grey roof).  Cost  Window cost depends on the dimensions and possibly shape. Door cost is probably always the same, but you could have multiple doors so they cost more. Base of the house cost should depend on the dimensions. (Attention: subtle instructions! ) Roof cost depends on the area of the roof. You are almost certainly drawing a front view, so you should make the cost of the roof depend on the length of the top side that represents the part where the shingles would go.\nExample: let\u0026rsquo;s say your roof costs $16/\u0026ldquo;foot\u0026rdquo;. Suppose you have made a roof by putting two 3-4-5 right triangles together. The part that you are going to count as the actual roof (for cost purposes) is the top two sides (hypotenuses). Each hypotenuse is 5ft, giving you 10ft of roof, which is a cost of $160.\n  Style and Checks Your project must be written in the style of a high quality Racket program:\n Functions are small and do only one job. VARIABLES are used to give meaning to the raw numbers you use. Meaningful names for function parameters. (Use \u0026ldquo;ticket-price\u0026rdquo; not just \u0026ldquo;x\u0026rdquo;.) Check-expects for all functions. Line breaks and indentation: close as many parentheses as you want, then move to the next line. Your code must not change when auto-indented.   Creativity Feel free to be creative. Houses can have decoration (images and colors). Shapes do not have to be limited to triangles and rectangles - Racket has many shapes available!\nStudent Work Linked are three examples of initial sketches:\n Sketch 1 Sketch 2 Sketch 3  Inspiration  Cathedrals and Temples: Truro, Bristol, Notre Dame, Kinkaku-ji Golden Temple, Florence Cathedral Exotic homes: prefab on a lake, Giza Pyramids visitor center Other: Taj Mahal  "
},
{
	"uri": "http://wy-cs.info/intermediate-cs/part-i/ch09/ch9-ex3/",
	"title": "9. Exercises 3",
	"tags": [],
	"description": "",
	"content": " Write signature, purpose, function:\n(check-expect (quiz \u0026#34;bucket\u0026#34;) \u0026#34;ket----\u0026#34;) (check-expect (quiz \u0026#34;ketchup\u0026#34;) \u0026#34;chup---\u0026#34;) (check-expect (quiz \u0026#34;chappatis\u0026#34;) \u0026#34;patis--\u0026#34;) Write signature, purpose, function:\n  (check-expect (qq \u0026#34;walrus\u0026#34;) \u0026#34;rus-wal\u0026#34;) (check-expect (qq \u0026#34;banak\u0026#34;) \u0026#34;ak-ba\u0026#34;) (check-expect (qq \u0026#34;longaword) \u0026#34;word-long\u0026#34;)"
},
{
	"uri": "http://wy-cs.info/intermediate-cs/part-i/ch08/test-corrections/",
	"title": "8. Test Corrections",
	"tags": [],
	"description": "",
	"content": "Chapter 8 Test\nDo corrections for +8 or more points of credit.\nCorrections mean complete, correct following of the design process for each function.\nScores will still be \u0026ldquo;curved\u0026rdquo;.\n"
},
{
	"uri": "http://wy-cs.info/intermediate-cs/part-i/ch08/number-review-more/",
	"title": "Number Review More",
	"tags": [],
	"description": "",
	"content": "More review problems:\n Make an ellipse on a background.\n The ratio of the width to the height of the ellipse is 3 to 4. The x-coordinate of the mouse controls the width. Hit any key to reset the ellipse to 60 by 80.   A point moves on the graph of y = abs(x-90).\n The point starts at (0,90). The point goes back to (0,90) after it gets to (200,110). The origin is in the lower left (people coordinates, quadrant I). Moving the mouse makes the point go faster.  A straight line goes through (50,25) and the point where the mouse is.\n Racket Help Desk: Drawing a line   Solutions: 1, 2, 3.\n"
},
{
	"uri": "http://wy-cs.info/intermediate-cs/e-courses/",
	"title": "Online Help",
	"tags": [],
	"description": "",
	"content": " The best resource I am aware of is Gregor Kiczales\u0026rsquo; course How to Code: Simple Data. The course is available for free through edX.\nKiczales Course Structure The two most important parts of the course (from my point of view) are:\n Module 1b: How to Design Functions. The design process.\n Module 3a: How to Design Worlds. Big-bang.\n  Other Resources Signing up for a free online course is too much commitment? You could browse the YouTube playlists of Professor Kiczales. The first video of Summer 110 Weeks 3-4 is an introduction to big-bang.\n"
},
{
	"uri": "http://wy-cs.info/ap-cs/haskell/connect-four/testcases/",
	"title": "Connect Four Testcases",
	"tags": [],
	"description": "",
	"content": "The testcases zip file contains all of the template files.\nYou can also download them one by one:\n Connect Four TestConnectFour User Interface for Connect Four Main method in its own file  It may help you to start from my repl.it workspace with all of the testing code already in it. Your code should go in ConnectFour.hs. You may need to edit some of the function names. The list of what they are supposed to be is at the start.\n"
},
{
	"uri": "http://wy-cs.info/intermediate-cs/part-i/ch07/exercises-4/",
	"title": "More Exercises 4",
	"tags": [],
	"description": "",
	"content": " Tuesday Oct 24 Exercises 7.7.{18,20,22} on page 123 (PDF page 134). These are:\n convert-3-digits top-half progress-bar  Wednesday Oct 25 Write every part of the design process except the function:\n count-factors: take a number N and find out how many numbers 1,2,\u0026hellip;,N divide N.\n angle-pts: take in six numbers (x1,y1) (x2,y2) (x3,y3) and give the angle in degrees made by line segments going to those three points in that order.\n Classwork: make a point follow the graph of y = sqrt(100^2-x^2) from x=-95 to x=95 (Don\u0026rsquo;t like math? Use the graph of the function y = 3x+50 on the same interval.)\n Homework: 8.3.6 page 142 (PDF page 153). Parabola graph.\n  Thursday Oct 26  8.4.3 page 146 (PDF 157). Dot doubles in size every 5 seconds and shrinks by 4 pixels every keypress.  "
},
{
	"uri": "http://wy-cs.info/ftc/",
	"title": "Robophins 3216",
	"tags": [],
	"description": "",
	"content": " This is the web page for the First Tech Challenge team 3216, Robophins from Whitney Young.\nMeet Schedule  November 11 at Horizon Science Academy, 2245 W Pershing Road, 1-6pm. December 9 at Back of the Yards, 2111 W 47th Street, 7:30am-12:30pm. January 27 at UIC Student Center, 750 S Halstead, 11am-4pm. February 10 at Amundsen High School, 7:30am-6pm. February 23-24: FTC State finals in Elgin, IL, see linked document.  Game Resources  2018 Relic Recovery Resources\n Rules manual: part 1 and part 2.  2018 Official Q\u0026amp;A. Limited responses to official queries.\n  Read Forums  Chief Delphi Forum. Especially the FTC Subforum.\n FTC subreddit. Blocked in CPS. Excellent source of information from other teams and mentors.\n  Watch Videos There are tons of Ri3D (robot in 3 days) or Ri1W (robot in 1 week) videos available.\n Robot in 3 days Acto Defacto  Robophins Code  Robophins git repository\nClone repository with command:\ngit clone --depth=1 git@github.com:2017-2018-wy-robophins/ftc_app.git Make sure to get added to the Robophins organization on github so you can push your changes! You can read how to Get Started with Git elsewhere on this site.\n  "
},
{
	"uri": "http://wy-cs.info/ecs-teach/",
	"title": "Exploring CS (Teachers)",
	"tags": [],
	"description": "",
	"content": " This page is dedicated to teacher links for Exploring Computer Science.\n Scratch Resources are on a separate page.  Web Hosting Platforms  Cloud9\n Cost: $1/teacher/month = basically free. Live display of website results. Easy to upload images. (\u0026ldquo;Upload local files\u0026hellip;\u0026rdquo;) Interface is busy (lots of features, maybe too many for a beginner). Many languages.  Repl.it\n Cost: No upload of images. Nice simple interface for beginners. Many languages including Python with turtle graphics.    Editors: Mac  TextMate 2.0beta. Tested and works fine on modern Mac OS (10.12) as well as older.  Light weight (13MB) Can run off a flash drive; no Administrator required. HTML mode highlights and saves as \u0026ldquo;.html\u0026rdquo; automatically.   Editors: Windows  NotePad++.  "
},
{
	"uri": "http://wy-cs.info/intermediate-cs/part-i/ch07/exercises-3/",
	"title": "Exercises 3",
	"tags": [],
	"description": "",
	"content": " Write a function at-most-250 that takes in a number and puts out the same number, or 250 if the number is larger than 250.\n Write a function small-0 that takes in two numbers and gives out the distance to zero of the number that is closest to zero on the number line. It should work with negative numbers as well.\n Write a function stuck-50-150 that takes in a number x and gives out x. Except if x is below 50, give an answer of 50. Also if x is more than 150, give an answer of 150.\n random-3: Write a function that gives a random number between -50 and 50.\n random-4: Write a function that gives a random even number 0-200.\n dice: Write a function that gives the total from randomly rolling two six sided dice.\n rstar: Write a function that makes a star with a random side length.\n dstar: Write a function that makes two stars next to each other, one should have a random side length and the other should have sides that are twice as long.\n Challenge: make a star with a random number of sides. For the third number, the \u0026ldquo;step\u0026rdquo;, try (remainder 31 sides). You will want a helper function that knows the number of sides.\n  "
},
{
	"uri": "http://wy-cs.info/intermediate-cs/part-i/ch07/maxmin/",
	"title": "Max and min slides",
	"tags": [],
	"description": "Slideshow of exercises to learn max, min, abs, and random.",
	"content": " Maximum, Minimum, Random Make a Table Max = greatest. Min = least. Abs = absolute value.\n   x (min x 10) (max x 10) (abs x)     -15      -5      \u0026hellip;       Include x = 8, 13, 18 as well.\nWhich keeps numbers small?    x (min x 10) (max x 10) (abs x)     -15 -15 10 15   -5 -5 10 5   8 8 10 8   13 10 13 13   18 10 18 18    Use Check-expect Always write check-expects when keeping numbers small or large. It is very easy to have mistakes in this kind of code.\nRandom (random 5) =\u0026gt; 0, 1, 2, 3, 4\n( ???? ) =\u0026gt; 0, 1, 2, \u0026hellip;, 100\nRandom range (random 101) =\u0026gt; 0, 1, 2, \u0026hellip;, 100\n( ???? ) =\u0026gt; 50, 51,52, \u0026hellip;, 150\nRandom functions Beginning student needs at least one parameter for a function. You can give the parameter a job if you want:\n(define (random start-num) (+ start-num (random 101)) Checking random?  Uses random number? Test a helper function.\n Produces a random number? No check.\n  "
},
{
	"uri": "http://wy-cs.info/intermediate-cs/part-i/ch07/random/",
	"title": "Randomness",
	"tags": [],
	"description": "Making random numbers.  Testing functions that use random numbers.",
	"content": "  Random numbers: (random 3) gives a random number 0, 1, or 2. Notice that there are three possible answers, but they start counting at 0. Run the code below and you should get different answers each time. racket (random 10) (random 10) (random 10)   Random ranges We use the phrase \u0026ldquo;from 10 to 200\u0026rdquo; or \u0026ldquo;between 10 and 200\u0026rdquo; to both mean all of the integers n so that 10\u0026lt;=n\u0026lt;=200.\n How many numbers are there from 10 to 200, inclusive? It\u0026rsquo;s easy to make a mistake. My favorite method is to subtract a number to make the bottom of the range start counting at one.\nBe sure you understand the previous paragraph before reading on!\nWhen you already have a random number from 0 to 50, how can you get a random number between 30 and 80?\nUsing randomness It is hard to test random functions, so write non-random versions first, and use the randomness as an input. Test the non-random functions!\nExample: Make an ellipse of a random height 150-250 pixels tall, and twice as wide.\n; make-ellipse-nr: string(color) number(height) -\u0026gt; image ; purpose: make an ellipse height units tall and 2*height units wide in the given color (define (make-ellipse-nr color height) (ellipse (* 2 height) height \u0026#34;solid\u0026#34; color)) ; see below for check-expect (define (make-ellipse color) (make-ellipse-nr color (+ 150 (random 101))))  Test your nonrandom function well!   "
},
{
	"uri": "http://wy-cs.info/intermediate-cs/part-i/ch07/exercises-2/",
	"title": "Exercises 2",
	"tags": [],
	"description": "Exercises working with number functions.",
	"content": "Exercises:\n hypotenuse: Given the lengths of two legs of a right triangle, return the length of the third side.\n slope: Given the x and y coordinates of two points (x1,y1) and (x2,y2) - in that order - return the slope of the line between those points. (OK if it does not work for vertical lines.)\n distance: Given the x and y coordinates of two points (x1,y1) and (x2,y2), find the distance between them.\n quadratic-1: Given a, b, and c, find one solution to the equation a x^2+b x + c = 0.\n quadratic-2: Given a, b, and c, find the other solution to a x^2+b x + c = 0.\n Make an animation with a number model. Use the number to control the current amount of rotation of the object. The tick handler makes the object spin. Moving the mouse causes the animation to spin faster. Make hitting a key reset the position to zero.\n  "
},
{
	"uri": "http://wy-cs.info/intermediate-cs/part-i/ch07/exercises-1/",
	"title": "Exercises 1",
	"tags": [],
	"description": "Exercises.",
	"content": "Practice the design process making each of these functions:\n Write a function that takes in the radius of a circle and outputs the circumference.\n Write a function to find the cost of a cart full of g pounds of grapefruit and b pounds of bananas. The grapefruit costs $1.49/lb and the bananas cost $0.59/lb.\n  "
},
{
	"uri": "http://wy-cs.info/ap-cs/haskell/connect-four/rubric/",
	"title": "Connect Four Rubric",
	"tags": [],
	"description": "",
	"content": " DRAFT: MAY CHANGE\nThere are four functions that you are expected to design and test:\n draw_board: Create a String representation of the board. is_legal_move: True if the attempted move is legal. Used to prevent players from moving in full columns or playing in column -5. is_won: True if the game is over (either player has four in a row). make_move: Gives a new Board with a piece added. Assumes that the move is legal.  To keep scoring straightforward, each function is worth 10 points.\nDraw Board This should draw with no issues, showing the board each row on its own line. I do not anticipate problems with this function.\nMake Move  5 points: piece falls to the bottom of the row when empty (basic move) 5 points: piece falls to the appropriate place (follows all rules)  Is Legal Move  5 points: moves outside of board are not allowed (column negative or too large) 5 points: moves not permitted in full column  Is Won  5 points: horizontal and vertical wins detected 5 points: diagonal wins detected  Deductions  Brute force instead of a thoughtful approach (-4)  "
},
{
	"uri": "http://wy-cs.info/intermediate-cs/part-i/ch06/daily/2017-10-12/",
	"title": "2017-10-12",
	"tags": [],
	"description": "",
	"content": " Make an animation of a dog that:\n gets bigger every time you hit a key (every key).\n gets smaller when you move the mouse.\n  Memorize Memorize the steps of the design process!\n"
},
{
	"uri": "http://wy-cs.info/intermediate-cs/design-process/",
	"title": "Design Process",
	"tags": ["design-process"],
	"description": "",
	"content": " Function The function design process that we use is:\n Signature Purpose Examples (two) Function - write it.\n4A. Skeleton - not visible when finished. Check-expect - examples provide correct answers.  Animations  See Chapter 6 Animations for the design process as it applies to writing animations (big-bang).\n The Animations Slides detail the issues when writing handlers.\n  "
},
{
	"uri": "http://wy-cs.info/intermediate-cs/part-i/ch06/daily/2017-10-10/",
	"title": "2017-10-10",
	"tags": [],
	"description": "",
	"content": " Flying purple rectangle  Make a small rectangle centered in the middle of the bottom of a big white rectangular canvas. As time goes on the rectangle should move up.\n  Growing diamond. Make a diamond that sits on the right side of the page and gets larger.  "
},
{
	"uri": "http://wy-cs.info/intermediate-cs/part-i/ch06/daily/",
	"title": "Daily Animations",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://wy-cs.info/ap-cs/haskell/connect-four/",
	"title": "Connect Four",
	"tags": ["haskell", "project"],
	"description": "Connect Four project description, including function signatures.",
	"content": " Due Monday, October 16. See timeline.\nFamiliarize yourself with the game of Connect Four, possibly playing a few games.\nFunctions to write This is a minimum set of functions to write:\n draw_board :: Board -\u0026gt; String\nCreate a String representation of the board.\n make_move :: Board -\u0026gt; Player -\u0026gt; Position -\u0026gt; Board\nGives a new Board with a piece added. Assumes that the move is legal.\n is_legal_move :: Board -\u0026gt; Player -\u0026gt; Position -\u0026gt; Bool\nTrue if the attempted move is legal. Used to prevent people from playing in full columns or off the board (e.g., column -5). The computer uses this information to decide whether the next move should be by the same player (attempted move was illegal) or the opponent.\n is_won :: Board -\u0026gt; Bool\nTrue when either player has four in a row on the board.\n  Advanced functions When you are done with the minimum set of functions, consider writing functions that make better and better moves.\n any_legal gives the first legal move it finds.\n win_or_any_move is an improvement over any_legal that makes a winning move if there is one.\n win_or_get_three is an improvement over win_or_random_move that plays to get three in a row if it cannot get four in a row.\n best_move picks a move that will lead to a win if one exists and avoids moves that lead to losing.\n  The last function is the most interesting, but will require doing some outside reading on the minimax algorithm, perhaps looking at an implementation for Connect Four.\nDesign process Make a plan before you start writing code! I recommend the top-down design that we discussed last year.\nPlease have each step of the design process visible for each function. It will speed your work and made it easier to understand!\n Purpose for the function Signature for the function Example(s) showing how the function will work. Write the function. Testing: put the examples for the function called work into a function called test_work.  Technical details  Question: How do you print on more than one line?\nAnswer: Put \u0026ldquo;\\n\u0026rdquo; in your string. For example: \u0026ldquo;One line\\nSecond line\u0026rdquo;.\nExample:\ndrawBoard xs = \u0026#34;__XX\\n_OOO\u0026#34; main = do putStrLn $ drawBoard [[0,0,1,1],[0,2,2,2]] Question: What is the difference between \u0026lsquo;X\u0026rsquo; and \u0026ldquo;X\u0026rdquo;?\nAnswer: \u0026lsquo;x\u0026rsquo; is a character (Char), and \u0026ldquo;X\u0026rdquo; is a String, which is a list of characters.\n Question: How do you define a type shortcut?\nAnswer: type Board = [[Int]]\n Question: How do you define a struct?\nAnswer: it will be easier if you do not do this, but Chapter 8 in LYaH has all of the information you need.\n  "
},
{
	"uri": "http://wy-cs.info/intermediate-cs/part-i/ch06/daily/animation-practice/",
	"title": "Animation Practice",
	"tags": [],
	"description": "Practice writing big-bang code and identifying common errors.",
	"content": "Progress bar 1 Make a solid purple bar that starts in the middle of the left side of the screen and grows to the right at a constant rate.  Model\n Draw handler\n Tick handler\n  Add in a feature so that the bar shrinks when you wiggle the mouse.\n(Solution code)\nErrors #1 What is wrong?\nThe variable indoors is an indoor picture.\n(define indoors ...) (define model (overlay pic:stick-figure (empty-scene 300 200))) (define (tick-h img) (overlay img indoors)) Errors #2 What is wrong?\n(define start pic:stick-figure) (define tick-h (beside (square 10 \u0026#34;solid\u0026#34; \u0026#34;white\u0026#34;) start)) (big-bang start (on-draw show-it) (on-tick tick-h)"
},
{
	"uri": "http://wy-cs.info/ap-cs/haskell/daily/2017-10-04/",
	"title": "2017-10-04",
	"tags": ["haskell"],
	"description": "More CodingBat problems.",
	"content": " Without10 (source). Take a list of numbers and remove all of the tens. The remaining numbers shift toward the start of the list and zeros fill in at the end.\n NotAlone (source). We will say that an element in an array is \u0026ldquo;alone\u0026rdquo; if there are values before and after it, and those values are different from it. Return a version of the list where every instance of the given value which is alone is replaced by whichever value to its left or right is larger.\n TwoTwo (source). True if every two is that appears in the list is next to another two.\n pre4 (source). Given a non-empty array of ints, return a new array containing the elements from the original array that come before the first four in the original array.\n  "
},
{
	"uri": "http://wy-cs.info/ap-cs/haskell/usaco/haybales/",
	"title": "Haybales",
	"tags": [],
	"description": "",
	"content": "The haybales problem is from Bronze 1, December 2016. In this directory you can download the starter code. If you are new to Unix, you unpack it with the command tar zvxf usaco-y2016-m12.tar.bz2. Inside there is a README.md file that has a few more instructions.\n"
},
{
	"uri": "http://wy-cs.info/intermediate-cs/part-i/ch04/homework/",
	"title": "Chapter 4 Homework",
	"tags": ["homework"],
	"description": "",
	"content": " Thurs, 2017-09-28: Do four exercises: 4.2.{2,4}, 4.3.1, and 4.4.1.\n Fri, 2017-09-29: Read section 4.5 so you can use check-expect.\n Mon, 2017-10-02: Chapter 4 Additional Exercises, problems 1 and 2.\n Tues, 2017-10-03: Chapter 4 Additional Exercises, problems 3\u0026ndash;6. Learned how to boot lab computers into Linux; use that if they are too slow with Windows.\n Wed, 2017-10-04: Non AC only - TBA\n Thurs, 2017-10-05: Chapter 6. TBA\n Fri, 2017-10-06: Chapter 6. TBA\n  "
},
{
	"uri": "http://wy-cs.info/ap-cs/haskell/daily/2017-10-03/",
	"title": "2017-10-03",
	"tags": ["haskell"],
	"description": "CodingBat problems to improve your problem-solving skills.",
	"content": " (Previous class leftover.) Write only14 (source) that takes in a list of numbers and gives a boolean result. The result is true if every number in the list is either a 1 or a 4.\n Write isEverywhere(source). \u0026ldquo;We\u0026rsquo;ll say that a value is \u0026ldquo;everywhere\u0026rdquo; in an array if for every pair of adjacent elements in the array, at least one of the pair is that value. Return true if the given value is everywhere in the array.\u0026rdquo;\nWe discussed how to program this one, including the tricky edge cases like stopping when there are two elements left in the list instead of one or zero.\n Write haveThree (source), which returns true if the number 3 appears three times in the list, and no threes are next to each other in the list.\nhaveThree:: [Int] -\u0026gt; Bool (Homework) The cow signal. Briefly: take in a [[Int]] with every entry 0 or 1. Produce a [[Int]] with four entries in a square corresponding to every one entry in the original. If you made a picture with the rows of 0\u0026rsquo;s and 1\u0026rsquo;s, the new picture would be twice as wide and twice as high.\n  "
},
{
	"uri": "http://wy-cs.info/ap-cs/haskell/ch06/ch06-reading-guide/",
	"title": "Chapter 6 Reading Guide",
	"tags": ["haskell", "reading-guide"],
	"description": "",
	"content": " Take in a list of numbers and output a list containing all of the numbers greater than 8.\n Take in a list of numbers and output a list containing all of the numbers between 10 and 20 (inclusive).\n Take in a list of numbers. Multiply all of the numbers in a list by 10 to make the output list.\n Take in a list of lists. Arrange the list of lists according to how many elements each list has, so longer sublists go first and shorter sublists go later.\n  "
},
{
	"uri": "http://wy-cs.info/resources/why-racket/",
	"title": "Why Racket?",
	"tags": [],
	"description": "",
	"content": " Many people we encounter tell us they wish they knew how to code and then ask which programming language they should learn. Given the press that some programming languages get, this question is not surprising. But it is also wholly inappropriate. Learning to program in a currently fashionable programming language often sets up students for eventual failure. Fashion in this world is extremely short lived. A typical “quick programming in X” book or course fails to teach principles that transfer to the next fashion language. Worse, the language itself often distracts from the acquisition of transferable skills, at the level of both expressing solutions and dealing with programming mistakes.\n\u0026ndash; Felleison et al, How to Design Programs, Second Edition.\n To understand why Racket is a good language to learn, one need read no further than Section 0.1 of Stephen Bloch\u0026rsquo;s Picturing Programs. Please read it now if you have not.\nTo summarize, here are major arguments for choosing Racket over a more \u0026ldquo;popular\u0026rdquo; programming language:\n Racket\u0026rsquo;s uniform syntax (everything is in parentheses, no order of operations, means that everything you do learn is a real intellectual concept.\n Racket works without any incantations that cannot be understood by a beginner. Example: Java\u0026rsquo;s public static void main (String[] args) incantation.\n Racket\u0026rsquo;s language levels protects you from advanced features that could be misunderstood at the start, but lets you continue to program in the same familiar language with more advanced features when you are ready.\n Any language you choose will be obsolete by the time you enter the workforce in 4-8 years, so effort spent learning language-specific syntax is not productive. Instead, you need to learn how to learn a new language. Most programmers find themselves working in a variety of languages depending on the requirements of their current task.\n Paul Graham\u0026rsquo;s article Beating the Averages explains how they used Lisp to make a very successful business (it was worth almost $50 million when it was purchased by Yahoo!). Lisp is a language very similar to Racket.\n Racket includes a way to build web applications as well as a graphical user interface builder that works on any kind of computer.\n Nobody should pass judgement on Racket until they understand the macro system that it has! Consider that a challenge if you are an advanced student.\n  "
},
{
	"uri": "http://wy-cs.info/ap-cs/haskell/ch04/ch04-quiz/",
	"title": "Chapter 4 Quiz",
	"tags": ["haskell", "quiz"],
	"description": "",
	"content": " All functions should include appropriate type signatures.\n Define a function f that takes one number as input. If the number is 1 or 100, the answer is 99. If the number is 1000 or 10000, the answer is 6. In any other case, the answer is five times the input.  Mountain Questions The questions below all refer to a \u0026ldquo;mountain range\u0026rdquo;, which is a list of integers specifying the height in feet above sea level.\n Base camp is half of the height of the highest mountain. New mountains start/end when altitude goes above/below base camp. The mountain range data is guaranteed to begin and end with a number below the height of base camp.  Example:\nmountains = [0, 50, 100, 99, 98, 50, 75, 60, 20, 10, 15, 10, 90, -5] highestPeak mountains == 100 baseCamp mountains == 50 countPeaks mountains == 3 tallestWidth mountains == 4 In the example above, the three mountains are:\n [50,100,99,98,50] with width = 4 [50,75,60,20] with width = 3 [10,90,-5] with width = 2   Find the height of the highest mountain..\n Write a function to find the height of base camp.\n Write a function to count the number of peaks.\n Write a function to estimate the width of the tallest mountain.\n  "
},
{
	"uri": "http://wy-cs.info/ap-cs/haskell/ch05/ch05-reading-guide/",
	"title": "Chapter 5 Reading Guide",
	"tags": ["reading-guide"],
	"description": "",
	"content": "The purpose of reading this section is to see how an experienced author writes functions that work on lists. Functions:\n maximum: Two different versions. replicate take reverse repeat zip elem quicksort: This one takes some thinking to understand.  After you have read the chapter, write answers to these questions:\n What is the main idea behind the quicksort function?\n Write the insertBefore function that places an element before the current item with the given index in a list. Use as few built-in functions as you can. This is a thinking exercise not a practical exercise \u0026ndash; figure out how to do it without take, drop or splitAt. insertBefore :: Int -\u0026gt; a -\u0026gt; [a] -\u0026gt; [a] insertBefore n item xs = undefined -- Examples: insertBefore 0 3 [5,7] == [3,5,7] insertBefore 1 6 [5,7] == [5,6,7] insertBefore 2 9 [5,7] == [5,7,9]\n The allPermutations function takes in a list and returns a list of lists. The output contains every permutation of the input list exactly once. (Treat all of the input list elements as distinguishable; see last test case.) The permutations do not have to appear in the order given below.\nallPermutations [1,2] == [[1,2],[2,1]] allPermutations [1,2,3] == [ [1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]] allPermutations [1,1] == [[1,1],[1,1]] -- do not try to see the items are the same Write the combinations function that takes in a number k and a list, and returns a list of lists. The output contains every distinct k item subset of the list (keep the items in the order they appear in the original list).\ncombinations 2 [1,2,3] == [[1,2],[1,3],[2,3]] combinations 3 [1..5] == [[1,2,3],[1,2,4],[1,2,5],[1,3,4],[1,3,5], [1,4,5],[2,3,4],[2,3,5],[2,4,5],[3,4,5]] Write the grouper function that takes in a list and produces a list of lists. Each sublist should have all of the elements in order.\ngrouper [1,1,1,2,3,3,2] = [[1,1,1],[2],[3,3],[2]] "
},
{
	"uri": "http://wy-cs.info/ap-cs/haskell/typeclass-notes/",
	"title": "Typeclass Notes",
	"tags": [],
	"description": "Typeclasses you may encounter in everyday programming.",
	"content": " Num: Addition, multiplication, a way to convert from an integer. Also absolute value and negation. Real: Part of the real number line. Ordered numbers. toRational. Does not imply decimals! Enum: Next and previous (succ-essor and pred-ecessor). Integral: Integer division. Fractional: \u0026ldquo;Decimal\u0026rdquo; division. Floating: transcendental functions (exponentials, trig, pi, e). RealFrac: truncate and round. RealFloat: efficient floating point.  "
},
{
	"uri": "http://wy-cs.info/ap-cs/haskell/ch04/ch04-discussion/",
	"title": "Chapter 4 Discussion",
	"tags": [],
	"description": "Slideshow of Discussion problems for Chapter 4. Similar but not identical to reading guide questions.",
	"content": " Chapter 4 Discussion Absence Interpretation    Periods Absent Probability of all day absence     a \u0026gt;= 6 1.0   a \u0026gt;= 3 0.5   a \u0026lt; 3 0.0    Speaker    Input Pattern output     1 \u0026ldquo;welcome\u0026rdquo;   2 \u0026ldquo;students\u0026rdquo;   3 \u0026ldquo;students welcome welcome students\u0026ldquo;   4 \u0026ldquo;students welcome welcome students students students students welcome welcome students\u0026ldquo;   n (previous output) (output before that) (output before that) (previous output)    Trimult Given a list of numbers, produce a list of all products of three terms in a row.\n trimult [10,20,50] = [10000] trimult [1,2,3,4,5,6] = [6,24,60,120]  Second and third    Input Output     [1,5,10] \u0026ldquo;The second and third items of [1,5,10] add to be 15\u0026rdquo;   [3,40,60,99] \u0026ldquo;The second and third items of [3,40,60,99] add to be 100\u0026rdquo;    Try two different ways!\nEighty-first Find the eighty-first item in a list.\n   Input Output     [0,2..200] 162   [110,120..] 920    "
},
{
	"uri": "http://wy-cs.info/ap-cs/haskell/ch03/ch03-quiz/",
	"title": "Chapter 3 Quiz",
	"tags": ["haskell", "quiz"],
	"description": "",
	"content": " Write a good (technically correct) type signature for\n f(x) = x*(x+1) g(xs) = [ x/7 | x \u0026lt;- xs ] h(x) = \u0026quot;You told me \u0026quot;++(show x) k(x,y) = y*x - 5  Write a function to extract an integer from one string and output a list containing the second string repeated that many times.\nprob2 \u0026#34;5\u0026#34; \u0026#34;dog\u0026#34; == [\u0026#34;dog\u0026#34;,\u0026#34;dog\u0026#34;,\u0026#34;dog\u0026#34;,\u0026#34;dog\u0026#34;,\u0026#34;dog\u0026#34;] Given two strings containing floating point numbers, return the sum of those numbers.\nprob3 \u0026#34;3.14\u0026#34; \u0026#34;2.81\u0026#34; == 5.95 The root mean square of a list of numbers is the square root of the average of the squares of the numbers. Write a function to find the RMS of a list of floating point numbers.\n-- results are approximate prob4 [1, 10, 100] == 58.0259 prob4 [3.14, 2.81] == 2.979 The mode of a list of integers is the number that appears the most often. Write a function to find the mode of a list of integers.\nprob5 [1,1,1,2,2,2,2,2,3,3] == 2 prob5 [1,1,1,2,2,2] == 1 -- any one of the modes is ok  "
},
{
	"uri": "http://wy-cs.info/ap-cs/haskell/daily/2017-09-18/",
	"title": "2017-09-18",
	"tags": ["haskell"],
	"description": "Battleship and homework review.",
	"content": "We discussed problem 7 from the homework. You should finish it based on the discussion.\nMentioned from Chapter 5: type to make short ways to say types. Examples:\ntype Pt = (Int,Int) type Ship = [Pt] type Shots = [Pt] We wrote the function is_sunk for battleship.\nFunctions we discussed:\n [\u0026amp;\u0026amp;]: Join two Boolean values with logical and. and: Join a list of Boolean values with logical and. all: Apply a tester function and then join all of the values together with \u0026ldquo;and\u0026rdquo;.  All of these functions have counterparts for logical or; they are: ||, or, any.\n"
},
{
	"uri": "http://wy-cs.info/ap-cs/haskell/daily/2017-09-13/",
	"title": "2017-09-14 Indentation",
	"tags": ["haskell"],
	"description": "Indentation matters. A lot.",
	"content": " Indentation is significant in Haskell. Haskell uses indentation to group pieces of code together. This is similar to Python, but there are \u0026ldquo;false cognates\u0026rdquo; - similar code that is indented differently in the two languages. In Racket, grouping is done only by parentheses.\nIndenting to the same level \u0026ldquo;All grouped expressions must be exactly aligned.\u0026rdquo;\n Example 1a: good indentation\nif x `mod` 3 == 0 \u0026amp;\u0026amp; x `mod` 5 == 0 -- good. aligned with top x. ... Example 1a: bad indentation\nif x `mod` 3 == 0 \u0026amp;\u0026amp; x `mod` 5 == 0 -- wrong. not aligned with top x ... Indenting further \u0026ldquo;Code which is part of some expression [must] be indented further than the beginning of that expression.\n Not enough indentation On one hand, this means that if you do not indent, you are not continuing a preceding expression. Example 2:\nif x `mod` 3 == 0 \u0026amp;\u0026amp; x `mod` 5 == 0 then -- wrong; needs to be indented further than the if x else -- wrong again 0 Too much indentation On the other hand, if you do indent, you may be continuing something you wrote previously.\nHow could this be an issue? If you write one function and then indent a later function, Haskell thinks you want the second function to be inside the first function (as in, a \u0026ldquo;sub-function\u0026rdquo;).\nExample:\nmain = do putStrLn $ helper 5 -- all this space does not change anything... -- answer x = 200 * x helper x = answer x + 1 Notice how answer is indented more than main? That makes the answer function live inside of main\u0026hellip; this will cause all sorts of problems, but the first one is that helper cannot see answer because helper cannot see anything inside of another function like main.\nThe source for all quotes in this article is the Haskell article on indentation. Other example issues came from observations in class.\n"
},
{
	"uri": "http://wy-cs.info/ap-cs/haskell/replit/",
	"title": "Repl.it",
	"tags": ["haskell"],
	"description": "",
	"content": "A summary of any special problems that have arisen with repl.it. Repl.it requires a main method The particular interpreter repl.it requires that you have a main method. Write a simple one and then type your tests in the interactions pane.\nmain = do putStrLn \u0026#34;Loaded\u0026#34;"
},
{
	"uri": "http://wy-cs.info/ap-cs/haskell/daily/2017-09-12/",
	"title": "2017-09-12",
	"tags": ["haskell"],
	"description": "Technical details that came up while doing Chapter 2 Homework.",
	"content": " Memorize how to write a basic main method:  main = do putStrLn \u0026#34;Loaded\u0026#34;  Use \u0026ldquo;\u0026ndash;\u0026rdquo; (two dashes) to comment to the end of the line. This is equivalent to Racket \u0026ldquo;;\u0026rdquo; (semicolon).\n Function name rules:\n Must begin with lowercase letter. Hyphens (-) are not allowed in names. Underscore (_) may be used instead.\n Traditionally camelCase is used for functions. (First letter lowercase, then uppercase each new word.)\n  We will learn about the $ sign soon, but it is a substitute for putting parentheses from somewhere to the end of the line. That means\nputStrLn ( show ( grapher f 0 10 ) ) could be written as\nputStrLn $ show $ grapher f 0 10  "
},
{
	"uri": "http://wy-cs.info/intermediate-cs/part-i/ch01/ch01-review/",
	"title": "Chapter 01 Review",
	"tags": [],
	"description": "",
	"content": "Two images of designs to practice making in Racket.\n\nYou may omit the border lines.\n"
},
{
	"uri": "http://wy-cs.info/ap-cs/haskell/daily/2017-09-11/",
	"title": "2017-09-11",
	"tags": ["haskell", "daily-notes"],
	"description": "worked examples - removeVowels and wordLenPairs",
	"content": "removeVowels word = [ letter | letter \u0026lt;- word, not (letter elem \u0026ldquo;aeiouAEIOU\u0026rdquo; )]\nwordLenPairs wordlist = [ (word, length word) | word \u0026lt;- wordlist ]\n"
},
{
	"uri": "http://wy-cs.info/ap-cs/haskell/ghci-details/",
	"title": "Source Code Files (ghci)",
	"tags": ["haskell"],
	"description": "",
	"content": "Writing a file is different from typing in an interpreter like repl.it or ghci. The differences include no let statements at the top level and no automatic printing of results.\nInterpreter vs file An interpreter is what the \u0026ldquo;interactions pane\u0026rdquo; is called. In DrRacket, the interactions pane is the one on the bottom. In repl.it, the interactions pane is on the right side. Interactions with an interpreter can not be saved. There is a command line interpeter in the Haskell Platform called ghci.\nA file is equivalent to the \u0026ldquo;definitions pane\u0026rdquo; in DrRacket. In repl.it, the left hand side of the window is a file. Files can be saved. You need to load (or \u0026ldquo;play\u0026rdquo;) a file to see the results.\nNo let statements needed to make variables or functions Writing a file is different than typing in an interpreter. The whole file is loaded and (usually) the main function is run. When defining functions and variables a file, the word let is not used and the results are not immediately printed. A file equivalent might be written:\nw = \u0026#34;Cat\u0026#34; wlen = length w main = do putStrLn (show wlen) Typing in an interpreter, every statement gives an immediate result, so the following is similar code for comparison:\nPrelude\u0026gt; let w = \u0026#34;Cat\u0026#34; Prelude\u0026gt; length w 3 Output to screen when running a file Loading or running a file will not automatically cause results to print.\nUse the putStrLn function to output a string.\n w = \u0026#34;Cat\u0026#34; main = do putStrLn w Printing items that are not strings requires the use of show to make the string that is printed.\nPrelude\u0026gt; let w = [\u0026#34;list\u0026#34;,\u0026#34;of\u0026#34;,\u0026#34;big words\u0026#34;] Prelude\u0026gt; putStrLn (show w) [\u0026#34;list\u0026#34;,\u0026#34;of\u0026#34;,\u0026#34;big words\u0026#34;] Omitting the show will produce an error message:\nPrelude\u0026gt; putStrLn w \u0026lt;interactive\u0026gt;:7:10: error: • Couldn\u0026#39;t match type ‘[Char]’ with ‘Char’ Expected type: String Actual type: [[Char]] • In the first argument of ‘putStrLn’, namely ‘w’ In the expression: putStrLn w In an equation for ‘it’: it = putStrLn w"
},
{
	"uri": "http://wy-cs.info/biography/",
	"title": "Biography",
	"tags": [],
	"description": "",
	"content": " Dr. Mauer-Oats has been at Whitney Young for more than five years. He holds a Ph.D. in Mathematics from the University of Illinois at Urbana-Champaign.\nCourses Courses taught in 2017-2018:\n AP Computer Science Intermediate Computer Science  Courses taught in prior years at Whitney Young:\n Exploring Computer Science Precalculus Honors Algebra 2 with Trigonometry  Clubs Clubs sponsored in 2017-2018:\n Aerospace club - qualified for the TARC National Fly-off in 2017. Robotics club (FTC) - Rockwell Innovation Award in 2017. Coding Club - Competition computer programming. Math team (assistant coach). Girls Who Code (assistant mentor).  "
},
{
	"uri": "http://wy-cs.info/",
	"title": "Mauer-Oats Classes",
	"tags": [],
	"description": "",
	"content": " AP Computer Science Recent Changes   20. Set and Map modified Mon 05-21  Data Science Summer Camp modified Thu 05-17  15. File Divvy modified Thu 04-26  15. File Quiz modified Thu 04-26  Java Review Calendar modified Wed 04-18  15. File Assignments modified Wed 04-18  15. File Intro modified Wed 04-18  15. Files and Streams modified Wed 04-18  Intermediate Computer Science Recent Changes    P2. Attendance modified Mon 05-21  P1. Jackpot modified Mon 05-21  Sem II Review modified Mon 05-21  Agar.io modified Wed 05-16  Reversi modified Wed 05-16  25. Universe Projects modified Wed 05-16  Universe Slapjack modified Wed 05-16  Universe Resources modified Wed 05-16  Site RSS Feed The site feed only includes both Intermediate and AP CS combined (for now).\nRSS Feed "
},
{
	"uri": "http://wy-cs.info/ap-cs/haskell/ch01/ch01-reading-guide/",
	"title": "Ch01 Reading Guide",
	"tags": ["reading-guide", "haskell"],
	"description": "",
	"content": " Haskell introduction reading questions  Haskell is supposed to be a purely functional language. Unpack that:\n What does pure mean? What is the difference between functional and imperative? (The book is not so clear on this point. What do you think it says, in your own words?)  Haskell is lazy. What does this mean?\n Haskell is statically typed. This could be unpacked, too.\n What does typed mean? The word static in English can me \u0026ldquo;not changing\u0026rdquo;. How would you apply that meaning in this context?  When did work on Haskell begin?\n  "
},
{
	"uri": "http://wy-cs.info/resources/ics-wescheme-note/",
	"title": "WeScheme",
	"tags": [],
	"description": "Notes on how WeScheme is different from DrRacket.",
	"content": " Special notes for WeScheme users You can use WeScheme if you cannot install DrRacket. For example, if you have a Chromebook for your home computer.\nThere are a few differences:\n Omit the (require picturing-programs) line.\n (Chapter 3) Instead of copy and pasting in a picture, you need to copy the link for the image and use bitmap/url like this:\n(bitmap/url \u0026#34;https://www.what-dog.net/Images/faces2/main004.jpg\u0026#34;) (Chapter 6) Inside big-bang you need to use the phrase to-draw instead of on-draw that we use in DrRacket. (define (draw-handler model) (overlay model (empty-scene 300 200))) (define (tick-handler model) (scale 1.01 model)) (big-bang (circle 10 \u0026#34;solid\u0026#34; \u0026#34;green\u0026#34;) (on-tick tick-handler) (to-draw draw-handler))\n  "
},
{
	"uri": "http://wy-cs.info/_header/",
	"title": "",
	"tags": [],
	"description": "",
	"content": "WY Computer Science\n"
},
{
	"uri": "http://wy-cs.info/tags/ap-cs/",
	"title": "Ap Cs",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://wy-cs.info/categories/ap-cs/",
	"title": "Ap Cs",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://wy-cs.info/tags/calendar/",
	"title": "Calendar",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://wy-cs.info/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://wy-cs.info/tags/daily-notes/",
	"title": "Daily Notes",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://wy-cs.info/tags/design-process/",
	"title": "Design Process",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://wy-cs.info/tags/git/",
	"title": "Git",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://wy-cs.info/tags/haskell/",
	"title": "Haskell",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://wy-cs.info/tags/homework/",
	"title": "Homework",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://wy-cs.info/tags/hw/",
	"title": "Hw",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://wy-cs.info/categories/intermediate-cs/",
	"title": "Intermediate Cs",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://wy-cs.info/tags/opener/",
	"title": "Opener",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://wy-cs.info/tags/project/",
	"title": "Project",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://wy-cs.info/tags/quiz/",
	"title": "Quiz",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://wy-cs.info/tags/reading-guide/",
	"title": "Reading Guide",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://wy-cs.info/tags/solutions/",
	"title": "Solutions",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://wy-cs.info/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]